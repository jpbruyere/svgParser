// autogenerated by https://github.com/jpbruyere/XMLToolsLibrary
// Copyright (c) 2022  Jean-Philippe Bruy√®re <jp_bruyere@hotmail.com>
// This code is licensed under the MIT license (MIT) (http://opensource.org/licenses/MIT)

#ifndef PARSER_GEN_H
#define PARSER_GEN_H
#include "vkvg_svg_internal.h"

#ifndef HEADING_SVG_XMLNS_ATTRIB
	#define HEADING_SVG_XMLNS_ATTRIB
#endif
#ifndef PROCESS_SVG_XMLNS_ATTRIB
	#define PROCESS_SVG_XMLNS_ATTRIB
#endif
#ifndef HEADING_SVG_CORE_ATTRIB
	#define HEADING_SVG_CORE_ATTRIB
#endif
#ifndef PROCESS_SVG_CORE_ATTRIB
	#define PROCESS_SVG_CORE_ATTRIB
#endif
#ifndef HEADING_SVG_CONDITIONAL_ATTRIB
	#define HEADING_SVG_CONDITIONAL_ATTRIB
#endif
#ifndef PROCESS_SVG_CONDITIONAL_ATTRIB
	#define PROCESS_SVG_CONDITIONAL_ATTRIB
#endif
#ifndef HEADING_SVG_STYLE_ATTRIB
	#define HEADING_SVG_STYLE_ATTRIB
#endif
#ifndef PROCESS_SVG_STYLE_ATTRIB
	#define PROCESS_SVG_STYLE_ATTRIB
#endif
#ifndef HEADING_SVG_PRESENTATION_ATTRIB
	#define HEADING_SVG_PRESENTATION_ATTRIB
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB
	#define PROCESS_SVG_PRESENTATION_ATTRIB
#endif
#ifndef HEADING_SVG_VIEWPORT_ATTRIB
	#define HEADING_SVG_VIEWPORT_ATTRIB
#endif
#ifndef PROCESS_SVG_VIEWPORT_ATTRIB
	#define PROCESS_SVG_VIEWPORT_ATTRIB
#endif
#ifndef HEADING_SVG_TEXTCONTENT_ATTRIB
	#define HEADING_SVG_TEXTCONTENT_ATTRIB
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB
#endif
#ifndef HEADING_SVG_FONT_ATTRIB
	#define HEADING_SVG_FONT_ATTRIB
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB
	#define PROCESS_SVG_FONT_ATTRIB
#endif
#ifndef HEADING_SVG_PAINT_ATTRIB
	#define HEADING_SVG_PAINT_ATTRIB
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB
	#define PROCESS_SVG_PAINT_ATTRIB
#endif
#ifndef HEADING_SVG_COLOR_ATTRIB
	#define HEADING_SVG_COLOR_ATTRIB
#endif
#ifndef PROCESS_SVG_COLOR_ATTRIB
	#define PROCESS_SVG_COLOR_ATTRIB
#endif
#ifndef HEADING_SVG_OPACITY_ATTRIB
	#define HEADING_SVG_OPACITY_ATTRIB
#endif
#ifndef PROCESS_SVG_OPACITY_ATTRIB
	#define PROCESS_SVG_OPACITY_ATTRIB
#endif
#ifndef HEADING_SVG_GRAPHICS_ATTRIB
	#define HEADING_SVG_GRAPHICS_ATTRIB
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB
	#define PROCESS_SVG_GRAPHICS_ATTRIB
#endif
#ifndef HEADING_SVG_MARKER_ATTRIB
	#define HEADING_SVG_MARKER_ATTRIB
#endif
#ifndef PROCESS_SVG_MARKER_ATTRIB
	#define PROCESS_SVG_MARKER_ATTRIB
#endif
#ifndef HEADING_SVG_GRADIENT_ATTRIB
	#define HEADING_SVG_GRADIENT_ATTRIB
#endif
#ifndef PROCESS_SVG_GRADIENT_ATTRIB
	#define PROCESS_SVG_GRADIENT_ATTRIB
#endif
#ifndef HEADING_SVG_CLIP_ATTRIB
	#define HEADING_SVG_CLIP_ATTRIB
#endif
#ifndef PROCESS_SVG_CLIP_ATTRIB
	#define PROCESS_SVG_CLIP_ATTRIB
#endif
#ifndef HEADING_SVG_DOCUMENTEVENTS_ATTRIB
	#define HEADING_SVG_DOCUMENTEVENTS_ATTRIB
#endif
#ifndef PROCESS_SVG_DOCUMENTEVENTS_ATTRIB
	#define PROCESS_SVG_DOCUMENTEVENTS_ATTRIB
#endif
#ifndef HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	#define HEADING_SVG_GRAPHICALEVENTS_ATTRIB
#endif
#ifndef PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	#define PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
#endif
#ifndef HEADING_SVG_XLINKEMBED_ATTRIB
	#define HEADING_SVG_XLINKEMBED_ATTRIB
#endif
#ifndef PROCESS_SVG_XLINKEMBED_ATTRIB
	#define PROCESS_SVG_XLINKEMBED_ATTRIB
#endif
#ifndef HEADING_SVG_XLINKREQUIRED_ATTRIB
	#define HEADING_SVG_XLINKREQUIRED_ATTRIB
#endif
#ifndef PROCESS_SVG_XLINKREQUIRED_ATTRIB
	#define PROCESS_SVG_XLINKREQUIRED_ATTRIB
#endif
#ifndef HEADING_SVG_XLINK_ATTRIB
	#define HEADING_SVG_XLINK_ATTRIB
#endif
#ifndef PROCESS_SVG_XLINK_ATTRIB
	#define PROCESS_SVG_XLINK_ATTRIB
#endif
#ifndef HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	#define HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
#endif
#ifndef PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	#define PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
#endif
#ifndef HEADING_SVG_FILTERPRIMITIVE_ATTRIB
	#define HEADING_SVG_FILTERPRIMITIVE_ATTRIB
#endif
#ifndef PROCESS_SVG_FILTERPRIMITIVE_ATTRIB
	#define PROCESS_SVG_FILTERPRIMITIVE_ATTRIB
#endif
#ifndef HEADING_SVG_XLINKREPLACE_ATTRIB
	#define HEADING_SVG_XLINKREPLACE_ATTRIB
#endif
#ifndef PROCESS_SVG_XLINKREPLACE_ATTRIB
	#define PROCESS_SVG_XLINKREPLACE_ATTRIB
#endif
#ifndef HEADING_SVG_ANIMATIONEVENTS_ATTRIB
	#define HEADING_SVG_ANIMATIONEVENTS_ATTRIB
#endif
#ifndef PROCESS_SVG_ANIMATIONEVENTS_ATTRIB
	#define PROCESS_SVG_ANIMATIONEVENTS_ATTRIB
#endif
#ifndef HEADING_SVG_ANIMATION_ATTRIB
	#define HEADING_SVG_ANIMATION_ATTRIB
#endif
#ifndef PROCESS_SVG_ANIMATION_ATTRIB
	#define PROCESS_SVG_ANIMATION_ATTRIB
#endif
#ifndef HEADING_SVG_ANIMATIONATTRIBUTE_ATTRIB
	#define HEADING_SVG_ANIMATIONATTRIBUTE_ATTRIB
#endif
#ifndef PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB
	#define PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB
#endif
#ifndef HEADING_SVG_ANIMATIONTIMING_ATTRIB
	#define HEADING_SVG_ANIMATIONTIMING_ATTRIB
#endif
#ifndef PROCESS_SVG_ANIMATIONTIMING_ATTRIB
	#define PROCESS_SVG_ANIMATIONTIMING_ATTRIB
#endif
#ifndef HEADING_SVG_ANIMATIONVALUE_ATTRIB
	#define HEADING_SVG_ANIMATIONVALUE_ATTRIB
#endif
#ifndef PROCESS_SVG_ANIMATIONVALUE_ATTRIB
	#define PROCESS_SVG_ANIMATIONVALUE_ATTRIB
#endif
#ifndef HEADING_SVG_ANIMATIONADDTION_ATTRIB
	#define HEADING_SVG_ANIMATIONADDTION_ATTRIB
#endif
#ifndef PROCESS_SVG_ANIMATIONADDTION_ATTRIB
	#define PROCESS_SVG_ANIMATIONADDTION_ATTRIB
#endif
#ifndef PROCESS_SVG_XMLNS_ATTRIB_XMLNS
	#define PROCESS_SVG_XMLNS_ATTRIB_XMLNS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XMLNS_ATTRIB_XMLNS_XLINK
	#define PROCESS_SVG_XMLNS_ATTRIB_XMLNS_XLINK LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CORE_ATTRIB_ID
	#define PROCESS_SVG_CORE_ATTRIB_ID LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CORE_ATTRIB_XML_BASE
	#define PROCESS_SVG_CORE_ATTRIB_XML_BASE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CORE_ATTRIB_XML_LANG
	#define PROCESS_SVG_CORE_ATTRIB_XML_LANG LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
	#define PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
	#define PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
	#define PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
	#define PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
	#define PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_STYLE_ATTRIB_STYLE
	#define PROCESS_SVG_STYLE_ATTRIB_STYLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_STYLE_ATTRIB_CLASS
	#define PROCESS_SVG_STYLE_ATTRIB_CLASS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
	#define PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
	#define PROCESS_SVG_VIEWPORT_ATTRIB_CLIP LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
	#define PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
	#define PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
	#define PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
	#define PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
	#define PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
	#define PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
	#define PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
	#define PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
	#define PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
	#define PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
	#define PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
	#define PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
	#define PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
	#define PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
	#define PROCESS_SVG_FONT_ATTRIB_FONT_SIZE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
	#define PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
	#define PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
	#define PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
	#define PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
	#define PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
	#define PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_FILL
	#define PROCESS_SVG_PAINT_ATTRIB_FILL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
	#define PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
	#define PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
	#define PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_STROKE
	#define PROCESS_SVG_PAINT_ATTRIB_STROKE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
	#define PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
	#define PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
	#define PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
	#define PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
	#define PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
	#define PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
	#define PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
	#define PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
	#define PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
	#define PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
	#define PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
	#define PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_COLOR_ATTRIB_COLOR
	#define PROCESS_SVG_COLOR_ATTRIB_COLOR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
	#define PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
	#define PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
	#define PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
	#define PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
	#define PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
	#define PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
	#define PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
	#define PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_OPACITY_ATTRIB_OPACITY
	#define PROCESS_SVG_OPACITY_ATTRIB_OPACITY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
	#define PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
	#define PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
	#define PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
	#define PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
	#define PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
	#define PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
	#define PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
	#define PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
	#define PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
	#define PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
	#define PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
	#define PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
	#define PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
	#define PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
	#define PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
	#define PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
	#define PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
	#define PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
	#define PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
	#define PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
	#define PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
	#define PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
	#define PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
	#define PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
	#define PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
	#define PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
	#define PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
	#define PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
	#define PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
	#define PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_MARKER_ATTRIB_MARKER_START
	#define PROCESS_SVG_MARKER_ATTRIB_MARKER_START LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
	#define PROCESS_SVG_MARKER_ATTRIB_MARKER_MID LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_MARKER_ATTRIB_MARKER_END
	#define PROCESS_SVG_MARKER_ATTRIB_MARKER_END LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
	#define PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
	#define PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
	#define PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
	#define PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
	#define PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
	#define PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
	#define PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_MASK
	#define PROCESS_SVG_PRESENTATION_ATTRIB_MASK LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
	#define PROCESS_SVG_PRESENTATION_ATTRIB_FILTER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
	#define PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
	#define PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
	#define PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
	#define PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
	#define PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
	#define PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
	#define PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
	#define PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONUNLOAD
	#define PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONUNLOAD LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONABORT
	#define PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONABORT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONERROR
	#define PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONERROR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONRESIZE
	#define PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONRESIZE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONSCROLL
	#define PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONSCROLL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONZOOM
	#define PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONZOOM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
	#define PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
	#define PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
	#define PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
	#define PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
	#define PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
	#define PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
	#define PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
	#define PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
	#define PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
	#define PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_SVG_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_SVG_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_X
	#define PROCESS_SVG_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_Y
	#define PROCESS_SVG_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_WIDTH
	#define PROCESS_SVG_WIDTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_HEIGHT
	#define PROCESS_SVG_HEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_VIEWBOX
	#define PROCESS_SVG_VIEWBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_PRESERVEASPECTRATIO
	#define PROCESS_SVG_PRESERVEASPECTRATIO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ZOOMANDPAN_DISABLE
	#define PROCESS_SVG_ZOOMANDPAN_DISABLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ZOOMANDPAN_MAGNIFY
	#define PROCESS_SVG_ZOOMANDPAN_MAGNIFY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_VERSION
	#define PROCESS_SVG_VERSION LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_BASEPROFILE
	#define PROCESS_SVG_BASEPROFILE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CONTENTSCRIPTTYPE
	#define PROCESS_SVG_CONTENTSCRIPTTYPE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_CONTENTSTYLETYPE
	#define PROCESS_SVG_CONTENTSTYLETYPE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_G_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_G_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_G_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_G_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_G_TRANSFORM
	#define PROCESS_G_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_DEFS_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_DEFS_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_DEFS_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_DEFS_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_DEFS_TRANSFORM
	#define PROCESS_DEFS_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SYMBOL_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_SYMBOL_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SYMBOL_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_SYMBOL_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SYMBOL_VIEWBOX
	#define PROCESS_SYMBOL_VIEWBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SYMBOL_PRESERVEASPECTRATIO
	#define PROCESS_SYMBOL_PRESERVEASPECTRATIO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKEMBED_ATTRIB_XMLNS_XLINK
	#define PROCESS_SVG_XLINKEMBED_ATTRIB_XMLNS_XLINK LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_TYPE_SIMPLE
	#define PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_TYPE_SIMPLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_HREF
	#define PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_HREF LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ROLE
	#define PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ROLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ARCROLE
	#define PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ARCROLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_TITLE
	#define PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_TITLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_SHOW_EMBED
	#define PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_SHOW_EMBED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ACTUATE_ONLOAD
	#define PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ACTUATE_ONLOAD LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_USE_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_USE_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_USE_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_USE_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_USE_X
	#define PROCESS_USE_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_USE_Y
	#define PROCESS_USE_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_USE_WIDTH
	#define PROCESS_USE_WIDTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_USE_HEIGHT
	#define PROCESS_USE_HEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_USE_TRANSFORM
	#define PROCESS_USE_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SWITCH_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_SWITCH_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SWITCH_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_SWITCH_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SWITCH_TRANSFORM
	#define PROCESS_SWITCH_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_IMAGE_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_IMAGE_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_IMAGE_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_IMAGE_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_IMAGE_X
	#define PROCESS_IMAGE_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_IMAGE_Y
	#define PROCESS_IMAGE_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_IMAGE_WIDTH
	#define PROCESS_IMAGE_WIDTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_IMAGE_HEIGHT
	#define PROCESS_IMAGE_HEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_IMAGE_PRESERVEASPECTRATIO
	#define PROCESS_IMAGE_PRESERVEASPECTRATIO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_IMAGE_TRANSFORM
	#define PROCESS_IMAGE_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_STYLE_XML_SPACE_PRESERVE
	#define PROCESS_STYLE_XML_SPACE_PRESERVE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_STYLE_ID
	#define PROCESS_STYLE_ID LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_STYLE_XML_BASE
	#define PROCESS_STYLE_XML_BASE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_STYLE_XML_LANG
	#define PROCESS_STYLE_XML_LANG LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_STYLE_TYPE
	#define PROCESS_STYLE_TYPE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_STYLE_MEDIA
	#define PROCESS_STYLE_MEDIA LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_STYLE_TITLE
	#define PROCESS_STYLE_TITLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATH_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_PATH_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATH_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_PATH_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATH_D
	#define PROCESS_PATH_D LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATH_PATHLENGTH
	#define PROCESS_PATH_PATHLENGTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATH_TRANSFORM
	#define PROCESS_PATH_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RECT_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_RECT_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RECT_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_RECT_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RECT_X
	#define PROCESS_RECT_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RECT_Y
	#define PROCESS_RECT_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RECT_WIDTH
	#define PROCESS_RECT_WIDTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RECT_HEIGHT
	#define PROCESS_RECT_HEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RECT_RX
	#define PROCESS_RECT_RX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RECT_RY
	#define PROCESS_RECT_RY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RECT_TRANSFORM
	#define PROCESS_RECT_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CIRCLE_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_CIRCLE_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CIRCLE_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_CIRCLE_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CIRCLE_CX
	#define PROCESS_CIRCLE_CX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CIRCLE_CY
	#define PROCESS_CIRCLE_CY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CIRCLE_R
	#define PROCESS_CIRCLE_R LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CIRCLE_TRANSFORM
	#define PROCESS_CIRCLE_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINE_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_LINE_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINE_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_LINE_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINE_X1
	#define PROCESS_LINE_X1 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINE_Y1
	#define PROCESS_LINE_Y1 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINE_X2
	#define PROCESS_LINE_X2 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINE_Y2
	#define PROCESS_LINE_Y2 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINE_TRANSFORM
	#define PROCESS_LINE_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ELLIPSE_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_ELLIPSE_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ELLIPSE_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_ELLIPSE_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ELLIPSE_CX
	#define PROCESS_ELLIPSE_CX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ELLIPSE_CY
	#define PROCESS_ELLIPSE_CY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ELLIPSE_RX
	#define PROCESS_ELLIPSE_RX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ELLIPSE_RY
	#define PROCESS_ELLIPSE_RY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ELLIPSE_TRANSFORM
	#define PROCESS_ELLIPSE_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_POLYLINE_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_POLYLINE_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_POLYLINE_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_POLYLINE_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_POLYLINE_POINTS
	#define PROCESS_POLYLINE_POINTS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_POLYLINE_TRANSFORM
	#define PROCESS_POLYLINE_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_POLYGON_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_POLYGON_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_POLYGON_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_POLYGON_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_POLYGON_POINTS
	#define PROCESS_POLYGON_POINTS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_POLYGON_TRANSFORM
	#define PROCESS_POLYGON_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXT_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_TEXT_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXT_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_TEXT_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXT_X
	#define PROCESS_TEXT_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXT_Y
	#define PROCESS_TEXT_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXT_DX
	#define PROCESS_TEXT_DX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXT_DY
	#define PROCESS_TEXT_DY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXT_ROTATE
	#define PROCESS_TEXT_ROTATE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXT_TEXTLENGTH
	#define PROCESS_TEXT_TEXTLENGTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXT_LENGTHADJUST_SPACING
	#define PROCESS_TEXT_LENGTHADJUST_SPACING LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXT_LENGTHADJUST_SPACINGANDGLYPHS
	#define PROCESS_TEXT_LENGTHADJUST_SPACINGANDGLYPHS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXT_TRANSFORM
	#define PROCESS_TEXT_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TSPAN_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_TSPAN_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TSPAN_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_TSPAN_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TSPAN_X
	#define PROCESS_TSPAN_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TSPAN_Y
	#define PROCESS_TSPAN_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TSPAN_DX
	#define PROCESS_TSPAN_DX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TSPAN_DY
	#define PROCESS_TSPAN_DY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TSPAN_ROTATE
	#define PROCESS_TSPAN_ROTATE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TSPAN_TEXTLENGTH
	#define PROCESS_TSPAN_TEXTLENGTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TSPAN_LENGTHADJUST_SPACING
	#define PROCESS_TSPAN_LENGTHADJUST_SPACING LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TSPAN_LENGTHADJUST_SPACINGANDGLYPHS
	#define PROCESS_TSPAN_LENGTHADJUST_SPACINGANDGLYPHS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREQUIRED_ATTRIB_XMLNS_XLINK
	#define PROCESS_SVG_XLINKREQUIRED_ATTRIB_XMLNS_XLINK LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TYPE_SIMPLE
	#define PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TYPE_SIMPLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_HREF
	#define PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_HREF LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ROLE
	#define PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ROLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ARCROLE
	#define PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ARCROLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TITLE
	#define PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TITLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_SHOW_OTHER
	#define PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_SHOW_OTHER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ACTUATE_ONLOAD
	#define PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ACTUATE_ONLOAD LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TREF_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_TREF_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TREF_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_TREF_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TREF_X
	#define PROCESS_TREF_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TREF_Y
	#define PROCESS_TREF_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TREF_DX
	#define PROCESS_TREF_DX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TREF_DY
	#define PROCESS_TREF_DY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TREF_ROTATE
	#define PROCESS_TREF_ROTATE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TREF_TEXTLENGTH
	#define PROCESS_TREF_TEXTLENGTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TREF_LENGTHADJUST_SPACING
	#define PROCESS_TREF_LENGTHADJUST_SPACING LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TREF_LENGTHADJUST_SPACINGANDGLYPHS
	#define PROCESS_TREF_LENGTHADJUST_SPACINGANDGLYPHS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXTPATH_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_TEXTPATH_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXTPATH_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_TEXTPATH_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXTPATH_STARTOFFSET
	#define PROCESS_TEXTPATH_STARTOFFSET LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXTPATH_TEXTLENGTH
	#define PROCESS_TEXTPATH_TEXTLENGTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXTPATH_LENGTHADJUST_SPACING
	#define PROCESS_TEXTPATH_LENGTHADJUST_SPACING LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXTPATH_LENGTHADJUST_SPACINGANDGLYPHS
	#define PROCESS_TEXTPATH_LENGTHADJUST_SPACINGANDGLYPHS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXTPATH_METHOD_ALIGN
	#define PROCESS_TEXTPATH_METHOD_ALIGN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXTPATH_METHOD_STRETCH
	#define PROCESS_TEXTPATH_METHOD_STRETCH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXTPATH_SPACING_AUTO
	#define PROCESS_TEXTPATH_SPACING_AUTO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_TEXTPATH_SPACING_EXACT
	#define PROCESS_TEXTPATH_SPACING_EXACT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINK_ATTRIB_XMLNS_XLINK
	#define PROCESS_SVG_XLINK_ATTRIB_XMLNS_XLINK LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINK_ATTRIB_XLINK_TYPE_SIMPLE
	#define PROCESS_SVG_XLINK_ATTRIB_XLINK_TYPE_SIMPLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINK_ATTRIB_XLINK_HREF
	#define PROCESS_SVG_XLINK_ATTRIB_XLINK_HREF LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINK_ATTRIB_XLINK_ROLE
	#define PROCESS_SVG_XLINK_ATTRIB_XLINK_ROLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINK_ATTRIB_XLINK_ARCROLE
	#define PROCESS_SVG_XLINK_ATTRIB_XLINK_ARCROLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINK_ATTRIB_XLINK_TITLE
	#define PROCESS_SVG_XLINK_ATTRIB_XLINK_TITLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINK_ATTRIB_XLINK_SHOW_OTHER
	#define PROCESS_SVG_XLINK_ATTRIB_XLINK_SHOW_OTHER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINK_ATTRIB_XLINK_ACTUATE_ONLOAD
	#define PROCESS_SVG_XLINK_ATTRIB_XLINK_ACTUATE_ONLOAD LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ALTGLYPH_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_ALTGLYPH_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ALTGLYPH_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_ALTGLYPH_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ALTGLYPH_X
	#define PROCESS_ALTGLYPH_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ALTGLYPH_Y
	#define PROCESS_ALTGLYPH_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ALTGLYPH_DX
	#define PROCESS_ALTGLYPH_DX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ALTGLYPH_DY
	#define PROCESS_ALTGLYPH_DY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ALTGLYPH_GLYPHREF
	#define PROCESS_ALTGLYPH_GLYPHREF LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ALTGLYPH_FORMAT
	#define PROCESS_ALTGLYPH_FORMAT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ALTGLYPH_ROTATE
	#define PROCESS_ALTGLYPH_ROTATE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPHREF_X
	#define PROCESS_GLYPHREF_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPHREF_Y
	#define PROCESS_GLYPHREF_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPHREF_DX
	#define PROCESS_GLYPHREF_DX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPHREF_DY
	#define PROCESS_GLYPHREF_DY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPHREF_GLYPHREF
	#define PROCESS_GLYPHREF_GLYPHREF LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPHREF_FORMAT
	#define PROCESS_GLYPHREF_FORMAT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MARKER_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_MARKER_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MARKER_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_MARKER_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MARKER_REFX
	#define PROCESS_MARKER_REFX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MARKER_REFY
	#define PROCESS_MARKER_REFY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MARKER_MARKERUNITS_STROKEWIDTH
	#define PROCESS_MARKER_MARKERUNITS_STROKEWIDTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MARKER_MARKERUNITS_USERSPACEONUSE
	#define PROCESS_MARKER_MARKERUNITS_USERSPACEONUSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MARKER_MARKERWIDTH
	#define PROCESS_MARKER_MARKERWIDTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MARKER_MARKERHEIGHT
	#define PROCESS_MARKER_MARKERHEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MARKER_ORIENT
	#define PROCESS_MARKER_ORIENT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MARKER_VIEWBOX
	#define PROCESS_MARKER_VIEWBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MARKER_PRESERVEASPECTRATIO
	#define PROCESS_MARKER_PRESERVEASPECTRATIO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_COLOR_PROFILE_LOCAL
	#define PROCESS_COLOR_PROFILE_LOCAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_COLOR_PROFILE_NAME
	#define PROCESS_COLOR_PROFILE_NAME LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_COLOR_PROFILE_RENDERING_INTENT_AUTO
	#define PROCESS_COLOR_PROFILE_RENDERING_INTENT_AUTO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_COLOR_PROFILE_RENDERING_INTENT_PERCEPTUAL
	#define PROCESS_COLOR_PROFILE_RENDERING_INTENT_PERCEPTUAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_COLOR_PROFILE_RENDERING_INTENT_RELATIVE_COLORIMETRIC
	#define PROCESS_COLOR_PROFILE_RENDERING_INTENT_RELATIVE_COLORIMETRIC LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_COLOR_PROFILE_RENDERING_INTENT_SATURATION
	#define PROCESS_COLOR_PROFILE_RENDERING_INTENT_SATURATION LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_COLOR_PROFILE_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC
	#define PROCESS_COLOR_PROFILE_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINEARGRADIENT_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_LINEARGRADIENT_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINEARGRADIENT_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_LINEARGRADIENT_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINEARGRADIENT_X1
	#define PROCESS_LINEARGRADIENT_X1 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINEARGRADIENT_Y1
	#define PROCESS_LINEARGRADIENT_Y1 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINEARGRADIENT_X2
	#define PROCESS_LINEARGRADIENT_X2 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINEARGRADIENT_Y2
	#define PROCESS_LINEARGRADIENT_Y2 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINEARGRADIENT_GRADIENTUNITS_USERSPACEONUSE
	#define PROCESS_LINEARGRADIENT_GRADIENTUNITS_USERSPACEONUSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINEARGRADIENT_GRADIENTUNITS_OBJECTBOUNDINGBOX
	#define PROCESS_LINEARGRADIENT_GRADIENTUNITS_OBJECTBOUNDINGBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINEARGRADIENT_GRADIENTTRANSFORM
	#define PROCESS_LINEARGRADIENT_GRADIENTTRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINEARGRADIENT_SPREADMETHOD_PAD
	#define PROCESS_LINEARGRADIENT_SPREADMETHOD_PAD LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINEARGRADIENT_SPREADMETHOD_REFLECT
	#define PROCESS_LINEARGRADIENT_SPREADMETHOD_REFLECT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_LINEARGRADIENT_SPREADMETHOD_REPEAT
	#define PROCESS_LINEARGRADIENT_SPREADMETHOD_REPEAT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RADIALGRADIENT_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_RADIALGRADIENT_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RADIALGRADIENT_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_RADIALGRADIENT_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RADIALGRADIENT_CX
	#define PROCESS_RADIALGRADIENT_CX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RADIALGRADIENT_CY
	#define PROCESS_RADIALGRADIENT_CY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RADIALGRADIENT_R
	#define PROCESS_RADIALGRADIENT_R LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RADIALGRADIENT_FX
	#define PROCESS_RADIALGRADIENT_FX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RADIALGRADIENT_FY
	#define PROCESS_RADIALGRADIENT_FY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RADIALGRADIENT_GRADIENTUNITS_USERSPACEONUSE
	#define PROCESS_RADIALGRADIENT_GRADIENTUNITS_USERSPACEONUSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RADIALGRADIENT_GRADIENTUNITS_OBJECTBOUNDINGBOX
	#define PROCESS_RADIALGRADIENT_GRADIENTUNITS_OBJECTBOUNDINGBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RADIALGRADIENT_GRADIENTTRANSFORM
	#define PROCESS_RADIALGRADIENT_GRADIENTTRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RADIALGRADIENT_SPREADMETHOD_PAD
	#define PROCESS_RADIALGRADIENT_SPREADMETHOD_PAD LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RADIALGRADIENT_SPREADMETHOD_REFLECT
	#define PROCESS_RADIALGRADIENT_SPREADMETHOD_REFLECT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_RADIALGRADIENT_SPREADMETHOD_REPEAT
	#define PROCESS_RADIALGRADIENT_SPREADMETHOD_REPEAT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_STOP_OFFSET
	#define PROCESS_STOP_OFFSET LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATTERN_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_PATTERN_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATTERN_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_PATTERN_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATTERN_X
	#define PROCESS_PATTERN_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATTERN_Y
	#define PROCESS_PATTERN_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATTERN_WIDTH
	#define PROCESS_PATTERN_WIDTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATTERN_HEIGHT
	#define PROCESS_PATTERN_HEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATTERN_PATTERNUNITS_USERSPACEONUSE
	#define PROCESS_PATTERN_PATTERNUNITS_USERSPACEONUSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATTERN_PATTERNUNITS_OBJECTBOUNDINGBOX
	#define PROCESS_PATTERN_PATTERNUNITS_OBJECTBOUNDINGBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATTERN_PATTERNCONTENTUNITS_USERSPACEONUSE
	#define PROCESS_PATTERN_PATTERNCONTENTUNITS_USERSPACEONUSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATTERN_PATTERNCONTENTUNITS_OBJECTBOUNDINGBOX
	#define PROCESS_PATTERN_PATTERNCONTENTUNITS_OBJECTBOUNDINGBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATTERN_PATTERNTRANSFORM
	#define PROCESS_PATTERN_PATTERNTRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATTERN_VIEWBOX
	#define PROCESS_PATTERN_VIEWBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_PATTERN_PRESERVEASPECTRATIO
	#define PROCESS_PATTERN_PRESERVEASPECTRATIO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CLIPPATH_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_CLIPPATH_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CLIPPATH_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_CLIPPATH_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CLIPPATH_TRANSFORM
	#define PROCESS_CLIPPATH_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CLIPPATH_CLIPPATHUNITS_USERSPACEONUSE
	#define PROCESS_CLIPPATH_CLIPPATHUNITS_USERSPACEONUSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CLIPPATH_CLIPPATHUNITS_OBJECTBOUNDINGBOX
	#define PROCESS_CLIPPATH_CLIPPATHUNITS_OBJECTBOUNDINGBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MASK_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_MASK_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MASK_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_MASK_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MASK_X
	#define PROCESS_MASK_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MASK_Y
	#define PROCESS_MASK_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MASK_WIDTH
	#define PROCESS_MASK_WIDTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MASK_HEIGHT
	#define PROCESS_MASK_HEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MASK_MASKUNITS_USERSPACEONUSE
	#define PROCESS_MASK_MASKUNITS_USERSPACEONUSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MASK_MASKUNITS_OBJECTBOUNDINGBOX
	#define PROCESS_MASK_MASKUNITS_OBJECTBOUNDINGBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MASK_MASKCONTENTUNITS_USERSPACEONUSE
	#define PROCESS_MASK_MASKCONTENTUNITS_USERSPACEONUSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MASK_MASKCONTENTUNITS_OBJECTBOUNDINGBOX
	#define PROCESS_MASK_MASKCONTENTUNITS_OBJECTBOUNDINGBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FILTER_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_FILTER_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FILTER_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_FILTER_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FILTER_X
	#define PROCESS_FILTER_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FILTER_Y
	#define PROCESS_FILTER_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FILTER_WIDTH
	#define PROCESS_FILTER_WIDTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FILTER_HEIGHT
	#define PROCESS_FILTER_HEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FILTER_FILTERRES
	#define PROCESS_FILTER_FILTERRES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FILTER_FILTERUNITS_USERSPACEONUSE
	#define PROCESS_FILTER_FILTERUNITS_USERSPACEONUSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FILTER_FILTERUNITS_OBJECTBOUNDINGBOX
	#define PROCESS_FILTER_FILTERUNITS_OBJECTBOUNDINGBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FILTER_PRIMITIVEUNITS_USERSPACEONUSE
	#define PROCESS_FILTER_PRIMITIVEUNITS_USERSPACEONUSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FILTER_PRIMITIVEUNITS_OBJECTBOUNDINGBOX
	#define PROCESS_FILTER_PRIMITIVEUNITS_OBJECTBOUNDINGBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X
	#define PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y
	#define PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH
	#define PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT
	#define PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT
	#define PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN
	#define PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEBLEND_IN2
	#define PROCESS_FEBLEND_IN2 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEBLEND_MODE_NORMAL
	#define PROCESS_FEBLEND_MODE_NORMAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEBLEND_MODE_MULTIPLY
	#define PROCESS_FEBLEND_MODE_MULTIPLY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEBLEND_MODE_SCREEN
	#define PROCESS_FEBLEND_MODE_SCREEN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEBLEND_MODE_DARKEN
	#define PROCESS_FEBLEND_MODE_DARKEN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEBLEND_MODE_LIGHTEN
	#define PROCESS_FEBLEND_MODE_LIGHTEN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOLORMATRIX_TYPE_MATRIX
	#define PROCESS_FECOLORMATRIX_TYPE_MATRIX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOLORMATRIX_TYPE_SATURATE
	#define PROCESS_FECOLORMATRIX_TYPE_SATURATE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOLORMATRIX_TYPE_HUEROTATE
	#define PROCESS_FECOLORMATRIX_TYPE_HUEROTATE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOLORMATRIX_TYPE_LUMINANCETOALPHA
	#define PROCESS_FECOLORMATRIX_TYPE_LUMINANCETOALPHA LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOLORMATRIX_VALUES
	#define PROCESS_FECOLORMATRIX_VALUES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOMPOSITE_IN2
	#define PROCESS_FECOMPOSITE_IN2 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOMPOSITE_OPERATOR_OVER
	#define PROCESS_FECOMPOSITE_OPERATOR_OVER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOMPOSITE_OPERATOR_IN
	#define PROCESS_FECOMPOSITE_OPERATOR_IN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOMPOSITE_OPERATOR_OUT
	#define PROCESS_FECOMPOSITE_OPERATOR_OUT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOMPOSITE_OPERATOR_ATOP
	#define PROCESS_FECOMPOSITE_OPERATOR_ATOP LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOMPOSITE_OPERATOR_XOR
	#define PROCESS_FECOMPOSITE_OPERATOR_XOR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOMPOSITE_OPERATOR_ARITHMETIC
	#define PROCESS_FECOMPOSITE_OPERATOR_ARITHMETIC LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOMPOSITE_K1
	#define PROCESS_FECOMPOSITE_K1 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOMPOSITE_K2
	#define PROCESS_FECOMPOSITE_K2 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOMPOSITE_K3
	#define PROCESS_FECOMPOSITE_K3 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECOMPOSITE_K4
	#define PROCESS_FECOMPOSITE_K4 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECONVOLVEMATRIX_ORDER
	#define PROCESS_FECONVOLVEMATRIX_ORDER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECONVOLVEMATRIX_KERNELMATRIX
	#define PROCESS_FECONVOLVEMATRIX_KERNELMATRIX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECONVOLVEMATRIX_DIVISOR
	#define PROCESS_FECONVOLVEMATRIX_DIVISOR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECONVOLVEMATRIX_BIAS
	#define PROCESS_FECONVOLVEMATRIX_BIAS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECONVOLVEMATRIX_TARGETX
	#define PROCESS_FECONVOLVEMATRIX_TARGETX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECONVOLVEMATRIX_TARGETY
	#define PROCESS_FECONVOLVEMATRIX_TARGETY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECONVOLVEMATRIX_EDGEMODE_DUPLICATE
	#define PROCESS_FECONVOLVEMATRIX_EDGEMODE_DUPLICATE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECONVOLVEMATRIX_EDGEMODE_WRAP
	#define PROCESS_FECONVOLVEMATRIX_EDGEMODE_WRAP LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECONVOLVEMATRIX_EDGEMODE_NONE
	#define PROCESS_FECONVOLVEMATRIX_EDGEMODE_NONE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECONVOLVEMATRIX_KERNELUNITLENGTH
	#define PROCESS_FECONVOLVEMATRIX_KERNELUNITLENGTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECONVOLVEMATRIX_PRESERVEALPHA_FALSE
	#define PROCESS_FECONVOLVEMATRIX_PRESERVEALPHA_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FECONVOLVEMATRIX_PRESERVEALPHA_TRUE
	#define PROCESS_FECONVOLVEMATRIX_PRESERVEALPHA_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDIFFUSELIGHTING_SURFACESCALE
	#define PROCESS_FEDIFFUSELIGHTING_SURFACESCALE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDIFFUSELIGHTING_DIFFUSECONSTANT
	#define PROCESS_FEDIFFUSELIGHTING_DIFFUSECONSTANT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDIFFUSELIGHTING_KERNELUNITLENGTH
	#define PROCESS_FEDIFFUSELIGHTING_KERNELUNITLENGTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDISPLACEMENTMAP_IN2
	#define PROCESS_FEDISPLACEMENTMAP_IN2 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDISPLACEMENTMAP_SCALE
	#define PROCESS_FEDISPLACEMENTMAP_SCALE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDISPLACEMENTMAP_XCHANNELSELECTOR_R
	#define PROCESS_FEDISPLACEMENTMAP_XCHANNELSELECTOR_R LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDISPLACEMENTMAP_XCHANNELSELECTOR_G
	#define PROCESS_FEDISPLACEMENTMAP_XCHANNELSELECTOR_G LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDISPLACEMENTMAP_XCHANNELSELECTOR_B
	#define PROCESS_FEDISPLACEMENTMAP_XCHANNELSELECTOR_B LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDISPLACEMENTMAP_XCHANNELSELECTOR_A
	#define PROCESS_FEDISPLACEMENTMAP_XCHANNELSELECTOR_A LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDISPLACEMENTMAP_YCHANNELSELECTOR_R
	#define PROCESS_FEDISPLACEMENTMAP_YCHANNELSELECTOR_R LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDISPLACEMENTMAP_YCHANNELSELECTOR_G
	#define PROCESS_FEDISPLACEMENTMAP_YCHANNELSELECTOR_G LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDISPLACEMENTMAP_YCHANNELSELECTOR_B
	#define PROCESS_FEDISPLACEMENTMAP_YCHANNELSELECTOR_B LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDISPLACEMENTMAP_YCHANNELSELECTOR_A
	#define PROCESS_FEDISPLACEMENTMAP_YCHANNELSELECTOR_A LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_X
	#define PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_Y
	#define PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_WIDTH
	#define PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_WIDTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_HEIGHT
	#define PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_HEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_RESULT
	#define PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_RESULT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEGAUSSIANBLUR_STDDEVIATION
	#define PROCESS_FEGAUSSIANBLUR_STDDEVIATION LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEIMAGE_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_FEIMAGE_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEIMAGE_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_FEIMAGE_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEIMAGE_PRESERVEASPECTRATIO
	#define PROCESS_FEIMAGE_PRESERVEASPECTRATIO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEMERGENODE_IN
	#define PROCESS_FEMERGENODE_IN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEMORPHOLOGY_OPERATOR_ERODE
	#define PROCESS_FEMORPHOLOGY_OPERATOR_ERODE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEMORPHOLOGY_OPERATOR_DILATE
	#define PROCESS_FEMORPHOLOGY_OPERATOR_DILATE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEMORPHOLOGY_RADIUS
	#define PROCESS_FEMORPHOLOGY_RADIUS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEOFFSET_DX
	#define PROCESS_FEOFFSET_DX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEOFFSET_DY
	#define PROCESS_FEOFFSET_DY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FESPECULARLIGHTING_SURFACESCALE
	#define PROCESS_FESPECULARLIGHTING_SURFACESCALE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FESPECULARLIGHTING_SPECULARCONSTANT
	#define PROCESS_FESPECULARLIGHTING_SPECULARCONSTANT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FESPECULARLIGHTING_SPECULAREXPONENT
	#define PROCESS_FESPECULARLIGHTING_SPECULAREXPONENT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FESPECULARLIGHTING_KERNELUNITLENGTH
	#define PROCESS_FESPECULARLIGHTING_KERNELUNITLENGTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FETURBULENCE_BASEFREQUENCY
	#define PROCESS_FETURBULENCE_BASEFREQUENCY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FETURBULENCE_NUMOCTAVES
	#define PROCESS_FETURBULENCE_NUMOCTAVES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FETURBULENCE_SEED
	#define PROCESS_FETURBULENCE_SEED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FETURBULENCE_STITCHTILES_STITCH
	#define PROCESS_FETURBULENCE_STITCHTILES_STITCH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FETURBULENCE_STITCHTILES_NOSTITCH
	#define PROCESS_FETURBULENCE_STITCHTILES_NOSTITCH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FETURBULENCE_TYPE_FRACTALNOISE
	#define PROCESS_FETURBULENCE_TYPE_FRACTALNOISE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FETURBULENCE_TYPE_TURBULENCE
	#define PROCESS_FETURBULENCE_TYPE_TURBULENCE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDISTANTLIGHT_AZIMUTH
	#define PROCESS_FEDISTANTLIGHT_AZIMUTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEDISTANTLIGHT_ELEVATION
	#define PROCESS_FEDISTANTLIGHT_ELEVATION LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEPOINTLIGHT_X
	#define PROCESS_FEPOINTLIGHT_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEPOINTLIGHT_Y
	#define PROCESS_FEPOINTLIGHT_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEPOINTLIGHT_Z
	#define PROCESS_FEPOINTLIGHT_Z LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FESPOTLIGHT_X
	#define PROCESS_FESPOTLIGHT_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FESPOTLIGHT_Y
	#define PROCESS_FESPOTLIGHT_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FESPOTLIGHT_Z
	#define PROCESS_FESPOTLIGHT_Z LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FESPOTLIGHT_POINTSATX
	#define PROCESS_FESPOTLIGHT_POINTSATX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FESPOTLIGHT_POINTSATY
	#define PROCESS_FESPOTLIGHT_POINTSATY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FESPOTLIGHT_POINTSATZ
	#define PROCESS_FESPOTLIGHT_POINTSATZ LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FESPOTLIGHT_SPECULAREXPONENT
	#define PROCESS_FESPOTLIGHT_SPECULAREXPONENT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FESPOTLIGHT_LIMITINGCONEANGLE
	#define PROCESS_FESPOTLIGHT_LIMITINGCONEANGLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCR_TYPE_IDENTITY
	#define PROCESS_FEFUNCR_TYPE_IDENTITY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCR_TYPE_TABLE
	#define PROCESS_FEFUNCR_TYPE_TABLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCR_TYPE_DISCRETE
	#define PROCESS_FEFUNCR_TYPE_DISCRETE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCR_TYPE_LINEAR
	#define PROCESS_FEFUNCR_TYPE_LINEAR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCR_TYPE_GAMMA
	#define PROCESS_FEFUNCR_TYPE_GAMMA LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCR_TABLEVALUES
	#define PROCESS_FEFUNCR_TABLEVALUES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCR_SLOPE
	#define PROCESS_FEFUNCR_SLOPE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCR_INTERCEPT
	#define PROCESS_FEFUNCR_INTERCEPT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCR_AMPLITUDE
	#define PROCESS_FEFUNCR_AMPLITUDE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCR_EXPONENT
	#define PROCESS_FEFUNCR_EXPONENT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCR_OFFSET
	#define PROCESS_FEFUNCR_OFFSET LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCG_TYPE_IDENTITY
	#define PROCESS_FEFUNCG_TYPE_IDENTITY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCG_TYPE_TABLE
	#define PROCESS_FEFUNCG_TYPE_TABLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCG_TYPE_DISCRETE
	#define PROCESS_FEFUNCG_TYPE_DISCRETE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCG_TYPE_LINEAR
	#define PROCESS_FEFUNCG_TYPE_LINEAR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCG_TYPE_GAMMA
	#define PROCESS_FEFUNCG_TYPE_GAMMA LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCG_TABLEVALUES
	#define PROCESS_FEFUNCG_TABLEVALUES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCG_SLOPE
	#define PROCESS_FEFUNCG_SLOPE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCG_INTERCEPT
	#define PROCESS_FEFUNCG_INTERCEPT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCG_AMPLITUDE
	#define PROCESS_FEFUNCG_AMPLITUDE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCG_EXPONENT
	#define PROCESS_FEFUNCG_EXPONENT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCG_OFFSET
	#define PROCESS_FEFUNCG_OFFSET LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCB_TYPE_IDENTITY
	#define PROCESS_FEFUNCB_TYPE_IDENTITY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCB_TYPE_TABLE
	#define PROCESS_FEFUNCB_TYPE_TABLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCB_TYPE_DISCRETE
	#define PROCESS_FEFUNCB_TYPE_DISCRETE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCB_TYPE_LINEAR
	#define PROCESS_FEFUNCB_TYPE_LINEAR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCB_TYPE_GAMMA
	#define PROCESS_FEFUNCB_TYPE_GAMMA LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCB_TABLEVALUES
	#define PROCESS_FEFUNCB_TABLEVALUES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCB_SLOPE
	#define PROCESS_FEFUNCB_SLOPE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCB_INTERCEPT
	#define PROCESS_FEFUNCB_INTERCEPT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCB_AMPLITUDE
	#define PROCESS_FEFUNCB_AMPLITUDE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCB_EXPONENT
	#define PROCESS_FEFUNCB_EXPONENT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCB_OFFSET
	#define PROCESS_FEFUNCB_OFFSET LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCA_TYPE_IDENTITY
	#define PROCESS_FEFUNCA_TYPE_IDENTITY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCA_TYPE_TABLE
	#define PROCESS_FEFUNCA_TYPE_TABLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCA_TYPE_DISCRETE
	#define PROCESS_FEFUNCA_TYPE_DISCRETE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCA_TYPE_LINEAR
	#define PROCESS_FEFUNCA_TYPE_LINEAR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCA_TYPE_GAMMA
	#define PROCESS_FEFUNCA_TYPE_GAMMA LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCA_TABLEVALUES
	#define PROCESS_FEFUNCA_TABLEVALUES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCA_SLOPE
	#define PROCESS_FEFUNCA_SLOPE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCA_INTERCEPT
	#define PROCESS_FEFUNCA_INTERCEPT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCA_AMPLITUDE
	#define PROCESS_FEFUNCA_AMPLITUDE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCA_EXPONENT
	#define PROCESS_FEFUNCA_EXPONENT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FEFUNCA_OFFSET
	#define PROCESS_FEFUNCA_OFFSET LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CURSOR_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_CURSOR_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CURSOR_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_CURSOR_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CURSOR_X
	#define PROCESS_CURSOR_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_CURSOR_Y
	#define PROCESS_CURSOR_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREPLACE_ATTRIB_XMLNS_XLINK
	#define PROCESS_SVG_XLINKREPLACE_ATTRIB_XMLNS_XLINK LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_TYPE_SIMPLE
	#define PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_TYPE_SIMPLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_HREF
	#define PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_HREF LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_ROLE
	#define PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_ROLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_ARCROLE
	#define PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_ARCROLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_TITLE
	#define PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_TITLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_SHOW_NEW
	#define PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_SHOW_NEW LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_SHOW_REPLACE
	#define PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_SHOW_REPLACE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_ACTUATE_ONREQUEST
	#define PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_ACTUATE_ONREQUEST LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_A_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_A_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_A_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_A_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_A_TRANSFORM
	#define PROCESS_A_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_A_TARGET
	#define PROCESS_A_TARGET LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_VIEW_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_VIEW_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_VIEW_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_VIEW_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_VIEW_VIEWBOX
	#define PROCESS_VIEW_VIEWBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_VIEW_PRESERVEASPECTRATIO
	#define PROCESS_VIEW_PRESERVEASPECTRATIO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_VIEW_ZOOMANDPAN_DISABLE
	#define PROCESS_VIEW_ZOOMANDPAN_DISABLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_VIEW_ZOOMANDPAN_MAGNIFY
	#define PROCESS_VIEW_ZOOMANDPAN_MAGNIFY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_VIEW_VIEWTARGET
	#define PROCESS_VIEW_VIEWTARGET LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SCRIPT_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_SCRIPT_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SCRIPT_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_SCRIPT_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SCRIPT_TYPE
	#define PROCESS_SCRIPT_TYPE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONBEGIN
	#define PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONBEGIN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONEND
	#define PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONEND LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONREPEAT
	#define PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONREPEAT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONLOAD
	#define PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONLOAD LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATE_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_ANIMATE_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATE_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_ANIMATE_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATION_ATTRIB_XMLNS_XLINK
	#define PROCESS_SVG_ANIMATION_ATTRIB_XMLNS_XLINK LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TYPE_SIMPLE
	#define PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TYPE_SIMPLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATION_ATTRIB_XLINK_HREF
	#define PROCESS_SVG_ANIMATION_ATTRIB_XLINK_HREF LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ROLE
	#define PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ROLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ARCROLE
	#define PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ARCROLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TITLE
	#define PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TITLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATION_ATTRIB_XLINK_SHOW_OTHER
	#define PROCESS_SVG_ANIMATION_ATTRIB_XLINK_SHOW_OTHER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ACTUATE_ONLOAD
	#define PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ACTUATE_ONLOAD LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB_ATTRIBUTENAME
	#define PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB_ATTRIBUTENAME LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB_ATTRIBUTETYPE
	#define PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB_ATTRIBUTETYPE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONTIMING_ATTRIB_BEGIN
	#define PROCESS_SVG_ANIMATIONTIMING_ATTRIB_BEGIN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONTIMING_ATTRIB_DUR
	#define PROCESS_SVG_ANIMATIONTIMING_ATTRIB_DUR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONTIMING_ATTRIB_END
	#define PROCESS_SVG_ANIMATIONTIMING_ATTRIB_END LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MIN
	#define PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MIN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MAX
	#define PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MAX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_ALWAYS
	#define PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_ALWAYS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_NEVER
	#define PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_NEVER LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_WHENNOTACTIVE
	#define PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_WHENNOTACTIVE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATCOUNT
	#define PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATCOUNT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATDUR
	#define PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATDUR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_REMOVE
	#define PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_REMOVE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_FREEZE
	#define PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_FREEZE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_DISCRETE
	#define PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_DISCRETE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_LINEAR
	#define PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_LINEAR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_PACED
	#define PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_PACED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_SPLINE
	#define PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_SPLINE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONVALUE_ATTRIB_VALUES
	#define PROCESS_SVG_ANIMATIONVALUE_ATTRIB_VALUES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONVALUE_ATTRIB_KEYTIMES
	#define PROCESS_SVG_ANIMATIONVALUE_ATTRIB_KEYTIMES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONVALUE_ATTRIB_KEYSPLINES
	#define PROCESS_SVG_ANIMATIONVALUE_ATTRIB_KEYSPLINES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONVALUE_ATTRIB_FROM
	#define PROCESS_SVG_ANIMATIONVALUE_ATTRIB_FROM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONVALUE_ATTRIB_TO
	#define PROCESS_SVG_ANIMATIONVALUE_ATTRIB_TO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONVALUE_ATTRIB_BY
	#define PROCESS_SVG_ANIMATIONVALUE_ATTRIB_BY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ADDITIVE_REPLACE
	#define PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ADDITIVE_REPLACE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ADDITIVE_SUM
	#define PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ADDITIVE_SUM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ACCUMULATE_NONE
	#define PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ACCUMULATE_NONE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ACCUMULATE_SUM
	#define PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ACCUMULATE_SUM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SET_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_SET_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SET_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_SET_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_SET_TO
	#define PROCESS_SET_TO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_ANIMATEMOTION_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_ANIMATEMOTION_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_CALCMODE_DISCRETE
	#define PROCESS_ANIMATEMOTION_CALCMODE_DISCRETE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_CALCMODE_LINEAR
	#define PROCESS_ANIMATEMOTION_CALCMODE_LINEAR LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_CALCMODE_PACED
	#define PROCESS_ANIMATEMOTION_CALCMODE_PACED LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_CALCMODE_SPLINE
	#define PROCESS_ANIMATEMOTION_CALCMODE_SPLINE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_VALUES
	#define PROCESS_ANIMATEMOTION_VALUES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_KEYTIMES
	#define PROCESS_ANIMATEMOTION_KEYTIMES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_KEYSPLINES
	#define PROCESS_ANIMATEMOTION_KEYSPLINES LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_FROM
	#define PROCESS_ANIMATEMOTION_FROM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_TO
	#define PROCESS_ANIMATEMOTION_TO LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_BY
	#define PROCESS_ANIMATEMOTION_BY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_PATH
	#define PROCESS_ANIMATEMOTION_PATH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_KEYPOINTS
	#define PROCESS_ANIMATEMOTION_KEYPOINTS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_ROTATE
	#define PROCESS_ANIMATEMOTION_ROTATE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATEMOTION_ORIGIN
	#define PROCESS_ANIMATEMOTION_ORIGIN LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATECOLOR_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_ANIMATECOLOR_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATECOLOR_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_ANIMATECOLOR_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATETRANSFORM_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_ANIMATETRANSFORM_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATETRANSFORM_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_ANIMATETRANSFORM_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATETRANSFORM_TYPE_TRANSLATE
	#define PROCESS_ANIMATETRANSFORM_TYPE_TRANSLATE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATETRANSFORM_TYPE_SCALE
	#define PROCESS_ANIMATETRANSFORM_TYPE_SCALE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATETRANSFORM_TYPE_ROTATE
	#define PROCESS_ANIMATETRANSFORM_TYPE_ROTATE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATETRANSFORM_TYPE_SKEWX
	#define PROCESS_ANIMATETRANSFORM_TYPE_SKEWX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_ANIMATETRANSFORM_TYPE_SKEWY
	#define PROCESS_ANIMATETRANSFORM_TYPE_SKEWY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MPATH_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_MPATH_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MPATH_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_MPATH_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_FONT_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_FONT_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_HORIZ_ORIGIN_X
	#define PROCESS_FONT_HORIZ_ORIGIN_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_HORIZ_ORIGIN_Y
	#define PROCESS_FONT_HORIZ_ORIGIN_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_HORIZ_ADV_X
	#define PROCESS_FONT_HORIZ_ADV_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_VERT_ORIGIN_X
	#define PROCESS_FONT_VERT_ORIGIN_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_VERT_ORIGIN_Y
	#define PROCESS_FONT_VERT_ORIGIN_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_VERT_ADV_Y
	#define PROCESS_FONT_VERT_ADV_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_FONT_FAMILY
	#define PROCESS_FONT_FACE_FONT_FAMILY LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_FONT_STYLE
	#define PROCESS_FONT_FACE_FONT_STYLE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_FONT_VARIANT
	#define PROCESS_FONT_FACE_FONT_VARIANT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_FONT_WEIGHT
	#define PROCESS_FONT_FACE_FONT_WEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_FONT_STRETCH
	#define PROCESS_FONT_FACE_FONT_STRETCH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_FONT_SIZE
	#define PROCESS_FONT_FACE_FONT_SIZE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_UNICODE_RANGE
	#define PROCESS_FONT_FACE_UNICODE_RANGE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_UNITS_PER_EM
	#define PROCESS_FONT_FACE_UNITS_PER_EM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_PANOSE_1
	#define PROCESS_FONT_FACE_PANOSE_1 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_STEMV
	#define PROCESS_FONT_FACE_STEMV LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_STEMH
	#define PROCESS_FONT_FACE_STEMH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_SLOPE
	#define PROCESS_FONT_FACE_SLOPE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_CAP_HEIGHT
	#define PROCESS_FONT_FACE_CAP_HEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_X_HEIGHT
	#define PROCESS_FONT_FACE_X_HEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_ACCENT_HEIGHT
	#define PROCESS_FONT_FACE_ACCENT_HEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_ASCENT
	#define PROCESS_FONT_FACE_ASCENT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_DESCENT
	#define PROCESS_FONT_FACE_DESCENT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_WIDTHS
	#define PROCESS_FONT_FACE_WIDTHS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_BBOX
	#define PROCESS_FONT_FACE_BBOX LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_IDEOGRAPHIC
	#define PROCESS_FONT_FACE_IDEOGRAPHIC LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_ALPHABETIC
	#define PROCESS_FONT_FACE_ALPHABETIC LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_MATHEMATICAL
	#define PROCESS_FONT_FACE_MATHEMATICAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_HANGING
	#define PROCESS_FONT_FACE_HANGING LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_V_IDEOGRAPHIC
	#define PROCESS_FONT_FACE_V_IDEOGRAPHIC LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_V_ALPHABETIC
	#define PROCESS_FONT_FACE_V_ALPHABETIC LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_V_MATHEMATICAL
	#define PROCESS_FONT_FACE_V_MATHEMATICAL LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_V_HANGING
	#define PROCESS_FONT_FACE_V_HANGING LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_UNDERLINE_POSITION
	#define PROCESS_FONT_FACE_UNDERLINE_POSITION LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_UNDERLINE_THICKNESS
	#define PROCESS_FONT_FACE_UNDERLINE_THICKNESS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_STRIKETHROUGH_POSITION
	#define PROCESS_FONT_FACE_STRIKETHROUGH_POSITION LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_STRIKETHROUGH_THICKNESS
	#define PROCESS_FONT_FACE_STRIKETHROUGH_THICKNESS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_OVERLINE_POSITION
	#define PROCESS_FONT_FACE_OVERLINE_POSITION LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_OVERLINE_THICKNESS
	#define PROCESS_FONT_FACE_OVERLINE_THICKNESS LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPH_UNICODE
	#define PROCESS_GLYPH_UNICODE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPH_GLYPH_NAME
	#define PROCESS_GLYPH_GLYPH_NAME LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPH_D
	#define PROCESS_GLYPH_D LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPH_ORIENTATION
	#define PROCESS_GLYPH_ORIENTATION LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPH_ARABIC_FORM
	#define PROCESS_GLYPH_ARABIC_FORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPH_LANG
	#define PROCESS_GLYPH_LANG LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPH_HORIZ_ADV_X
	#define PROCESS_GLYPH_HORIZ_ADV_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPH_VERT_ORIGIN_X
	#define PROCESS_GLYPH_VERT_ORIGIN_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPH_VERT_ORIGIN_Y
	#define PROCESS_GLYPH_VERT_ORIGIN_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_GLYPH_VERT_ADV_Y
	#define PROCESS_GLYPH_VERT_ADV_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MISSING_GLYPH_D
	#define PROCESS_MISSING_GLYPH_D LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MISSING_GLYPH_HORIZ_ADV_X
	#define PROCESS_MISSING_GLYPH_HORIZ_ADV_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MISSING_GLYPH_VERT_ORIGIN_X
	#define PROCESS_MISSING_GLYPH_VERT_ORIGIN_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MISSING_GLYPH_VERT_ORIGIN_Y
	#define PROCESS_MISSING_GLYPH_VERT_ORIGIN_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_MISSING_GLYPH_VERT_ADV_Y
	#define PROCESS_MISSING_GLYPH_VERT_ADV_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_HKERN_U1
	#define PROCESS_HKERN_U1 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_HKERN_G1
	#define PROCESS_HKERN_G1 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_HKERN_U2
	#define PROCESS_HKERN_U2 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_HKERN_G2
	#define PROCESS_HKERN_G2 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_HKERN_K
	#define PROCESS_HKERN_K LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_VKERN_U1
	#define PROCESS_VKERN_U1 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_VKERN_G1
	#define PROCESS_VKERN_G1 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_VKERN_U2
	#define PROCESS_VKERN_U2 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_VKERN_G2
	#define PROCESS_VKERN_G2 LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_VKERN_K
	#define PROCESS_VKERN_K LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_FORMAT_STRING
	#define PROCESS_FONT_FACE_FORMAT_STRING LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FONT_FACE_NAME_NAME
	#define PROCESS_FONT_FACE_NAME_NAME LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FOREIGNOBJECT_EXTERNALRESOURCESREQUIRED_FALSE
	#define PROCESS_FOREIGNOBJECT_EXTERNALRESOURCESREQUIRED_FALSE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FOREIGNOBJECT_EXTERNALRESOURCESREQUIRED_TRUE
	#define PROCESS_FOREIGNOBJECT_EXTERNALRESOURCESREQUIRED_TRUE LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FOREIGNOBJECT_X
	#define PROCESS_FOREIGNOBJECT_X LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FOREIGNOBJECT_Y
	#define PROCESS_FOREIGNOBJECT_Y LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FOREIGNOBJECT_WIDTH
	#define PROCESS_FOREIGNOBJECT_WIDTH LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FOREIGNOBJECT_HEIGHT
	#define PROCESS_FOREIGNOBJECT_HEIGHT LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef PROCESS_FOREIGNOBJECT_TRANSFORM
	#define PROCESS_FOREIGNOBJECT_TRANSFORM LOG("Unprocessed attribute: %s->%s\n", svg->elt, svg->att);
#endif
#ifndef HEADING_SVG
	#define HEADING_SVG
#endif
#ifndef ELEMENT_PRE_PROCESS_SVG
	#define ELEMENT_PRE_PROCESS_SVG
#endif
#ifndef ELEMENT_POST_PROCESS_SVG
	#define ELEMENT_POST_PROCESS_SVG
#endif
#ifndef HEADING_G
	#define HEADING_G
#endif
#ifndef ELEMENT_PRE_PROCESS_G
	#define ELEMENT_PRE_PROCESS_G
#endif
#ifndef ELEMENT_POST_PROCESS_G
	#define ELEMENT_POST_PROCESS_G
#endif
#ifndef HEADING_DEFS
	#define HEADING_DEFS
#endif
#ifndef ELEMENT_PRE_PROCESS_DEFS
	#define ELEMENT_PRE_PROCESS_DEFS
#endif
#ifndef ELEMENT_POST_PROCESS_DEFS
	#define ELEMENT_POST_PROCESS_DEFS
#endif
#ifndef HEADING_DESC
	#define HEADING_DESC
#endif
#ifndef ELEMENT_PRE_PROCESS_DESC
	#define ELEMENT_PRE_PROCESS_DESC
#endif
#ifndef ELEMENT_POST_PROCESS_DESC
	#define ELEMENT_POST_PROCESS_DESC
#endif
#ifndef HEADING_TITLE
	#define HEADING_TITLE
#endif
#ifndef ELEMENT_PRE_PROCESS_TITLE
	#define ELEMENT_PRE_PROCESS_TITLE
#endif
#ifndef ELEMENT_POST_PROCESS_TITLE
	#define ELEMENT_POST_PROCESS_TITLE
#endif
#ifndef HEADING_METADATA
	#define HEADING_METADATA
#endif
#ifndef ELEMENT_PRE_PROCESS_METADATA
	#define ELEMENT_PRE_PROCESS_METADATA
#endif
#ifndef ELEMENT_POST_PROCESS_METADATA
	#define ELEMENT_POST_PROCESS_METADATA
#endif
#ifndef HEADING_SYMBOL
	#define HEADING_SYMBOL
#endif
#ifndef ELEMENT_PRE_PROCESS_SYMBOL
	#define ELEMENT_PRE_PROCESS_SYMBOL
#endif
#ifndef ELEMENT_POST_PROCESS_SYMBOL
	#define ELEMENT_POST_PROCESS_SYMBOL
#endif
#ifndef HEADING_USE
	#define HEADING_USE
#endif
#ifndef ELEMENT_PRE_PROCESS_USE
	#define ELEMENT_PRE_PROCESS_USE
#endif
#ifndef ELEMENT_POST_PROCESS_USE
	#define ELEMENT_POST_PROCESS_USE
#endif
#ifndef HEADING_SWITCH
	#define HEADING_SWITCH
#endif
#ifndef ELEMENT_PRE_PROCESS_SWITCH
	#define ELEMENT_PRE_PROCESS_SWITCH
#endif
#ifndef ELEMENT_POST_PROCESS_SWITCH
	#define ELEMENT_POST_PROCESS_SWITCH
#endif
#ifndef HEADING_IMAGE
	#define HEADING_IMAGE
#endif
#ifndef ELEMENT_PRE_PROCESS_IMAGE
	#define ELEMENT_PRE_PROCESS_IMAGE
#endif
#ifndef ELEMENT_POST_PROCESS_IMAGE
	#define ELEMENT_POST_PROCESS_IMAGE
#endif
#ifndef HEADING_STYLE
	#define HEADING_STYLE
#endif
#ifndef ELEMENT_PRE_PROCESS_STYLE
	#define ELEMENT_PRE_PROCESS_STYLE
#endif
#ifndef ELEMENT_POST_PROCESS_STYLE
	#define ELEMENT_POST_PROCESS_STYLE
#endif
#ifndef HEADING_PATH
	#define HEADING_PATH
#endif
#ifndef ELEMENT_PRE_PROCESS_PATH
	#define ELEMENT_PRE_PROCESS_PATH
#endif
#ifndef ELEMENT_POST_PROCESS_PATH
	#define ELEMENT_POST_PROCESS_PATH
#endif
#ifndef HEADING_RECT
	#define HEADING_RECT
#endif
#ifndef ELEMENT_PRE_PROCESS_RECT
	#define ELEMENT_PRE_PROCESS_RECT
#endif
#ifndef ELEMENT_POST_PROCESS_RECT
	#define ELEMENT_POST_PROCESS_RECT
#endif
#ifndef HEADING_CIRCLE
	#define HEADING_CIRCLE
#endif
#ifndef ELEMENT_PRE_PROCESS_CIRCLE
	#define ELEMENT_PRE_PROCESS_CIRCLE
#endif
#ifndef ELEMENT_POST_PROCESS_CIRCLE
	#define ELEMENT_POST_PROCESS_CIRCLE
#endif
#ifndef HEADING_LINE
	#define HEADING_LINE
#endif
#ifndef ELEMENT_PRE_PROCESS_LINE
	#define ELEMENT_PRE_PROCESS_LINE
#endif
#ifndef ELEMENT_POST_PROCESS_LINE
	#define ELEMENT_POST_PROCESS_LINE
#endif
#ifndef HEADING_ELLIPSE
	#define HEADING_ELLIPSE
#endif
#ifndef ELEMENT_PRE_PROCESS_ELLIPSE
	#define ELEMENT_PRE_PROCESS_ELLIPSE
#endif
#ifndef ELEMENT_POST_PROCESS_ELLIPSE
	#define ELEMENT_POST_PROCESS_ELLIPSE
#endif
#ifndef HEADING_POLYLINE
	#define HEADING_POLYLINE
#endif
#ifndef ELEMENT_PRE_PROCESS_POLYLINE
	#define ELEMENT_PRE_PROCESS_POLYLINE
#endif
#ifndef ELEMENT_POST_PROCESS_POLYLINE
	#define ELEMENT_POST_PROCESS_POLYLINE
#endif
#ifndef HEADING_POLYGON
	#define HEADING_POLYGON
#endif
#ifndef ELEMENT_PRE_PROCESS_POLYGON
	#define ELEMENT_PRE_PROCESS_POLYGON
#endif
#ifndef ELEMENT_POST_PROCESS_POLYGON
	#define ELEMENT_POST_PROCESS_POLYGON
#endif
#ifndef HEADING_TEXT
	#define HEADING_TEXT
#endif
#ifndef ELEMENT_PRE_PROCESS_TEXT
	#define ELEMENT_PRE_PROCESS_TEXT
#endif
#ifndef ELEMENT_POST_PROCESS_TEXT
	#define ELEMENT_POST_PROCESS_TEXT
#endif
#ifndef HEADING_TSPAN
	#define HEADING_TSPAN
#endif
#ifndef ELEMENT_PRE_PROCESS_TSPAN
	#define ELEMENT_PRE_PROCESS_TSPAN
#endif
#ifndef ELEMENT_POST_PROCESS_TSPAN
	#define ELEMENT_POST_PROCESS_TSPAN
#endif
#ifndef HEADING_TREF
	#define HEADING_TREF
#endif
#ifndef ELEMENT_PRE_PROCESS_TREF
	#define ELEMENT_PRE_PROCESS_TREF
#endif
#ifndef ELEMENT_POST_PROCESS_TREF
	#define ELEMENT_POST_PROCESS_TREF
#endif
#ifndef HEADING_TEXTPATH
	#define HEADING_TEXTPATH
#endif
#ifndef ELEMENT_PRE_PROCESS_TEXTPATH
	#define ELEMENT_PRE_PROCESS_TEXTPATH
#endif
#ifndef ELEMENT_POST_PROCESS_TEXTPATH
	#define ELEMENT_POST_PROCESS_TEXTPATH
#endif
#ifndef HEADING_ALTGLYPH
	#define HEADING_ALTGLYPH
#endif
#ifndef ELEMENT_PRE_PROCESS_ALTGLYPH
	#define ELEMENT_PRE_PROCESS_ALTGLYPH
#endif
#ifndef ELEMENT_POST_PROCESS_ALTGLYPH
	#define ELEMENT_POST_PROCESS_ALTGLYPH
#endif
#ifndef HEADING_ALTGLYPHDEF
	#define HEADING_ALTGLYPHDEF
#endif
#ifndef ELEMENT_PRE_PROCESS_ALTGLYPHDEF
	#define ELEMENT_PRE_PROCESS_ALTGLYPHDEF
#endif
#ifndef ELEMENT_POST_PROCESS_ALTGLYPHDEF
	#define ELEMENT_POST_PROCESS_ALTGLYPHDEF
#endif
#ifndef HEADING_ALTGLYPHITEM
	#define HEADING_ALTGLYPHITEM
#endif
#ifndef ELEMENT_PRE_PROCESS_ALTGLYPHITEM
	#define ELEMENT_PRE_PROCESS_ALTGLYPHITEM
#endif
#ifndef ELEMENT_POST_PROCESS_ALTGLYPHITEM
	#define ELEMENT_POST_PROCESS_ALTGLYPHITEM
#endif
#ifndef HEADING_GLYPHREF
	#define HEADING_GLYPHREF
#endif
#ifndef ELEMENT_PRE_PROCESS_GLYPHREF
	#define ELEMENT_PRE_PROCESS_GLYPHREF
#endif
#ifndef ELEMENT_POST_PROCESS_GLYPHREF
	#define ELEMENT_POST_PROCESS_GLYPHREF
#endif
#ifndef HEADING_MARKER
	#define HEADING_MARKER
#endif
#ifndef ELEMENT_PRE_PROCESS_MARKER
	#define ELEMENT_PRE_PROCESS_MARKER
#endif
#ifndef ELEMENT_POST_PROCESS_MARKER
	#define ELEMENT_POST_PROCESS_MARKER
#endif
#ifndef HEADING_COLOR_PROFILE
	#define HEADING_COLOR_PROFILE
#endif
#ifndef ELEMENT_PRE_PROCESS_COLOR_PROFILE
	#define ELEMENT_PRE_PROCESS_COLOR_PROFILE
#endif
#ifndef ELEMENT_POST_PROCESS_COLOR_PROFILE
	#define ELEMENT_POST_PROCESS_COLOR_PROFILE
#endif
#ifndef HEADING_LINEARGRADIENT
	#define HEADING_LINEARGRADIENT
#endif
#ifndef ELEMENT_PRE_PROCESS_LINEARGRADIENT
	#define ELEMENT_PRE_PROCESS_LINEARGRADIENT
#endif
#ifndef ELEMENT_POST_PROCESS_LINEARGRADIENT
	#define ELEMENT_POST_PROCESS_LINEARGRADIENT
#endif
#ifndef HEADING_RADIALGRADIENT
	#define HEADING_RADIALGRADIENT
#endif
#ifndef ELEMENT_PRE_PROCESS_RADIALGRADIENT
	#define ELEMENT_PRE_PROCESS_RADIALGRADIENT
#endif
#ifndef ELEMENT_POST_PROCESS_RADIALGRADIENT
	#define ELEMENT_POST_PROCESS_RADIALGRADIENT
#endif
#ifndef HEADING_STOP
	#define HEADING_STOP
#endif
#ifndef ELEMENT_PRE_PROCESS_STOP
	#define ELEMENT_PRE_PROCESS_STOP
#endif
#ifndef ELEMENT_POST_PROCESS_STOP
	#define ELEMENT_POST_PROCESS_STOP
#endif
#ifndef HEADING_PATTERN
	#define HEADING_PATTERN
#endif
#ifndef ELEMENT_PRE_PROCESS_PATTERN
	#define ELEMENT_PRE_PROCESS_PATTERN
#endif
#ifndef ELEMENT_POST_PROCESS_PATTERN
	#define ELEMENT_POST_PROCESS_PATTERN
#endif
#ifndef HEADING_CLIPPATH
	#define HEADING_CLIPPATH
#endif
#ifndef ELEMENT_PRE_PROCESS_CLIPPATH
	#define ELEMENT_PRE_PROCESS_CLIPPATH
#endif
#ifndef ELEMENT_POST_PROCESS_CLIPPATH
	#define ELEMENT_POST_PROCESS_CLIPPATH
#endif
#ifndef HEADING_MASK
	#define HEADING_MASK
#endif
#ifndef ELEMENT_PRE_PROCESS_MASK
	#define ELEMENT_PRE_PROCESS_MASK
#endif
#ifndef ELEMENT_POST_PROCESS_MASK
	#define ELEMENT_POST_PROCESS_MASK
#endif
#ifndef HEADING_FILTER
	#define HEADING_FILTER
#endif
#ifndef ELEMENT_PRE_PROCESS_FILTER
	#define ELEMENT_PRE_PROCESS_FILTER
#endif
#ifndef ELEMENT_POST_PROCESS_FILTER
	#define ELEMENT_POST_PROCESS_FILTER
#endif
#ifndef HEADING_FEBLEND
	#define HEADING_FEBLEND
#endif
#ifndef ELEMENT_PRE_PROCESS_FEBLEND
	#define ELEMENT_PRE_PROCESS_FEBLEND
#endif
#ifndef ELEMENT_POST_PROCESS_FEBLEND
	#define ELEMENT_POST_PROCESS_FEBLEND
#endif
#ifndef HEADING_FECOLORMATRIX
	#define HEADING_FECOLORMATRIX
#endif
#ifndef ELEMENT_PRE_PROCESS_FECOLORMATRIX
	#define ELEMENT_PRE_PROCESS_FECOLORMATRIX
#endif
#ifndef ELEMENT_POST_PROCESS_FECOLORMATRIX
	#define ELEMENT_POST_PROCESS_FECOLORMATRIX
#endif
#ifndef HEADING_FECOMPONENTTRANSFER
	#define HEADING_FECOMPONENTTRANSFER
#endif
#ifndef ELEMENT_PRE_PROCESS_FECOMPONENTTRANSFER
	#define ELEMENT_PRE_PROCESS_FECOMPONENTTRANSFER
#endif
#ifndef ELEMENT_POST_PROCESS_FECOMPONENTTRANSFER
	#define ELEMENT_POST_PROCESS_FECOMPONENTTRANSFER
#endif
#ifndef HEADING_FECOMPOSITE
	#define HEADING_FECOMPOSITE
#endif
#ifndef ELEMENT_PRE_PROCESS_FECOMPOSITE
	#define ELEMENT_PRE_PROCESS_FECOMPOSITE
#endif
#ifndef ELEMENT_POST_PROCESS_FECOMPOSITE
	#define ELEMENT_POST_PROCESS_FECOMPOSITE
#endif
#ifndef HEADING_FECONVOLVEMATRIX
	#define HEADING_FECONVOLVEMATRIX
#endif
#ifndef ELEMENT_PRE_PROCESS_FECONVOLVEMATRIX
	#define ELEMENT_PRE_PROCESS_FECONVOLVEMATRIX
#endif
#ifndef ELEMENT_POST_PROCESS_FECONVOLVEMATRIX
	#define ELEMENT_POST_PROCESS_FECONVOLVEMATRIX
#endif
#ifndef HEADING_FEDIFFUSELIGHTING
	#define HEADING_FEDIFFUSELIGHTING
#endif
#ifndef ELEMENT_PRE_PROCESS_FEDIFFUSELIGHTING
	#define ELEMENT_PRE_PROCESS_FEDIFFUSELIGHTING
#endif
#ifndef ELEMENT_POST_PROCESS_FEDIFFUSELIGHTING
	#define ELEMENT_POST_PROCESS_FEDIFFUSELIGHTING
#endif
#ifndef HEADING_FEDISPLACEMENTMAP
	#define HEADING_FEDISPLACEMENTMAP
#endif
#ifndef ELEMENT_PRE_PROCESS_FEDISPLACEMENTMAP
	#define ELEMENT_PRE_PROCESS_FEDISPLACEMENTMAP
#endif
#ifndef ELEMENT_POST_PROCESS_FEDISPLACEMENTMAP
	#define ELEMENT_POST_PROCESS_FEDISPLACEMENTMAP
#endif
#ifndef HEADING_FEFLOOD
	#define HEADING_FEFLOOD
#endif
#ifndef ELEMENT_PRE_PROCESS_FEFLOOD
	#define ELEMENT_PRE_PROCESS_FEFLOOD
#endif
#ifndef ELEMENT_POST_PROCESS_FEFLOOD
	#define ELEMENT_POST_PROCESS_FEFLOOD
#endif
#ifndef HEADING_FEGAUSSIANBLUR
	#define HEADING_FEGAUSSIANBLUR
#endif
#ifndef ELEMENT_PRE_PROCESS_FEGAUSSIANBLUR
	#define ELEMENT_PRE_PROCESS_FEGAUSSIANBLUR
#endif
#ifndef ELEMENT_POST_PROCESS_FEGAUSSIANBLUR
	#define ELEMENT_POST_PROCESS_FEGAUSSIANBLUR
#endif
#ifndef HEADING_FEIMAGE
	#define HEADING_FEIMAGE
#endif
#ifndef ELEMENT_PRE_PROCESS_FEIMAGE
	#define ELEMENT_PRE_PROCESS_FEIMAGE
#endif
#ifndef ELEMENT_POST_PROCESS_FEIMAGE
	#define ELEMENT_POST_PROCESS_FEIMAGE
#endif
#ifndef HEADING_FEMERGE
	#define HEADING_FEMERGE
#endif
#ifndef ELEMENT_PRE_PROCESS_FEMERGE
	#define ELEMENT_PRE_PROCESS_FEMERGE
#endif
#ifndef ELEMENT_POST_PROCESS_FEMERGE
	#define ELEMENT_POST_PROCESS_FEMERGE
#endif
#ifndef HEADING_FEMERGENODE
	#define HEADING_FEMERGENODE
#endif
#ifndef ELEMENT_PRE_PROCESS_FEMERGENODE
	#define ELEMENT_PRE_PROCESS_FEMERGENODE
#endif
#ifndef ELEMENT_POST_PROCESS_FEMERGENODE
	#define ELEMENT_POST_PROCESS_FEMERGENODE
#endif
#ifndef HEADING_FEMORPHOLOGY
	#define HEADING_FEMORPHOLOGY
#endif
#ifndef ELEMENT_PRE_PROCESS_FEMORPHOLOGY
	#define ELEMENT_PRE_PROCESS_FEMORPHOLOGY
#endif
#ifndef ELEMENT_POST_PROCESS_FEMORPHOLOGY
	#define ELEMENT_POST_PROCESS_FEMORPHOLOGY
#endif
#ifndef HEADING_FEOFFSET
	#define HEADING_FEOFFSET
#endif
#ifndef ELEMENT_PRE_PROCESS_FEOFFSET
	#define ELEMENT_PRE_PROCESS_FEOFFSET
#endif
#ifndef ELEMENT_POST_PROCESS_FEOFFSET
	#define ELEMENT_POST_PROCESS_FEOFFSET
#endif
#ifndef HEADING_FESPECULARLIGHTING
	#define HEADING_FESPECULARLIGHTING
#endif
#ifndef ELEMENT_PRE_PROCESS_FESPECULARLIGHTING
	#define ELEMENT_PRE_PROCESS_FESPECULARLIGHTING
#endif
#ifndef ELEMENT_POST_PROCESS_FESPECULARLIGHTING
	#define ELEMENT_POST_PROCESS_FESPECULARLIGHTING
#endif
#ifndef HEADING_FETILE
	#define HEADING_FETILE
#endif
#ifndef ELEMENT_PRE_PROCESS_FETILE
	#define ELEMENT_PRE_PROCESS_FETILE
#endif
#ifndef ELEMENT_POST_PROCESS_FETILE
	#define ELEMENT_POST_PROCESS_FETILE
#endif
#ifndef HEADING_FETURBULENCE
	#define HEADING_FETURBULENCE
#endif
#ifndef ELEMENT_PRE_PROCESS_FETURBULENCE
	#define ELEMENT_PRE_PROCESS_FETURBULENCE
#endif
#ifndef ELEMENT_POST_PROCESS_FETURBULENCE
	#define ELEMENT_POST_PROCESS_FETURBULENCE
#endif
#ifndef HEADING_FEDISTANTLIGHT
	#define HEADING_FEDISTANTLIGHT
#endif
#ifndef ELEMENT_PRE_PROCESS_FEDISTANTLIGHT
	#define ELEMENT_PRE_PROCESS_FEDISTANTLIGHT
#endif
#ifndef ELEMENT_POST_PROCESS_FEDISTANTLIGHT
	#define ELEMENT_POST_PROCESS_FEDISTANTLIGHT
#endif
#ifndef HEADING_FEPOINTLIGHT
	#define HEADING_FEPOINTLIGHT
#endif
#ifndef ELEMENT_PRE_PROCESS_FEPOINTLIGHT
	#define ELEMENT_PRE_PROCESS_FEPOINTLIGHT
#endif
#ifndef ELEMENT_POST_PROCESS_FEPOINTLIGHT
	#define ELEMENT_POST_PROCESS_FEPOINTLIGHT
#endif
#ifndef HEADING_FESPOTLIGHT
	#define HEADING_FESPOTLIGHT
#endif
#ifndef ELEMENT_PRE_PROCESS_FESPOTLIGHT
	#define ELEMENT_PRE_PROCESS_FESPOTLIGHT
#endif
#ifndef ELEMENT_POST_PROCESS_FESPOTLIGHT
	#define ELEMENT_POST_PROCESS_FESPOTLIGHT
#endif
#ifndef HEADING_FEFUNCR
	#define HEADING_FEFUNCR
#endif
#ifndef ELEMENT_PRE_PROCESS_FEFUNCR
	#define ELEMENT_PRE_PROCESS_FEFUNCR
#endif
#ifndef ELEMENT_POST_PROCESS_FEFUNCR
	#define ELEMENT_POST_PROCESS_FEFUNCR
#endif
#ifndef HEADING_FEFUNCG
	#define HEADING_FEFUNCG
#endif
#ifndef ELEMENT_PRE_PROCESS_FEFUNCG
	#define ELEMENT_PRE_PROCESS_FEFUNCG
#endif
#ifndef ELEMENT_POST_PROCESS_FEFUNCG
	#define ELEMENT_POST_PROCESS_FEFUNCG
#endif
#ifndef HEADING_FEFUNCB
	#define HEADING_FEFUNCB
#endif
#ifndef ELEMENT_PRE_PROCESS_FEFUNCB
	#define ELEMENT_PRE_PROCESS_FEFUNCB
#endif
#ifndef ELEMENT_POST_PROCESS_FEFUNCB
	#define ELEMENT_POST_PROCESS_FEFUNCB
#endif
#ifndef HEADING_FEFUNCA
	#define HEADING_FEFUNCA
#endif
#ifndef ELEMENT_PRE_PROCESS_FEFUNCA
	#define ELEMENT_PRE_PROCESS_FEFUNCA
#endif
#ifndef ELEMENT_POST_PROCESS_FEFUNCA
	#define ELEMENT_POST_PROCESS_FEFUNCA
#endif
#ifndef HEADING_CURSOR
	#define HEADING_CURSOR
#endif
#ifndef ELEMENT_PRE_PROCESS_CURSOR
	#define ELEMENT_PRE_PROCESS_CURSOR
#endif
#ifndef ELEMENT_POST_PROCESS_CURSOR
	#define ELEMENT_POST_PROCESS_CURSOR
#endif
#ifndef HEADING_A
	#define HEADING_A
#endif
#ifndef ELEMENT_PRE_PROCESS_A
	#define ELEMENT_PRE_PROCESS_A
#endif
#ifndef ELEMENT_POST_PROCESS_A
	#define ELEMENT_POST_PROCESS_A
#endif
#ifndef HEADING_VIEW
	#define HEADING_VIEW
#endif
#ifndef ELEMENT_PRE_PROCESS_VIEW
	#define ELEMENT_PRE_PROCESS_VIEW
#endif
#ifndef ELEMENT_POST_PROCESS_VIEW
	#define ELEMENT_POST_PROCESS_VIEW
#endif
#ifndef HEADING_SCRIPT
	#define HEADING_SCRIPT
#endif
#ifndef ELEMENT_PRE_PROCESS_SCRIPT
	#define ELEMENT_PRE_PROCESS_SCRIPT
#endif
#ifndef ELEMENT_POST_PROCESS_SCRIPT
	#define ELEMENT_POST_PROCESS_SCRIPT
#endif
#ifndef HEADING_ANIMATE
	#define HEADING_ANIMATE
#endif
#ifndef ELEMENT_PRE_PROCESS_ANIMATE
	#define ELEMENT_PRE_PROCESS_ANIMATE
#endif
#ifndef ELEMENT_POST_PROCESS_ANIMATE
	#define ELEMENT_POST_PROCESS_ANIMATE
#endif
#ifndef HEADING_SET
	#define HEADING_SET
#endif
#ifndef ELEMENT_PRE_PROCESS_SET
	#define ELEMENT_PRE_PROCESS_SET
#endif
#ifndef ELEMENT_POST_PROCESS_SET
	#define ELEMENT_POST_PROCESS_SET
#endif
#ifndef HEADING_ANIMATEMOTION
	#define HEADING_ANIMATEMOTION
#endif
#ifndef ELEMENT_PRE_PROCESS_ANIMATEMOTION
	#define ELEMENT_PRE_PROCESS_ANIMATEMOTION
#endif
#ifndef ELEMENT_POST_PROCESS_ANIMATEMOTION
	#define ELEMENT_POST_PROCESS_ANIMATEMOTION
#endif
#ifndef HEADING_ANIMATECOLOR
	#define HEADING_ANIMATECOLOR
#endif
#ifndef ELEMENT_PRE_PROCESS_ANIMATECOLOR
	#define ELEMENT_PRE_PROCESS_ANIMATECOLOR
#endif
#ifndef ELEMENT_POST_PROCESS_ANIMATECOLOR
	#define ELEMENT_POST_PROCESS_ANIMATECOLOR
#endif
#ifndef HEADING_ANIMATETRANSFORM
	#define HEADING_ANIMATETRANSFORM
#endif
#ifndef ELEMENT_PRE_PROCESS_ANIMATETRANSFORM
	#define ELEMENT_PRE_PROCESS_ANIMATETRANSFORM
#endif
#ifndef ELEMENT_POST_PROCESS_ANIMATETRANSFORM
	#define ELEMENT_POST_PROCESS_ANIMATETRANSFORM
#endif
#ifndef HEADING_MPATH
	#define HEADING_MPATH
#endif
#ifndef ELEMENT_PRE_PROCESS_MPATH
	#define ELEMENT_PRE_PROCESS_MPATH
#endif
#ifndef ELEMENT_POST_PROCESS_MPATH
	#define ELEMENT_POST_PROCESS_MPATH
#endif
#ifndef HEADING_FONT
	#define HEADING_FONT
#endif
#ifndef ELEMENT_PRE_PROCESS_FONT
	#define ELEMENT_PRE_PROCESS_FONT
#endif
#ifndef ELEMENT_POST_PROCESS_FONT
	#define ELEMENT_POST_PROCESS_FONT
#endif
#ifndef HEADING_FONT_FACE
	#define HEADING_FONT_FACE
#endif
#ifndef ELEMENT_PRE_PROCESS_FONT_FACE
	#define ELEMENT_PRE_PROCESS_FONT_FACE
#endif
#ifndef ELEMENT_POST_PROCESS_FONT_FACE
	#define ELEMENT_POST_PROCESS_FONT_FACE
#endif
#ifndef HEADING_GLYPH
	#define HEADING_GLYPH
#endif
#ifndef ELEMENT_PRE_PROCESS_GLYPH
	#define ELEMENT_PRE_PROCESS_GLYPH
#endif
#ifndef ELEMENT_POST_PROCESS_GLYPH
	#define ELEMENT_POST_PROCESS_GLYPH
#endif
#ifndef HEADING_MISSING_GLYPH
	#define HEADING_MISSING_GLYPH
#endif
#ifndef ELEMENT_PRE_PROCESS_MISSING_GLYPH
	#define ELEMENT_PRE_PROCESS_MISSING_GLYPH
#endif
#ifndef ELEMENT_POST_PROCESS_MISSING_GLYPH
	#define ELEMENT_POST_PROCESS_MISSING_GLYPH
#endif
#ifndef HEADING_HKERN
	#define HEADING_HKERN
#endif
#ifndef ELEMENT_PRE_PROCESS_HKERN
	#define ELEMENT_PRE_PROCESS_HKERN
#endif
#ifndef ELEMENT_POST_PROCESS_HKERN
	#define ELEMENT_POST_PROCESS_HKERN
#endif
#ifndef HEADING_VKERN
	#define HEADING_VKERN
#endif
#ifndef ELEMENT_PRE_PROCESS_VKERN
	#define ELEMENT_PRE_PROCESS_VKERN
#endif
#ifndef ELEMENT_POST_PROCESS_VKERN
	#define ELEMENT_POST_PROCESS_VKERN
#endif
#ifndef HEADING_FONT_FACE_SRC
	#define HEADING_FONT_FACE_SRC
#endif
#ifndef ELEMENT_PRE_PROCESS_FONT_FACE_SRC
	#define ELEMENT_PRE_PROCESS_FONT_FACE_SRC
#endif
#ifndef ELEMENT_POST_PROCESS_FONT_FACE_SRC
	#define ELEMENT_POST_PROCESS_FONT_FACE_SRC
#endif
#ifndef HEADING_FONT_FACE_URI
	#define HEADING_FONT_FACE_URI
#endif
#ifndef ELEMENT_PRE_PROCESS_FONT_FACE_URI
	#define ELEMENT_PRE_PROCESS_FONT_FACE_URI
#endif
#ifndef ELEMENT_POST_PROCESS_FONT_FACE_URI
	#define ELEMENT_POST_PROCESS_FONT_FACE_URI
#endif
#ifndef HEADING_FONT_FACE_FORMAT
	#define HEADING_FONT_FACE_FORMAT
#endif
#ifndef ELEMENT_PRE_PROCESS_FONT_FACE_FORMAT
	#define ELEMENT_PRE_PROCESS_FONT_FACE_FORMAT
#endif
#ifndef ELEMENT_POST_PROCESS_FONT_FACE_FORMAT
	#define ELEMENT_POST_PROCESS_FONT_FACE_FORMAT
#endif
#ifndef HEADING_FONT_FACE_NAME
	#define HEADING_FONT_FACE_NAME
#endif
#ifndef ELEMENT_PRE_PROCESS_FONT_FACE_NAME
	#define ELEMENT_PRE_PROCESS_FONT_FACE_NAME
#endif
#ifndef ELEMENT_POST_PROCESS_FONT_FACE_NAME
	#define ELEMENT_POST_PROCESS_FONT_FACE_NAME
#endif
#ifndef HEADING_FOREIGNOBJECT
	#define HEADING_FOREIGNOBJECT
#endif
#ifndef ELEMENT_PRE_PROCESS_FOREIGNOBJECT
	#define ELEMENT_PRE_PROCESS_FOREIGNOBJECT
#endif
#ifndef ELEMENT_POST_PROCESS_FOREIGNOBJECT
	#define ELEMENT_POST_PROCESS_FOREIGNOBJECT
#endif
int read_svg_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_g_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_defs_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_symbol_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_use_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_switch_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_image_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_path_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_rect_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_circle_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_line_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_ellipse_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_polyline_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_polygon_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_text_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_tspan_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_tref_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_textPath_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_altGlyphDef_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_altGlyphItem_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_marker_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_color_profile_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_linearGradient_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_radialGradient_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_stop_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_pattern_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_clipPath_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_mask_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_filter_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feBlend_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feColorMatrix_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feComponentTransfer_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feComposite_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feConvolveMatrix_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feDiffuseLighting_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feDisplacementMap_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feFlood_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feGaussianBlur_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feImage_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feMerge_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feMergeNode_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feMorphology_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feOffset_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feSpecularLighting_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feTile_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feTurbulence_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feDistantLight_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_fePointLight_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feSpotLight_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feFuncR_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feFuncG_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feFuncB_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feFuncA_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_cursor_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_a_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_view_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_animate_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_set_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_animateMotion_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_animateColor_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_animateTransform_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_mpath_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_font_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_font_face_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_glyph_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_missing_glyph_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_font_face_src_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_font_face_uri_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_svg_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_g_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_defs_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_desc_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_title_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_metadata_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_symbol_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_use_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_switch_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_image_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_style_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_path_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_rect_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_circle_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_line_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_ellipse_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_polyline_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_polygon_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_text_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_tspan_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_tref_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_textPath_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_altGlyph_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_altGlyphDef_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_altGlyphItem_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_glyphRef_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_marker_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_color_profile_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_linearGradient_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_radialGradient_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_stop_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_pattern_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_clipPath_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_mask_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_filter_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feBlend_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feColorMatrix_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feComponentTransfer_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feComposite_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feConvolveMatrix_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feDiffuseLighting_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feDisplacementMap_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feFlood_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feGaussianBlur_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feImage_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feMerge_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feMergeNode_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feMorphology_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feOffset_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feSpecularLighting_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feTile_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feTurbulence_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feDistantLight_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_fePointLight_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feSpotLight_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feFuncR_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feFuncG_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feFuncB_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_feFuncA_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_cursor_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_a_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_view_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_script_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_animate_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_set_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_animateMotion_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_animateColor_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_animateTransform_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_mpath_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_font_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_font_face_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_glyph_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_missing_glyph_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_hkern_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_vkern_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_font_face_src_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_font_face_uri_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_font_face_format_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_font_face_name_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
int read_foreignObject_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData);
#endif
#ifdef PARSER_GEN_IMPLEMENTATION
int read_svg_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_SVG
	HEADING_SVG_XMLNS_ATTRIB
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_DOCUMENTEVENTS_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			if (!strncasecmp (&svg->att[1],"ase",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'l':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
					break;
				case 'p':
					PROCESS_SVG_BASEPROFILE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				switch(tolower(svg->att[2])) {
				case 'l':
					if (!strncasecmp (&svg->att[3],"or",2)) {//down
						if (nameLenght == 5)
							PROCESS_SVG_COLOR_ATTRIB_COLOR
						else {
							if (tolower(svg->att[5]) == '-') {//up
								switch(tolower(svg->att[6])) {
								case 'i':
									if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
										if (nameLenght == 19)
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
													break;
												case 'i':
													PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
													break;
												case 'l':
													PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else {
											if (!strcasecmp (&svg->att[19],"-filters"))
												{
													nameLenght = strlen (svg->value);
													switch(tolower(svg->value[0])) {
													case 'a':
														PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
														break;
													case 'i':
														PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
														break;
													case 'l':
														PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
														break;
													case 's':
														PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												}
											else
												LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'p':
									PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'a':
											PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
											break;
										case 'i':
											PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
											break;
										case 'o':
											if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
												switch(tolower(svg->value[8])) {
												case 'q':
													PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
													break;
												case 's':
													PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'n':
					if (!strncasecmp (&svg->att[3],"tents",5)) {//up
						switch(tolower(svg->att[8])) {
						case 'c':
							PROCESS_SVG_CONTENTSCRIPTTYPE
							break;
						case 't':
							PROCESS_SVG_CONTENTSTYLETYPE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_SVG_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_SVG_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					switch(tolower(svg->att[3])) {
					case 'b':
						PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONABORT
						break;
					case 'c':
						PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'e':
					PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONERROR
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONRESIZE
					break;
				case 's':
					PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONSCROLL
					break;
				case 'u':
					PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONUNLOAD
					break;
				case 'z':
					PROCESS_SVG_DOCUMENTEVENTS_ATTRIB_ONZOOM
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->att[1])) {
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
						break;
					case 'f':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
						break;
					case 'n':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
						break;
					case 'p':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
						break;
					case 's':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
						break;
					case 'v':
						if (!strncasecmp (&svg->value[1],"isible",6)) {//down
							if (nameLenght == 7)
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
							else {
								switch(tolower(svg->value[7])) {
								case 'f':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
									break;
								case 'p':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'r':
				PROCESS_SVG_PRESERVEASPECTRATIO
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_VERSION
				break;
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'e':
					PROCESS_SVG_VIEWBOX
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'h':
							PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
							break;
						case 'v':
							PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_X
			else {
				if (!strncasecmp (&svg->att[1],"ml",2)) {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						if (tolower(svg->att[4]) == 's') {//down
							if (nameLenght == 5)
								PROCESS_SVG_XMLNS_ATTRIB_XMLNS
							else {
								if (!strcasecmp (&svg->att[5],":xlink"))
									PROCESS_SVG_XMLNS_ATTRIB_XMLNS_XLINK
								else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_Y
			break;
		case 'z':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'd':
					PROCESS_SVG_ZOOMANDPAN_DISABLE
					break;
				case 'm':
					PROCESS_SVG_ZOOMANDPAN_MAGNIFY
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_XMLNS_ATTRIB
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_DOCUMENTEVENTS_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_SVG
	read_tag_end
	if (res > 0)
		res = read_svg_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_SVG
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_g_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_G
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_G_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_G_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_G_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_G
	read_tag_end
	if (res > 0)
		res = read_g_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_G
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_defs_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_DEFS
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_DEFS_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_DEFS_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_DEFS_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_DEFS
	read_tag_end
	if (res > 0)
		res = read_defs_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_DEFS
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_desc_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_DESC
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'c':
			PROCESS_SVG_STYLE_ATTRIB_CLASS
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 's':
			PROCESS_SVG_STYLE_ATTRIB_STYLE
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	ELEMENT_PRE_PROCESS_DESC
	read_tag_end
	if (res > 0)
		res = skip_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_DESC
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_title_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_TITLE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'c':
			PROCESS_SVG_STYLE_ATTRIB_CLASS
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 's':
			PROCESS_SVG_STYLE_ATTRIB_STYLE
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	ELEMENT_PRE_PROCESS_TITLE
	read_tag_end
	if (res > 0)
		res = skip_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_TITLE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_metadata_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_METADATA
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_METADATA
	read_tag_end
	if (res > 0)
		res = skip_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_METADATA
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_symbol_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_SYMBOL
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_SYMBOL_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_SYMBOL_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->att[1])) {
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
						break;
					case 'f':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
						break;
					case 'n':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
						break;
					case 'p':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
						break;
					case 's':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
						break;
					case 'v':
						if (!strncasecmp (&svg->value[1],"isible",6)) {//down
							if (nameLenght == 7)
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
							else {
								switch(tolower(svg->value[7])) {
								case 'f':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
									break;
								case 'p':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'r':
				PROCESS_SYMBOL_PRESERVEASPECTRATIO
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			if (tolower(svg->att[1]) == 'i') {//up
				switch(tolower(svg->att[2])) {
				case 'e':
					PROCESS_SYMBOL_VIEWBOX
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'h':
							PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
							break;
						case 'v':
							PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_SYMBOL
	read_tag_end
	if (res > 0)
		res = read_symbol_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_SYMBOL
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_use_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_USE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	HEADING_SVG_XLINKEMBED_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_USE_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_USE_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_USE_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_USE_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_USE_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_USE_X
			else {
				switch(tolower(svg->att[1])) {
				case 'l':
					if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
						switch(tolower(svg->att[6])) {
						case 'a':
							switch(tolower(svg->att[7])) {
							case 'c':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"onload"))
										PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ACTUATE_ONLOAD
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							case 'r':
								PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ARCROLE
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'h':
							PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_HREF
							break;
						case 'r':
							PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ROLE
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"embed"))
									PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_SHOW_EMBED
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'i':
								PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_TITLE
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"simple"))
										PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_TYPE_SIMPLE
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'm':
					if (tolower(svg->att[2]) == 'l') {//up
						switch(tolower(svg->att[3])) {
						case ':':
							switch(tolower(svg->att[4])) {
							case 'b':
								PROCESS_SVG_CORE_ATTRIB_XML_BASE
								break;
							case 'l':
								PROCESS_SVG_CORE_ATTRIB_XML_LANG
								break;
							case 's':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'd':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
										break;
									case 'p':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'n':
							PROCESS_SVG_XLINKEMBED_ATTRIB_XMLNS_XLINK
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			}
			break;
		case 'y':
			PROCESS_USE_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	PROCESS_SVG_XLINKEMBED_ATTRIB
	ELEMENT_PRE_PROCESS_USE
	read_tag_end
	if (res > 0)
		res = read_use_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_USE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_switch_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_SWITCH
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_SWITCH_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_SWITCH_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_SWITCH_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_SWITCH
	read_tag_end
	if (res > 0)
		res = read_switch_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_SWITCH
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_image_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_IMAGE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	HEADING_SVG_XLINKEMBED_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_IMAGE_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_IMAGE_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_IMAGE_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->att[1])) {
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
						break;
					case 'f':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
						break;
					case 'n':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
						break;
					case 'p':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
						break;
					case 's':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
						break;
					case 'v':
						if (!strncasecmp (&svg->value[1],"isible",6)) {//down
							if (nameLenght == 7)
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
							else {
								switch(tolower(svg->value[7])) {
								case 'f':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
									break;
								case 'p':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'r':
				PROCESS_IMAGE_PRESERVEASPECTRATIO
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_IMAGE_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_IMAGE_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_IMAGE_X
			else {
				switch(tolower(svg->att[1])) {
				case 'l':
					if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
						switch(tolower(svg->att[6])) {
						case 'a':
							switch(tolower(svg->att[7])) {
							case 'c':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"onload"))
										PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ACTUATE_ONLOAD
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							case 'r':
								PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ARCROLE
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'h':
							PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_HREF
							break;
						case 'r':
							PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ROLE
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"embed"))
									PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_SHOW_EMBED
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'i':
								PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_TITLE
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"simple"))
										PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_TYPE_SIMPLE
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'm':
					if (tolower(svg->att[2]) == 'l') {//up
						switch(tolower(svg->att[3])) {
						case ':':
							switch(tolower(svg->att[4])) {
							case 'b':
								PROCESS_SVG_CORE_ATTRIB_XML_BASE
								break;
							case 'l':
								PROCESS_SVG_CORE_ATTRIB_XML_LANG
								break;
							case 's':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'd':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
										break;
									case 'p':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'n':
							PROCESS_SVG_XLINKEMBED_ATTRIB_XMLNS_XLINK
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			}
			break;
		case 'y':
			PROCESS_IMAGE_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	PROCESS_SVG_XLINKEMBED_ATTRIB
	ELEMENT_PRE_PROCESS_IMAGE
	read_tag_end
	if (res > 0)
		res = read_image_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_IMAGE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_style_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_STYLE
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'i':
			PROCESS_STYLE_ID
			break;
		case 'm':
			PROCESS_STYLE_MEDIA
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_STYLE_TITLE
				break;
			case 'y':
				PROCESS_STYLE_TYPE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_STYLE_XML_BASE
					break;
				case 'l':
					PROCESS_STYLE_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						if (!strcasecmp (&svg->value[0],"preserve"))
							PROCESS_STYLE_XML_SPACE_PRESERVE
						else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	ELEMENT_PRE_PROCESS_STYLE
	read_tag_end
	if (res > 0)
		res = skip_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_STYLE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_path_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_PATH
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			if (nameLenght == 1)
				PROCESS_PATH_D
			else {
				switch(tolower(svg->att[1])) {
				case 'i':
					switch(tolower(svg->att[2])) {
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
								break;
							case 'l':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
								break;
							case 'r':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'b':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
								break;
							case 'c':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
								break;
							case 'i':
								if (tolower(svg->value[1]) == 'n') {//up
									switch(tolower(svg->value[2])) {
									case 'h':
										PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
										break;
									case 'l':
										if (!strncasecmp (&svg->value[3],"ine",3)) {//down
											if (nameLenght == 6)
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
											else {
												if (!strcasecmp (&svg->value[6],"-table"))
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
												else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'l':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
								break;
							case 'm':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
								break;
							case 'n':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
								break;
							case 'r':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
								break;
							case 't':
								if (!strncasecmp (&svg->value[1],"able",4)) {//down
									if (nameLenght == 5)
										PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
									else {
										if (tolower(svg->value[5]) == '-') {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												switch(tolower(svg->value[7])) {
												case 'a':
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
													break;
												case 'e':
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
													break;
												case 'o':
													if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
														if (nameLenght == 12)
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
														else {
															if (!strcasecmp (&svg->value[12],"-group"))
																PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
															else
																LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														}
													} else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
												break;
											case 'f':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
												break;
											case 'h':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
												break;
											case 'r':
												if (!strncasecmp (&svg->value[7],"ow",2)) {//down
													if (nameLenght == 9)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
													else {
														if (!strcasecmp (&svg->value[9],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
					break;
				case 'o':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							switch(tolower(svg->value[1])) {
							case 'l':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
								break;
							case 'u':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
							break;
						case 'c':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
							break;
						case 'h':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
							break;
						case 'i':
							switch(tolower(svg->value[1])) {
							case 'd':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
								break;
							case 'n':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
							break;
						case 'm':
							switch(tolower(svg->value[1])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
								switch(tolower(svg->value[5])) {
								case 'a':
									PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
									break;
								case 'b':
									PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_PATH_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_PATH_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_PATH_PATHLENGTH
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
						break;
					case 'f':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
						break;
					case 'n':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
						break;
					case 'p':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
						break;
					case 's':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
						break;
					case 'v':
						if (!strncasecmp (&svg->value[1],"isible",6)) {//down
							if (nameLenght == 7)
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
							else {
								switch(tolower(svg->value[7])) {
								case 'f':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
									break;
								case 'p':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_PATH_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_PATH
	read_tag_end
	if (res > 0)
		res = read_path_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_PATH
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_rect_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_RECT
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_RECT_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_RECT_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_RECT_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"quired",6)) {//up
					switch(tolower(svg->att[8])) {
					case 'e':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
						break;
					case 'f':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'x':
				PROCESS_RECT_RX
				break;
			case 'y':
				PROCESS_RECT_RY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_RECT_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_RECT_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_RECT_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_RECT_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_RECT
	read_tag_end
	if (res > 0)
		res = read_rect_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_RECT
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_circle_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_CIRCLE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			case 'x':
				PROCESS_CIRCLE_CX
				break;
			case 'y':
				PROCESS_CIRCLE_CY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_CIRCLE_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_CIRCLE_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			if (nameLenght == 1)
				PROCESS_CIRCLE_R
			else {
				if (!strncasecmp (&svg->att[1],"equired",7)) {//up
					switch(tolower(svg->att[8])) {
					case 'e':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
						break;
					case 'f':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_CIRCLE_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_CIRCLE
	read_tag_end
	if (res > 0)
		res = read_circle_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_CIRCLE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_line_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_LINE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_LINE_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_LINE_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_LINE_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case '1':
				PROCESS_LINE_X1
				break;
			case '2':
				PROCESS_LINE_X2
				break;
			case 'm':
				if (!strncasecmp (&svg->att[2],"l:",2)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'y':
			switch(tolower(svg->att[1])) {
			case '1':
				PROCESS_LINE_Y1
				break;
			case '2':
				PROCESS_LINE_Y2
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_LINE
	read_tag_end
	if (res > 0)
		res = read_line_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_LINE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_ellipse_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_ELLIPSE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			case 'x':
				PROCESS_ELLIPSE_CX
				break;
			case 'y':
				PROCESS_ELLIPSE_CY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_ELLIPSE_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_ELLIPSE_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"quired",6)) {//up
					switch(tolower(svg->att[8])) {
					case 'e':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
						break;
					case 'f':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'x':
				PROCESS_ELLIPSE_RX
				break;
			case 'y':
				PROCESS_ELLIPSE_RY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_ELLIPSE_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_ELLIPSE
	read_tag_end
	if (res > 0)
		res = read_ellipse_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_ELLIPSE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_polyline_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_POLYLINE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_POLYLINE_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_POLYLINE_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			if (!strncasecmp (&svg->att[1],"oint",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'e':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
							break;
						case 'f':
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
							break;
						case 'p':
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
							break;
						case 's':
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
							break;
						case 'v':
							if (!strncasecmp (&svg->value[1],"isible",6)) {//down
								if (nameLenght == 7)
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
								else {
									switch(tolower(svg->value[7])) {
									case 'f':
										PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
										break;
									case 'p':
										PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					PROCESS_POLYLINE_POINTS
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_POLYLINE_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_POLYLINE
	read_tag_end
	if (res > 0)
		res = read_polyline_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_POLYLINE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_polygon_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_POLYGON
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_POLYGON_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_POLYGON_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			if (!strncasecmp (&svg->att[1],"oint",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'e':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
							break;
						case 'f':
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
							break;
						case 'p':
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
							break;
						case 's':
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
							break;
						case 'v':
							if (!strncasecmp (&svg->value[1],"isible",6)) {//down
								if (nameLenght == 7)
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
								else {
									switch(tolower(svg->value[7])) {
									case 'f':
										PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
										break;
									case 'p':
										PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					PROCESS_POLYGON_POINTS
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_POLYGON_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_POLYGON
	read_tag_end
	if (res > 0)
		res = read_polygon_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_POLYGON
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_text_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_TEXT
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'x':
				PROCESS_TEXT_DX
				break;
			case 'y':
				PROCESS_TEXT_DY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_TEXT_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_TEXT_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				switch(tolower(svg->att[2])) {
				case 'n':
					{
						nameLenght = strlen (svg->value);
						if (!strncasecmp (&svg->value[0],"spacing",7)) {//down
							if (nameLenght == 7)
								PROCESS_TEXT_LENGTHADJUST_SPACING
							else {
								if (!strcasecmp (&svg->value[7],"andglyphs"))
									PROCESS_TEXT_LENGTHADJUST_SPACINGANDGLYPHS
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					}
					break;
				case 't':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"quired",6)) {//up
					switch(tolower(svg->att[8])) {
					case 'e':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
						break;
					case 'f':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				PROCESS_TEXT_ROTATE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt",2)) {//up
					switch(tolower(svg->att[4])) {
					case '-':
						switch(tolower(svg->att[5])) {
						case 'a':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'e':
									PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
									break;
								case 'i':
									PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
									break;
								case 'm':
									PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
									break;
								case 's':
									PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
							break;
						case 'r':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'a':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
									break;
								case 'g':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
									break;
								case 'i':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
									break;
								case 'o':
									if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
										switch(tolower(svg->value[8])) {
										case 'l':
											PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
											break;
										case 's':
											PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'l':
						PROCESS_TEXT_TEXTLENGTH
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_TEXT_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_TEXT_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_TEXT_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_TEXT
	read_tag_end
	if (res > 0)
		res = read_text_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_TEXT
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_tspan_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_TSPAN
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'x':
				PROCESS_TSPAN_DX
				break;
			case 'y':
				PROCESS_TSPAN_DY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_TSPAN_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_TSPAN_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				switch(tolower(svg->att[2])) {
				case 'n':
					{
						nameLenght = strlen (svg->value);
						if (!strncasecmp (&svg->value[0],"spacing",7)) {//down
							if (nameLenght == 7)
								PROCESS_TSPAN_LENGTHADJUST_SPACING
							else {
								if (!strcasecmp (&svg->value[7],"andglyphs"))
									PROCESS_TSPAN_LENGTHADJUST_SPACINGANDGLYPHS
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					}
					break;
				case 't':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"quired",6)) {//up
					switch(tolower(svg->att[8])) {
					case 'e':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
						break;
					case 'f':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				PROCESS_TSPAN_ROTATE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext",3)) {//up
				switch(tolower(svg->att[4])) {
				case '-':
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
					break;
				case 'l':
					PROCESS_TSPAN_TEXTLENGTH
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_TSPAN_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_TSPAN_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_TSPAN
	read_tag_end
	if (res > 0)
		res = read_tspan_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_TSPAN
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_tref_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_TREF
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	HEADING_SVG_XLINKREQUIRED_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'x':
				PROCESS_TREF_DX
				break;
			case 'y':
				PROCESS_TREF_DY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_TREF_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_TREF_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				switch(tolower(svg->att[2])) {
				case 'n':
					{
						nameLenght = strlen (svg->value);
						if (!strncasecmp (&svg->value[0],"spacing",7)) {//down
							if (nameLenght == 7)
								PROCESS_TREF_LENGTHADJUST_SPACING
							else {
								if (!strcasecmp (&svg->value[7],"andglyphs"))
									PROCESS_TREF_LENGTHADJUST_SPACINGANDGLYPHS
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					}
					break;
				case 't':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"quired",6)) {//up
					switch(tolower(svg->att[8])) {
					case 'e':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
						break;
					case 'f':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				PROCESS_TREF_ROTATE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext",3)) {//up
				switch(tolower(svg->att[4])) {
				case '-':
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
					break;
				case 'l':
					PROCESS_TREF_TEXTLENGTH
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_TREF_X
			else {
				switch(tolower(svg->att[1])) {
				case 'l':
					if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
						switch(tolower(svg->att[6])) {
						case 'a':
							switch(tolower(svg->att[7])) {
							case 'c':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"onload"))
										PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ACTUATE_ONLOAD
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							case 'r':
								PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ARCROLE
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'h':
							PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_HREF
							break;
						case 'r':
							PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ROLE
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"other"))
									PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_SHOW_OTHER
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'i':
								PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TITLE
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"simple"))
										PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TYPE_SIMPLE
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'm':
					if (tolower(svg->att[2]) == 'l') {//up
						switch(tolower(svg->att[3])) {
						case ':':
							switch(tolower(svg->att[4])) {
							case 'b':
								PROCESS_SVG_CORE_ATTRIB_XML_BASE
								break;
							case 'l':
								PROCESS_SVG_CORE_ATTRIB_XML_LANG
								break;
							case 's':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'd':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
										break;
									case 'p':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'n':
							PROCESS_SVG_XLINKREQUIRED_ATTRIB_XMLNS_XLINK
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			}
			break;
		case 'y':
			PROCESS_TREF_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	PROCESS_SVG_XLINKREQUIRED_ATTRIB
	ELEMENT_PRE_PROCESS_TREF
	read_tag_end
	if (res > 0)
		res = read_tref_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_TREF
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_textPath_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_TEXTPATH
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	HEADING_SVG_XLINKREQUIRED_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_TEXTPATH_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_TEXTPATH_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				switch(tolower(svg->att[2])) {
				case 'n':
					{
						nameLenght = strlen (svg->value);
						if (!strncasecmp (&svg->value[0],"spacing",7)) {//down
							if (nameLenght == 7)
								PROCESS_TEXTPATH_LENGTHADJUST_SPACING
							else {
								if (!strcasecmp (&svg->value[7],"andglyphs"))
									PROCESS_TEXTPATH_LENGTHADJUST_SPACINGANDGLYPHS
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					}
					break;
				case 't':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			switch(tolower(svg->att[1])) {
			case 'a':
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'e':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_TEXTPATH_METHOD_ALIGN
						break;
					case 's':
						PROCESS_TEXTPATH_METHOD_STRETCH
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'p':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_TEXTPATH_SPACING_AUTO
						break;
					case 'e':
						PROCESS_TEXTPATH_SPACING_EXACT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_TEXTPATH_STARTOFFSET
					break;
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext",3)) {//up
				switch(tolower(svg->att[4])) {
				case '-':
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
					break;
				case 'l':
					PROCESS_TEXTPATH_TEXTLENGTH
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'a':
						switch(tolower(svg->att[7])) {
						case 'c':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"onload"))
									PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ACTUATE_ONLOAD
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 'r':
							PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ARCROLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'h':
						PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_HREF
						break;
					case 'r':
						PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ROLE
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							if (!strcasecmp (&svg->value[0],"other"))
								PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_SHOW_OTHER
							else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						}
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TITLE
							break;
						case 'y':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"simple"))
									PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TYPE_SIMPLE
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'm':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_XLINKREQUIRED_ATTRIB_XMLNS_XLINK
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	PROCESS_SVG_XLINKREQUIRED_ATTRIB
	ELEMENT_PRE_PROCESS_TEXTPATH
	read_tag_end
	if (res > 0)
		res = read_textPath_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_TEXTPATH
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_altGlyph_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_ALTGLYPH
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	HEADING_SVG_XLINK_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'x':
				PROCESS_ALTGLYPH_DX
				break;
			case 'y':
				PROCESS_ALTGLYPH_DY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_ALTGLYPH_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_ALTGLYPH_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				switch(tolower(svg->att[2])) {
				case 'n':
					if (!strncasecmp (&svg->att[3],"t-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'f':
							PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
							break;
						case 's':
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"ze",2)) {//down
									if (nameLenght == 9)
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
									else {
										if (!strcasecmp (&svg->att[9],"-adjust"))
											PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 't':
								switch(tolower(svg->att[7])) {
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'c':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
											break;
										case 'e':
											if (tolower(svg->value[1]) == 'x') {//up
												switch(tolower(svg->value[2])) {
												case 'p':
													PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
													break;
												case 't':
													if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
														switch(tolower(svg->value[6])) {
														case 'c':
															PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
															break;
														case 'e':
															PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
															break;
														default:
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
															break;
														}
													} else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										case 'i':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
											break;
										case 'n':
											switch(tolower(svg->value[1])) {
											case 'a':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
												break;
											case 'o':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 's':
											if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
												switch(tolower(svg->value[5])) {
												case 'c':
													PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
													break;
												case 'e':
													PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										case 'u':
											if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
												switch(tolower(svg->value[6])) {
												case 'c':
													PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
													break;
												case 'e':
													PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										case 'w':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								case 'y':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'i':
											switch(tolower(svg->value[1])) {
											case 'n':
												PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
												break;
											case 't':
												PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'v':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'i':
									PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
									break;
								case 'n':
									PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
									break;
								case 's':
									PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						case 'w':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case '1':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
									break;
								case '2':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
									break;
								case '3':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
									break;
								case '4':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
									break;
								case '5':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
									break;
								case '6':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
									break;
								case '7':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
									break;
								case '8':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
									break;
								case '9':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
									break;
								case 'b':
									if (!strncasecmp (&svg->value[1],"old",3)) {//down
										if (nameLenght == 4)
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
										else {
											if (!strcasecmp (&svg->value[4],"er"))
												PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								case 'i':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
									break;
								case 'l':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
									break;
								case 'n':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					PROCESS_ALTGLYPH_FORMAT
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph",4)) {//up
				switch(tolower(svg->att[5])) {
				case '-':
					if (!strncasecmp (&svg->att[6],"orientation-",12)) {//up
						switch(tolower(svg->att[18])) {
						case 'h':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
							break;
						case 'v':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					PROCESS_ALTGLYPH_GLYPHREF
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"quired",6)) {//up
					switch(tolower(svg->att[8])) {
					case 'e':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
						break;
					case 'f':
						PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				PROCESS_ALTGLYPH_ROTATE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_ALTGLYPH_X
			else {
				switch(tolower(svg->att[1])) {
				case 'l':
					if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
						switch(tolower(svg->att[6])) {
						case 'a':
							switch(tolower(svg->att[7])) {
							case 'c':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"onload"))
										PROCESS_SVG_XLINK_ATTRIB_XLINK_ACTUATE_ONLOAD
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							case 'r':
								PROCESS_SVG_XLINK_ATTRIB_XLINK_ARCROLE
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'h':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_HREF
							break;
						case 'r':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_ROLE
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"other"))
									PROCESS_SVG_XLINK_ATTRIB_XLINK_SHOW_OTHER
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'i':
								PROCESS_SVG_XLINK_ATTRIB_XLINK_TITLE
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"simple"))
										PROCESS_SVG_XLINK_ATTRIB_XLINK_TYPE_SIMPLE
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'm':
					if (tolower(svg->att[2]) == 'l') {//up
						switch(tolower(svg->att[3])) {
						case ':':
							switch(tolower(svg->att[4])) {
							case 'b':
								PROCESS_SVG_CORE_ATTRIB_XML_BASE
								break;
							case 'l':
								PROCESS_SVG_CORE_ATTRIB_XML_LANG
								break;
							case 's':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'd':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
										break;
									case 'p':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'n':
							PROCESS_SVG_XLINK_ATTRIB_XMLNS_XLINK
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			}
			break;
		case 'y':
			PROCESS_ALTGLYPH_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	PROCESS_SVG_XLINK_ATTRIB
	ELEMENT_PRE_PROCESS_ALTGLYPH
	read_tag_end
	if (res > 0)
		res = skip_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_ALTGLYPH
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_altGlyphDef_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_ALTGLYPHDEF
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_ALTGLYPHDEF
	read_tag_end
	if (res > 0)
		res = read_altGlyphDef_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_ALTGLYPHDEF
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_altGlyphItem_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_ALTGLYPHITEM
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_ALTGLYPHITEM
	read_tag_end
	if (res > 0)
		res = read_altGlyphItem_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_ALTGLYPHITEM
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_glyphRef_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_GLYPHREF
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_XLINK_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'x':
				PROCESS_GLYPHREF_DX
				break;
			case 'y':
				PROCESS_GLYPHREF_DY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				switch(tolower(svg->att[2])) {
				case 'n':
					if (!strncasecmp (&svg->att[3],"t-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'f':
							PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
							break;
						case 's':
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"ze",2)) {//down
									if (nameLenght == 9)
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
									else {
										if (!strcasecmp (&svg->att[9],"-adjust"))
											PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 't':
								switch(tolower(svg->att[7])) {
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'c':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
											break;
										case 'e':
											if (tolower(svg->value[1]) == 'x') {//up
												switch(tolower(svg->value[2])) {
												case 'p':
													PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
													break;
												case 't':
													if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
														switch(tolower(svg->value[6])) {
														case 'c':
															PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
															break;
														case 'e':
															PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
															break;
														default:
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
															break;
														}
													} else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										case 'i':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
											break;
										case 'n':
											switch(tolower(svg->value[1])) {
											case 'a':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
												break;
											case 'o':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 's':
											if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
												switch(tolower(svg->value[5])) {
												case 'c':
													PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
													break;
												case 'e':
													PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										case 'u':
											if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
												switch(tolower(svg->value[6])) {
												case 'c':
													PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
													break;
												case 'e':
													PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										case 'w':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								case 'y':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'i':
											switch(tolower(svg->value[1])) {
											case 'n':
												PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
												break;
											case 't':
												PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'v':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'i':
									PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
									break;
								case 'n':
									PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
									break;
								case 's':
									PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						case 'w':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case '1':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
									break;
								case '2':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
									break;
								case '3':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
									break;
								case '4':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
									break;
								case '5':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
									break;
								case '6':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
									break;
								case '7':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
									break;
								case '8':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
									break;
								case '9':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
									break;
								case 'b':
									if (!strncasecmp (&svg->value[1],"old",3)) {//down
										if (nameLenght == 4)
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
										else {
											if (!strcasecmp (&svg->value[4],"er"))
												PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								case 'i':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
									break;
								case 'l':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
									break;
								case 'n':
									PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					PROCESS_GLYPHREF_FORMAT
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph",4)) {//up
				switch(tolower(svg->att[5])) {
				case '-':
					if (!strncasecmp (&svg->att[6],"orientation-",12)) {//up
						switch(tolower(svg->att[18])) {
						case 'h':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
							break;
						case 'v':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					PROCESS_GLYPHREF_GLYPHREF
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_GLYPHREF_X
			else {
				switch(tolower(svg->att[1])) {
				case 'l':
					if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
						switch(tolower(svg->att[6])) {
						case 'a':
							switch(tolower(svg->att[7])) {
							case 'c':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"onload"))
										PROCESS_SVG_XLINK_ATTRIB_XLINK_ACTUATE_ONLOAD
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							case 'r':
								PROCESS_SVG_XLINK_ATTRIB_XLINK_ARCROLE
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'h':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_HREF
							break;
						case 'r':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_ROLE
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"other"))
									PROCESS_SVG_XLINK_ATTRIB_XLINK_SHOW_OTHER
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'i':
								PROCESS_SVG_XLINK_ATTRIB_XLINK_TITLE
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"simple"))
										PROCESS_SVG_XLINK_ATTRIB_XLINK_TYPE_SIMPLE
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'm':
					if (tolower(svg->att[2]) == 'l') {//up
						switch(tolower(svg->att[3])) {
						case ':':
							switch(tolower(svg->att[4])) {
							case 'b':
								PROCESS_SVG_CORE_ATTRIB_XML_BASE
								break;
							case 'l':
								PROCESS_SVG_CORE_ATTRIB_XML_LANG
								break;
							case 's':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'd':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
										break;
									case 'p':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'n':
							PROCESS_SVG_XLINK_ATTRIB_XMLNS_XLINK
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			}
			break;
		case 'y':
			PROCESS_GLYPHREF_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_XLINK_ATTRIB
	ELEMENT_PRE_PROCESS_GLYPHREF
	read_tag_end
	if (res > 0)
		res = skip_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_GLYPHREF
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_marker_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_MARKER
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_MARKER_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_MARKER_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker",3)) {//up
						switch(tolower(svg->att[6])) {
						case '-':
							switch(tolower(svg->att[7])) {
							case 'e':
								PROCESS_SVG_MARKER_ATTRIB_MARKER_END
								break;
							case 'm':
								PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
								break;
							case 's':
								PROCESS_SVG_MARKER_ATTRIB_MARKER_START
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'h':
							PROCESS_MARKER_MARKERHEIGHT
							break;
						case 'u':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 's':
									PROCESS_MARKER_MARKERUNITS_STROKEWIDTH
									break;
								case 'u':
									PROCESS_MARKER_MARKERUNITS_USERSPACEONUSE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						case 'w':
							PROCESS_MARKER_MARKERWIDTH
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'r':
				PROCESS_MARKER_ORIENT
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->att[1])) {
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
						break;
					case 'f':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
						break;
					case 'n':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
						break;
					case 'p':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
						break;
					case 's':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
						break;
					case 'v':
						if (!strncasecmp (&svg->value[1],"isible",6)) {//down
							if (nameLenght == 7)
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
							else {
								switch(tolower(svg->value[7])) {
								case 'f':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
									break;
								case 'p':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'r':
				PROCESS_MARKER_PRESERVEASPECTRATIO
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"ef",2)) {//up
				switch(tolower(svg->att[3])) {
				case 'x':
					PROCESS_MARKER_REFX
					break;
				case 'y':
					PROCESS_MARKER_REFY
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			if (tolower(svg->att[1]) == 'i') {//up
				switch(tolower(svg->att[2])) {
				case 'e':
					PROCESS_MARKER_VIEWBOX
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'h':
							PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
							break;
						case 'v':
							PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	ELEMENT_PRE_PROCESS_MARKER
	read_tag_end
	if (res > 0)
		res = read_marker_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_MARKER
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_color_profile_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_COLOR_PROFILE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_XLINK_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'l':
			PROCESS_COLOR_PROFILE_LOCAL
			break;
		case 'n':
			PROCESS_COLOR_PROFILE_NAME
			break;
		case 'r':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'b':
						PROCESS_COLOR_PROFILE_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC
						break;
					case 'u':
						PROCESS_COLOR_PROFILE_RENDERING_INTENT_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'p':
					PROCESS_COLOR_PROFILE_RENDERING_INTENT_PERCEPTUAL
					break;
				case 'r':
					PROCESS_COLOR_PROFILE_RENDERING_INTENT_RELATIVE_COLORIMETRIC
					break;
				case 's':
					PROCESS_COLOR_PROFILE_RENDERING_INTENT_SATURATION
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'a':
						switch(tolower(svg->att[7])) {
						case 'c':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"onload"))
									PROCESS_SVG_XLINK_ATTRIB_XLINK_ACTUATE_ONLOAD
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 'r':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_ARCROLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'h':
						PROCESS_SVG_XLINK_ATTRIB_XLINK_HREF
						break;
					case 'r':
						PROCESS_SVG_XLINK_ATTRIB_XLINK_ROLE
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							if (!strcasecmp (&svg->value[0],"other"))
								PROCESS_SVG_XLINK_ATTRIB_XLINK_SHOW_OTHER
							else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						}
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_TITLE
							break;
						case 'y':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"simple"))
									PROCESS_SVG_XLINK_ATTRIB_XLINK_TYPE_SIMPLE
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'm':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_XLINK_ATTRIB_XMLNS_XLINK
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_XLINK_ATTRIB
	ELEMENT_PRE_PROCESS_COLOR_PROFILE
	read_tag_end
	if (res > 0)
		res = read_color_profile_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_COLOR_PROFILE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_linearGradient_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_LINEARGRADIENT
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_XLINK_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_LINEARGRADIENT_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_LINEARGRADIENT_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"yph-orientation-",16)) {//up
					switch(tolower(svg->att[18])) {
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
						break;
					case 'v':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				if (!strncasecmp (&svg->att[2],"adient",6)) {//up
					switch(tolower(svg->att[8])) {
					case 't':
						PROCESS_LINEARGRADIENT_GRADIENTTRANSFORM
						break;
					case 'u':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'o':
								PROCESS_LINEARGRADIENT_GRADIENTUNITS_OBJECTBOUNDINGBOX
								break;
							case 'u':
								PROCESS_LINEARGRADIENT_GRADIENTUNITS_USERSPACEONUSE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'p':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'p':
						PROCESS_LINEARGRADIENT_SPREADMETHOD_PAD
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'e') {//up
							switch(tolower(svg->value[2])) {
							case 'f':
								PROCESS_LINEARGRADIENT_SPREADMETHOD_REFLECT
								break;
							case 'p':
								PROCESS_LINEARGRADIENT_SPREADMETHOD_REPEAT
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case '1':
				PROCESS_LINEARGRADIENT_X1
				break;
			case '2':
				PROCESS_LINEARGRADIENT_X2
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'a':
						switch(tolower(svg->att[7])) {
						case 'c':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"onload"))
									PROCESS_SVG_XLINK_ATTRIB_XLINK_ACTUATE_ONLOAD
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 'r':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_ARCROLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'h':
						PROCESS_SVG_XLINK_ATTRIB_XLINK_HREF
						break;
					case 'r':
						PROCESS_SVG_XLINK_ATTRIB_XLINK_ROLE
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							if (!strcasecmp (&svg->value[0],"other"))
								PROCESS_SVG_XLINK_ATTRIB_XLINK_SHOW_OTHER
							else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						}
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_TITLE
							break;
						case 'y':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"simple"))
									PROCESS_SVG_XLINK_ATTRIB_XLINK_TYPE_SIMPLE
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'm':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_XLINK_ATTRIB_XMLNS_XLINK
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'y':
			switch(tolower(svg->att[1])) {
			case '1':
				PROCESS_LINEARGRADIENT_Y1
				break;
			case '2':
				PROCESS_LINEARGRADIENT_Y2
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_XLINK_ATTRIB
	ELEMENT_PRE_PROCESS_LINEARGRADIENT
	read_tag_end
	if (res > 0)
		res = read_linearGradient_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_LINEARGRADIENT
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_radialGradient_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_RADIALGRADIENT
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_XLINK_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			case 'x':
				PROCESS_RADIALGRADIENT_CX
				break;
			case 'y':
				PROCESS_RADIALGRADIENT_CY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_RADIALGRADIENT_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_RADIALGRADIENT_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'x':
				PROCESS_RADIALGRADIENT_FX
				break;
			case 'y':
				PROCESS_RADIALGRADIENT_FY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"yph-orientation-",16)) {//up
					switch(tolower(svg->att[18])) {
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
						break;
					case 'v':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				if (!strncasecmp (&svg->att[2],"adient",6)) {//up
					switch(tolower(svg->att[8])) {
					case 't':
						PROCESS_RADIALGRADIENT_GRADIENTTRANSFORM
						break;
					case 'u':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'o':
								PROCESS_RADIALGRADIENT_GRADIENTUNITS_OBJECTBOUNDINGBOX
								break;
							case 'u':
								PROCESS_RADIALGRADIENT_GRADIENTUNITS_USERSPACEONUSE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_RADIALGRADIENT_R
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'p':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'p':
						PROCESS_RADIALGRADIENT_SPREADMETHOD_PAD
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'e') {//up
							switch(tolower(svg->value[2])) {
							case 'f':
								PROCESS_RADIALGRADIENT_SPREADMETHOD_REFLECT
								break;
							case 'p':
								PROCESS_RADIALGRADIENT_SPREADMETHOD_REPEAT
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'a':
						switch(tolower(svg->att[7])) {
						case 'c':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"onload"))
									PROCESS_SVG_XLINK_ATTRIB_XLINK_ACTUATE_ONLOAD
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 'r':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_ARCROLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'h':
						PROCESS_SVG_XLINK_ATTRIB_XLINK_HREF
						break;
					case 'r':
						PROCESS_SVG_XLINK_ATTRIB_XLINK_ROLE
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							if (!strcasecmp (&svg->value[0],"other"))
								PROCESS_SVG_XLINK_ATTRIB_XLINK_SHOW_OTHER
							else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						}
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_TITLE
							break;
						case 'y':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"simple"))
									PROCESS_SVG_XLINK_ATTRIB_XLINK_TYPE_SIMPLE
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'm':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_XLINK_ATTRIB_XMLNS_XLINK
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_XLINK_ATTRIB
	ELEMENT_PRE_PROCESS_RADIALGRADIENT
	read_tag_end
	if (res > 0)
		res = read_radialGradient_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_RADIALGRADIENT
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_stop_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_STOP
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'f':
				PROCESS_STOP_OFFSET
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	ELEMENT_PRE_PROCESS_STOP
	read_tag_end
	if (res > 0)
		res = read_stop_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_STOP
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_pattern_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_PATTERN
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_XLINK_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_PATTERN_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_PATTERN_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_PATTERN_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->att[1])) {
			case 'a':
				if (!strncasecmp (&svg->att[2],"ttern",5)) {//up
					switch(tolower(svg->att[7])) {
					case 'c':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'o':
								PROCESS_PATTERN_PATTERNCONTENTUNITS_OBJECTBOUNDINGBOX
								break;
							case 'u':
								PROCESS_PATTERN_PATTERNCONTENTUNITS_USERSPACEONUSE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 't':
						PROCESS_PATTERN_PATTERNTRANSFORM
						break;
					case 'u':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'o':
								PROCESS_PATTERN_PATTERNUNITS_OBJECTBOUNDINGBOX
								break;
							case 'u':
								PROCESS_PATTERN_PATTERNUNITS_USERSPACEONUSE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
						break;
					case 'f':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
						break;
					case 'n':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
						break;
					case 'p':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
						break;
					case 's':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
						break;
					case 'v':
						if (!strncasecmp (&svg->value[1],"isible",6)) {//down
							if (nameLenght == 7)
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
							else {
								switch(tolower(svg->value[7])) {
								case 'f':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
									break;
								case 'p':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'r':
				PROCESS_PATTERN_PRESERVEASPECTRATIO
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			if (tolower(svg->att[1]) == 'i') {//up
				switch(tolower(svg->att[2])) {
				case 'e':
					PROCESS_PATTERN_VIEWBOX
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'h':
							PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
							break;
						case 'v':
							PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_PATTERN_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_PATTERN_X
			else {
				switch(tolower(svg->att[1])) {
				case 'l':
					if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
						switch(tolower(svg->att[6])) {
						case 'a':
							switch(tolower(svg->att[7])) {
							case 'c':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"onload"))
										PROCESS_SVG_XLINK_ATTRIB_XLINK_ACTUATE_ONLOAD
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							case 'r':
								PROCESS_SVG_XLINK_ATTRIB_XLINK_ARCROLE
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'h':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_HREF
							break;
						case 'r':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_ROLE
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"other"))
									PROCESS_SVG_XLINK_ATTRIB_XLINK_SHOW_OTHER
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'i':
								PROCESS_SVG_XLINK_ATTRIB_XLINK_TITLE
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"simple"))
										PROCESS_SVG_XLINK_ATTRIB_XLINK_TYPE_SIMPLE
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'm':
					if (tolower(svg->att[2]) == 'l') {//up
						switch(tolower(svg->att[3])) {
						case ':':
							switch(tolower(svg->att[4])) {
							case 'b':
								PROCESS_SVG_CORE_ATTRIB_XML_BASE
								break;
							case 'l':
								PROCESS_SVG_CORE_ATTRIB_XML_LANG
								break;
							case 's':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'd':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
										break;
									case 'p':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'n':
							PROCESS_SVG_XLINK_ATTRIB_XMLNS_XLINK
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			}
			break;
		case 'y':
			PROCESS_PATTERN_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_XLINK_ATTRIB
	ELEMENT_PRE_PROCESS_PATTERN
	read_tag_end
	if (res > 0)
		res = read_pattern_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_PATTERN
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_clipPath_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_CLIPPATH
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							switch(tolower(svg->att[4])) {
							case '-':
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
								break;
							case 'p':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'o':
										PROCESS_CLIPPATH_CLIPPATHUNITS_OBJECTBOUNDINGBOX
										break;
									case 'u':
										PROCESS_CLIPPATH_CLIPPATHUNITS_USERSPACEONUSE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_CLIPPATH_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_CLIPPATH_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_CLIPPATH_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	ELEMENT_PRE_PROCESS_CLIPPATH
	read_tag_end
	if (res > 0)
		res = read_clipPath_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_CLIPPATH
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_mask_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_MASK
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_MASK_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_MASK_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_MASK_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					if (tolower(svg->att[3]) == 'k') {//down
						if (nameLenght == 4)
							PROCESS_SVG_PRESENTATION_ATTRIB_MASK
						else {
							switch(tolower(svg->att[4])) {
							case 'c':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'o':
										PROCESS_MASK_MASKCONTENTUNITS_OBJECTBOUNDINGBOX
										break;
									case 'u':
										PROCESS_MASK_MASKCONTENTUNITS_USERSPACEONUSE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'u':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'o':
										PROCESS_MASK_MASKUNITS_OBJECTBOUNDINGBOX
										break;
									case 'u':
										PROCESS_MASK_MASKUNITS_USERSPACEONUSE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_MASK_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_MASK_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_MASK_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	ELEMENT_PRE_PROCESS_MASK
	read_tag_end
	if (res > 0)
		res = read_mask_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_MASK
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_filter_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FILTER
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_XLINK_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_FILTER_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_FILTER_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						if (!strncasecmp (&svg->att[4],"er",2)) {//down
							if (nameLenght == 6)
								PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
							else {
								switch(tolower(svg->att[6])) {
								case 'r':
									PROCESS_FILTER_FILTERRES
									break;
								case 'u':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'o':
											PROCESS_FILTER_FILTERUNITS_OBJECTBOUNDINGBOX
											break;
										case 'u':
											PROCESS_FILTER_FILTERUNITS_USERSPACEONUSE
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_FILTER_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->att[1])) {
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
						break;
					case 'f':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
						break;
					case 'n':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
						break;
					case 'p':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
						break;
					case 's':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
						break;
					case 'v':
						if (!strncasecmp (&svg->value[1],"isible",6)) {//down
							if (nameLenght == 7)
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
							else {
								switch(tolower(svg->value[7])) {
								case 'f':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
									break;
								case 'p':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'o':
						PROCESS_FILTER_PRIMITIVEUNITS_OBJECTBOUNDINGBOX
						break;
					case 'u':
						PROCESS_FILTER_PRIMITIVEUNITS_USERSPACEONUSE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_FILTER_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_FILTER_X
			else {
				switch(tolower(svg->att[1])) {
				case 'l':
					if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
						switch(tolower(svg->att[6])) {
						case 'a':
							switch(tolower(svg->att[7])) {
							case 'c':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"onload"))
										PROCESS_SVG_XLINK_ATTRIB_XLINK_ACTUATE_ONLOAD
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							case 'r':
								PROCESS_SVG_XLINK_ATTRIB_XLINK_ARCROLE
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'h':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_HREF
							break;
						case 'r':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_ROLE
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"other"))
									PROCESS_SVG_XLINK_ATTRIB_XLINK_SHOW_OTHER
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'i':
								PROCESS_SVG_XLINK_ATTRIB_XLINK_TITLE
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"simple"))
										PROCESS_SVG_XLINK_ATTRIB_XLINK_TYPE_SIMPLE
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'm':
					if (tolower(svg->att[2]) == 'l') {//up
						switch(tolower(svg->att[3])) {
						case ':':
							switch(tolower(svg->att[4])) {
							case 'b':
								PROCESS_SVG_CORE_ATTRIB_XML_BASE
								break;
							case 'l':
								PROCESS_SVG_CORE_ATTRIB_XML_LANG
								break;
							case 's':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'd':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
										break;
									case 'p':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'n':
							PROCESS_SVG_XLINK_ATTRIB_XMLNS_XLINK
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			}
			break;
		case 'y':
			PROCESS_FILTER_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_XLINK_ATTRIB
	ELEMENT_PRE_PROCESS_FILTER
	read_tag_end
	if (res > 0)
		res = read_filter_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FILTER
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feBlend_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEBLEND
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'n':
				if (nameLenght == 2)
					PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN
				else {
					if (!strcasecmp (&svg->att[2],"2"))
						PROCESS_FEBLEND_IN2
					else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			switch(tolower(svg->att[1])) {
			case 'a':
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'd':
						PROCESS_FEBLEND_MODE_DARKEN
						break;
					case 'l':
						PROCESS_FEBLEND_MODE_LIGHTEN
						break;
					case 'm':
						PROCESS_FEBLEND_MODE_MULTIPLY
						break;
					case 'n':
						PROCESS_FEBLEND_MODE_NORMAL
						break;
					case 's':
						PROCESS_FEBLEND_MODE_SCREEN
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	ELEMENT_PRE_PROCESS_FEBLEND
	read_tag_end
	if (res > 0)
		res = read_feBlend_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEBLEND
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feColorMatrix_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FECOLORMATRIX
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'n':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'y':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'h':
						PROCESS_FECOLORMATRIX_TYPE_HUEROTATE
						break;
					case 'l':
						PROCESS_FECOLORMATRIX_TYPE_LUMINANCETOALPHA
						break;
					case 'm':
						PROCESS_FECOLORMATRIX_TYPE_MATRIX
						break;
					case 's':
						PROCESS_FECOLORMATRIX_TYPE_SATURATE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_FECOLORMATRIX_VALUES
				break;
			case 'i':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'h':
						PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
						break;
					case 'v':
						PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	ELEMENT_PRE_PROCESS_FECOLORMATRIX
	read_tag_end
	if (res > 0)
		res = read_feColorMatrix_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FECOLORMATRIX
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feComponentTransfer_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FECOMPONENTTRANSFER
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'n':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	ELEMENT_PRE_PROCESS_FECOMPONENTTRANSFER
	read_tag_end
	if (res > 0)
		res = read_feComponentTransfer_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FECOMPONENTTRANSFER
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feComposite_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FECOMPOSITE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'n':
				if (nameLenght == 2)
					PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN
				else {
					if (!strcasecmp (&svg->att[2],"2"))
						PROCESS_FECOMPOSITE_IN2
					else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			switch(tolower(svg->att[1])) {
			case '1':
				PROCESS_FECOMPOSITE_K1
				break;
			case '2':
				PROCESS_FECOMPOSITE_K2
				break;
			case '3':
				PROCESS_FECOMPOSITE_K3
				break;
			case '4':
				PROCESS_FECOMPOSITE_K4
				break;
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_OPACITY_ATTRIB_OPACITY
					break;
				case 'e':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							switch(tolower(svg->value[1])) {
							case 'r':
								PROCESS_FECOMPOSITE_OPERATOR_ARITHMETIC
								break;
							case 't':
								PROCESS_FECOMPOSITE_OPERATOR_ATOP
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
							break;
						case 'i':
							PROCESS_FECOMPOSITE_OPERATOR_IN
							break;
						case 'o':
							switch(tolower(svg->value[1])) {
							case 'u':
								PROCESS_FECOMPOSITE_OPERATOR_OUT
								break;
							case 'v':
								PROCESS_FECOMPOSITE_OPERATOR_OVER
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
							break;
						case 'x':
							PROCESS_FECOMPOSITE_OPERATOR_XOR
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	ELEMENT_PRE_PROCESS_FECOMPOSITE
	read_tag_end
	if (res > 0)
		res = read_feComposite_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FECOMPOSITE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feConvolveMatrix_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FECONVOLVEMATRIX
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
				break;
			case 'i':
				PROCESS_FECONVOLVEMATRIX_BIAS
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'v':
					PROCESS_FECONVOLVEMATRIX_DIVISOR
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'd':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'd':
						PROCESS_FECONVOLVEMATRIX_EDGEMODE_DUPLICATE
						break;
					case 'n':
						PROCESS_FECONVOLVEMATRIX_EDGEMODE_NONE
						break;
					case 'w':
						PROCESS_FECONVOLVEMATRIX_EDGEMODE_WRAP
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'n':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			if (!strncasecmp (&svg->att[1],"ern",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'e':
					if (tolower(svg->att[5]) == 'l') {//up
						switch(tolower(svg->att[6])) {
						case 'm':
							PROCESS_FECONVOLVEMATRIX_KERNELMATRIX
							break;
						case 'u':
							PROCESS_FECONVOLVEMATRIX_KERNELUNITLENGTH
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'r':
				PROCESS_FECONVOLVEMATRIX_ORDER
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->att[1])) {
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
						break;
					case 'f':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
						break;
					case 'n':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
						break;
					case 'p':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
						break;
					case 's':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
						break;
					case 'v':
						if (!strncasecmp (&svg->value[1],"isible",6)) {//down
							if (nameLenght == 7)
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
							else {
								switch(tolower(svg->value[7])) {
								case 'f':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
									break;
								case 'p':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_FECONVOLVEMATRIX_PRESERVEALPHA_FALSE
						break;
					case 't':
						PROCESS_FECONVOLVEMATRIX_PRESERVEALPHA_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'a':
				if (!strncasecmp (&svg->att[2],"rget",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'x':
						PROCESS_FECONVOLVEMATRIX_TARGETX
						break;
					case 'y':
						PROCESS_FECONVOLVEMATRIX_TARGETY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	ELEMENT_PRE_PROCESS_FECONVOLVEMATRIX
	read_tag_end
	if (res > 0)
		res = read_feConvolveMatrix_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FECONVOLVEMATRIX
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feDiffuseLighting_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEDIFFUSELIGHTING
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'f':
					PROCESS_FEDIFFUSELIGHTING_DIFFUSECONSTANT
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'n':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			if (!strncasecmp (&svg->att[1],"ern",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'e':
					PROCESS_FEDIFFUSELIGHTING_KERNELUNITLENGTH
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'u':
				PROCESS_FEDIFFUSELIGHTING_SURFACESCALE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	ELEMENT_PRE_PROCESS_FEDIFFUSELIGHTING
	read_tag_end
	if (res > 0)
		res = read_feDiffuseLighting_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEDIFFUSELIGHTING
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feDisplacementMap_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEDISPLACEMENTMAP
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'n':
				if (nameLenght == 2)
					PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN
				else {
					if (!strcasecmp (&svg->att[2],"2"))
						PROCESS_FEDISPLACEMENTMAP_IN2
					else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'c':
				PROCESS_FEDISPLACEMENTMAP_SCALE
				break;
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X
			else {
				switch(tolower(svg->att[1])) {
				case 'c':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_FEDISPLACEMENTMAP_XCHANNELSELECTOR_A
							break;
						case 'b':
							PROCESS_FEDISPLACEMENTMAP_XCHANNELSELECTOR_B
							break;
						case 'g':
							PROCESS_FEDISPLACEMENTMAP_XCHANNELSELECTOR_G
							break;
						case 'r':
							PROCESS_FEDISPLACEMENTMAP_XCHANNELSELECTOR_R
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'm':
					if (!strncasecmp (&svg->att[2],"l:",2)) {//up
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			}
			break;
		case 'y':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y
			else {
				if (!strcasecmp (&svg->att[1],"channelselector"))
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_FEDISPLACEMENTMAP_YCHANNELSELECTOR_A
							break;
						case 'b':
							PROCESS_FEDISPLACEMENTMAP_YCHANNELSELECTOR_B
							break;
						case 'g':
							PROCESS_FEDISPLACEMENTMAP_YCHANNELSELECTOR_G
							break;
						case 'r':
							PROCESS_FEDISPLACEMENTMAP_YCHANNELSELECTOR_R
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
				else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	ELEMENT_PRE_PROCESS_FEDISPLACEMENTMAP
	read_tag_end
	if (res > 0)
		res = read_feDisplacementMap_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEDISPLACEMENTMAP
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feFlood_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEFLOOD
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVE_ATTRIB
	ELEMENT_PRE_PROCESS_FEFLOOD
	read_tag_end
	if (res > 0)
		res = read_feFlood_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEFLOOD
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feGaussianBlur_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEGAUSSIANBLUR
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'n':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'd':
					PROCESS_FEGAUSSIANBLUR_STDDEVIATION
					break;
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	ELEMENT_PRE_PROCESS_FEGAUSSIANBLUR
	read_tag_end
	if (res > 0)
		res = read_feGaussianBlur_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEGAUSSIANBLUR
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feImage_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEIMAGE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVE_ATTRIB
	HEADING_SVG_XLINKEMBED_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_FEIMAGE_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_FEIMAGE_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->att[1])) {
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
						break;
					case 'f':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
						break;
					case 'n':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
						break;
					case 'p':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
						break;
					case 's':
						PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
						break;
					case 'v':
						if (!strncasecmp (&svg->value[1],"isible",6)) {//down
							if (nameLenght == 7)
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
							else {
								switch(tolower(svg->value[7])) {
								case 'f':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
									break;
								case 'p':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'r':
				PROCESS_FEIMAGE_PRESERVEASPECTRATIO
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_X
			else {
				switch(tolower(svg->att[1])) {
				case 'l':
					if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
						switch(tolower(svg->att[6])) {
						case 'a':
							switch(tolower(svg->att[7])) {
							case 'c':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"onload"))
										PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ACTUATE_ONLOAD
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							case 'r':
								PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ARCROLE
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'h':
							PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_HREF
							break;
						case 'r':
							PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_ROLE
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"embed"))
									PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_SHOW_EMBED
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'i':
								PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_TITLE
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"simple"))
										PROCESS_SVG_XLINKEMBED_ATTRIB_XLINK_TYPE_SIMPLE
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'm':
					if (tolower(svg->att[2]) == 'l') {//up
						switch(tolower(svg->att[3])) {
						case ':':
							switch(tolower(svg->att[4])) {
							case 'b':
								PROCESS_SVG_CORE_ATTRIB_XML_BASE
								break;
							case 'l':
								PROCESS_SVG_CORE_ATTRIB_XML_LANG
								break;
							case 's':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'd':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
										break;
									case 'p':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'n':
							PROCESS_SVG_XLINKEMBED_ATTRIB_XMLNS_XLINK
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVE_ATTRIB
	PROCESS_SVG_XLINKEMBED_ATTRIB
	ELEMENT_PRE_PROCESS_FEIMAGE
	read_tag_end
	if (res > 0)
		res = read_feImage_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEIMAGE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feMerge_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEMERGE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVE_ATTRIB
	ELEMENT_PRE_PROCESS_FEMERGE
	read_tag_end
	if (res > 0)
		res = read_feMerge_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEMERGE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feMergeNode_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEMERGENODE
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'n':
				PROCESS_FEMERGENODE_IN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_FEMERGENODE
	read_tag_end
	if (res > 0)
		res = read_feMergeNode_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEMERGENODE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feMorphology_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEMORPHOLOGY
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'n':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_OPACITY_ATTRIB_OPACITY
					break;
				case 'e':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_FEMORPHOLOGY_OPERATOR_DILATE
							break;
						case 'e':
							PROCESS_FEMORPHOLOGY_OPERATOR_ERODE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_FEMORPHOLOGY_RADIUS
				break;
			case 'e':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	ELEMENT_PRE_PROCESS_FEMORPHOLOGY
	read_tag_end
	if (res > 0)
		res = read_feMorphology_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEMORPHOLOGY
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feOffset_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEOFFSET
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'x':
				PROCESS_FEOFFSET_DX
				break;
			case 'y':
				PROCESS_FEOFFSET_DY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'n':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	ELEMENT_PRE_PROCESS_FEOFFSET
	read_tag_end
	if (res > 0)
		res = read_feOffset_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEOFFSET
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feSpecularLighting_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FESPECULARLIGHTING
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'n':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			if (!strncasecmp (&svg->att[1],"ern",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'e':
					PROCESS_FESPECULARLIGHTING_KERNELUNITLENGTH
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'p':
				if (!strncasecmp (&svg->att[2],"ecular",6)) {//up
					switch(tolower(svg->att[8])) {
					case 'c':
						PROCESS_FESPECULARLIGHTING_SPECULARCONSTANT
						break;
					case 'e':
						PROCESS_FESPECULARLIGHTING_SPECULAREXPONENT
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'u':
				PROCESS_FESPECULARLIGHTING_SURFACESCALE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	ELEMENT_PRE_PROCESS_FESPECULARLIGHTING
	read_tag_end
	if (res > 0)
		res = read_feSpecularLighting_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FESPECULARLIGHTING
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feTile_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FETILE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'n':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_IN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVEWITHIN_ATTRIB
	ELEMENT_PRE_PROCESS_FETILE
	read_tag_end
	if (res > 0)
		res = read_feTile_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FETILE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feTurbulence_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FETURBULENCE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_FILTERPRIMITIVE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			if (!strncasecmp (&svg->att[1],"ase",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'f':
					PROCESS_FETURBULENCE_BASEFREQUENCY
					break;
				case 'l':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'n':
			PROCESS_FETURBULENCE_NUMOCTAVES
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_RESULT
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_FETURBULENCE_SEED
				break;
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'i':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'n':
							PROCESS_FETURBULENCE_STITCHTILES_NOSTITCH
							break;
						case 's':
							PROCESS_FETURBULENCE_STITCHTILES_STITCH
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'y':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_FETURBULENCE_TYPE_FRACTALNOISE
						break;
					case 't':
						PROCESS_FETURBULENCE_TYPE_TURBULENCE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_SVG_FILTERPRIMITIVE_ATTRIB_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_FILTERPRIMITIVE_ATTRIB
	ELEMENT_PRE_PROCESS_FETURBULENCE
	read_tag_end
	if (res > 0)
		res = read_feTurbulence_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FETURBULENCE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feDistantLight_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEDISTANTLIGHT
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			PROCESS_FEDISTANTLIGHT_AZIMUTH
			break;
		case 'e':
			PROCESS_FEDISTANTLIGHT_ELEVATION
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_FEDISTANTLIGHT
	read_tag_end
	if (res > 0)
		res = read_feDistantLight_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEDISTANTLIGHT
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_fePointLight_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEPOINTLIGHT
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_FEPOINTLIGHT_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_FEPOINTLIGHT_Y
			break;
		case 'z':
			PROCESS_FEPOINTLIGHT_Z
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_FEPOINTLIGHT
	read_tag_end
	if (res > 0)
		res = read_fePointLight_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEPOINTLIGHT
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feSpotLight_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FESPOTLIGHT
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'l':
			PROCESS_FESPOTLIGHT_LIMITINGCONEANGLE
			break;
		case 'p':
			if (!strncasecmp (&svg->att[1],"ointsat",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'x':
					PROCESS_FESPOTLIGHT_POINTSATX
					break;
				case 'y':
					PROCESS_FESPOTLIGHT_POINTSATY
					break;
				case 'z':
					PROCESS_FESPOTLIGHT_POINTSATZ
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			PROCESS_FESPOTLIGHT_SPECULAREXPONENT
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_FESPOTLIGHT_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_FESPOTLIGHT_Y
			break;
		case 'z':
			PROCESS_FESPOTLIGHT_Z
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_FESPOTLIGHT
	read_tag_end
	if (res > 0)
		res = read_feSpotLight_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FESPOTLIGHT
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feFuncR_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEFUNCR
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			PROCESS_FEFUNCR_AMPLITUDE
			break;
		case 'e':
			PROCESS_FEFUNCR_EXPONENT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'n':
				PROCESS_FEFUNCR_INTERCEPT
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'o':
			PROCESS_FEFUNCR_OFFSET
			break;
		case 's':
			PROCESS_FEFUNCR_SLOPE
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_FEFUNCR_TABLEVALUES
				break;
			case 'y':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'd':
						PROCESS_FEFUNCR_TYPE_DISCRETE
						break;
					case 'g':
						PROCESS_FEFUNCR_TYPE_GAMMA
						break;
					case 'i':
						PROCESS_FEFUNCR_TYPE_IDENTITY
						break;
					case 'l':
						PROCESS_FEFUNCR_TYPE_LINEAR
						break;
					case 't':
						PROCESS_FEFUNCR_TYPE_TABLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_FEFUNCR
	read_tag_end
	if (res > 0)
		res = read_feFuncR_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEFUNCR
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feFuncG_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEFUNCG
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			PROCESS_FEFUNCG_AMPLITUDE
			break;
		case 'e':
			PROCESS_FEFUNCG_EXPONENT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'n':
				PROCESS_FEFUNCG_INTERCEPT
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'o':
			PROCESS_FEFUNCG_OFFSET
			break;
		case 's':
			PROCESS_FEFUNCG_SLOPE
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_FEFUNCG_TABLEVALUES
				break;
			case 'y':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'd':
						PROCESS_FEFUNCG_TYPE_DISCRETE
						break;
					case 'g':
						PROCESS_FEFUNCG_TYPE_GAMMA
						break;
					case 'i':
						PROCESS_FEFUNCG_TYPE_IDENTITY
						break;
					case 'l':
						PROCESS_FEFUNCG_TYPE_LINEAR
						break;
					case 't':
						PROCESS_FEFUNCG_TYPE_TABLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_FEFUNCG
	read_tag_end
	if (res > 0)
		res = read_feFuncG_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEFUNCG
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feFuncB_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEFUNCB
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			PROCESS_FEFUNCB_AMPLITUDE
			break;
		case 'e':
			PROCESS_FEFUNCB_EXPONENT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'n':
				PROCESS_FEFUNCB_INTERCEPT
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'o':
			PROCESS_FEFUNCB_OFFSET
			break;
		case 's':
			PROCESS_FEFUNCB_SLOPE
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_FEFUNCB_TABLEVALUES
				break;
			case 'y':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'd':
						PROCESS_FEFUNCB_TYPE_DISCRETE
						break;
					case 'g':
						PROCESS_FEFUNCB_TYPE_GAMMA
						break;
					case 'i':
						PROCESS_FEFUNCB_TYPE_IDENTITY
						break;
					case 'l':
						PROCESS_FEFUNCB_TYPE_LINEAR
						break;
					case 't':
						PROCESS_FEFUNCB_TYPE_TABLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_FEFUNCB
	read_tag_end
	if (res > 0)
		res = read_feFuncB_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEFUNCB
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_feFuncA_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FEFUNCA
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			PROCESS_FEFUNCA_AMPLITUDE
			break;
		case 'e':
			PROCESS_FEFUNCA_EXPONENT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'n':
				PROCESS_FEFUNCA_INTERCEPT
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'o':
			PROCESS_FEFUNCA_OFFSET
			break;
		case 's':
			PROCESS_FEFUNCA_SLOPE
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_FEFUNCA_TABLEVALUES
				break;
			case 'y':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'd':
						PROCESS_FEFUNCA_TYPE_DISCRETE
						break;
					case 'g':
						PROCESS_FEFUNCA_TYPE_GAMMA
						break;
					case 'i':
						PROCESS_FEFUNCA_TYPE_IDENTITY
						break;
					case 'l':
						PROCESS_FEFUNCA_TYPE_LINEAR
						break;
					case 't':
						PROCESS_FEFUNCA_TYPE_TABLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_FEFUNCA
	read_tag_end
	if (res > 0)
		res = read_feFuncA_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FEFUNCA
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_cursor_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_CURSOR
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_XLINKREQUIRED_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'e':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'f':
					PROCESS_CURSOR_EXTERNALRESOURCESREQUIRED_FALSE
					break;
				case 't':
					PROCESS_CURSOR_EXTERNALRESOURCESREQUIRED_TRUE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_CURSOR_X
			else {
				switch(tolower(svg->att[1])) {
				case 'l':
					if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
						switch(tolower(svg->att[6])) {
						case 'a':
							switch(tolower(svg->att[7])) {
							case 'c':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"onload"))
										PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ACTUATE_ONLOAD
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							case 'r':
								PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ARCROLE
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'h':
							PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_HREF
							break;
						case 'r':
							PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ROLE
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"other"))
									PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_SHOW_OTHER
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'i':
								PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TITLE
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									if (!strcasecmp (&svg->value[0],"simple"))
										PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TYPE_SIMPLE
									else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'm':
					if (tolower(svg->att[2]) == 'l') {//up
						switch(tolower(svg->att[3])) {
						case ':':
							switch(tolower(svg->att[4])) {
							case 'b':
								PROCESS_SVG_CORE_ATTRIB_XML_BASE
								break;
							case 'l':
								PROCESS_SVG_CORE_ATTRIB_XML_LANG
								break;
							case 's':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'd':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
										break;
									case 'p':
										PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'n':
							PROCESS_SVG_XLINKREQUIRED_ATTRIB_XMLNS_XLINK
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			}
			break;
		case 'y':
			PROCESS_CURSOR_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_XLINKREQUIRED_ATTRIB
	ELEMENT_PRE_PROCESS_CURSOR
	read_tag_end
	if (res > 0)
		res = read_cursor_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_CURSOR
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_a_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_A
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	HEADING_SVG_XLINKREPLACE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_A_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_A_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_A_TARGET
				break;
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_A_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'a':
						switch(tolower(svg->att[7])) {
						case 'c':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"onrequest"))
									PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_ACTUATE_ONREQUEST
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 'r':
							PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_ARCROLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'h':
						PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_HREF
						break;
					case 'r':
						PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_ROLE
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'n':
								PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_SHOW_NEW
								break;
							case 'r':
								PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_SHOW_REPLACE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_TITLE
							break;
						case 'y':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"simple"))
									PROCESS_SVG_XLINKREPLACE_ATTRIB_XLINK_TYPE_SIMPLE
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'm':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_XLINKREPLACE_ATTRIB_XMLNS_XLINK
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	PROCESS_SVG_XLINKREPLACE_ATTRIB
	ELEMENT_PRE_PROCESS_A
	read_tag_end
	if (res > 0)
		res = read_a_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_A
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_view_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_VIEW
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'e':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'f':
					PROCESS_VIEW_EXTERNALRESOURCESREQUIRED_FALSE
					break;
				case 't':
					PROCESS_VIEW_EXTERNALRESOURCESREQUIRED_TRUE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'p':
			PROCESS_VIEW_PRESERVEASPECTRATIO
			break;
		case 'v':
			if (!strncasecmp (&svg->att[1],"iew",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_VIEW_VIEWBOX
					break;
				case 't':
					PROCESS_VIEW_VIEWTARGET
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'z':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'd':
					PROCESS_VIEW_ZOOMANDPAN_DISABLE
					break;
				case 'm':
					PROCESS_VIEW_ZOOMANDPAN_MAGNIFY
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_VIEW
	read_tag_end
	if (res > 0)
		res = read_view_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_VIEW
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_script_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_SCRIPT
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_XLINK_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'e':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'f':
					PROCESS_SCRIPT_EXTERNALRESOURCESREQUIRED_FALSE
					break;
				case 't':
					PROCESS_SCRIPT_EXTERNALRESOURCESREQUIRED_TRUE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 't':
			PROCESS_SCRIPT_TYPE
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'a':
						switch(tolower(svg->att[7])) {
						case 'c':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"onload"))
									PROCESS_SVG_XLINK_ATTRIB_XLINK_ACTUATE_ONLOAD
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 'r':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_ARCROLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'h':
						PROCESS_SVG_XLINK_ATTRIB_XLINK_HREF
						break;
					case 'r':
						PROCESS_SVG_XLINK_ATTRIB_XLINK_ROLE
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							if (!strcasecmp (&svg->value[0],"other"))
								PROCESS_SVG_XLINK_ATTRIB_XLINK_SHOW_OTHER
							else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						}
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_XLINK_ATTRIB_XLINK_TITLE
							break;
						case 'y':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"simple"))
									PROCESS_SVG_XLINK_ATTRIB_XLINK_TYPE_SIMPLE
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'm':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_XLINK_ATTRIB_XMLNS_XLINK
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_XLINK_ATTRIB
	ELEMENT_PRE_PROCESS_SCRIPT
	read_tag_end
	if (res > 0)
		res = skip_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_SCRIPT
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_animate_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_ANIMATE
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_ANIMATIONEVENTS_ATTRIB
	HEADING_SVG_ANIMATION_ATTRIB
	HEADING_SVG_ANIMATIONATTRIBUTE_ATTRIB
	HEADING_SVG_ANIMATIONTIMING_ATTRIB
	HEADING_SVG_ANIMATIONVALUE_ATTRIB
	HEADING_SVG_ANIMATIONADDTION_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			switch(tolower(svg->att[1])) {
			case 'c':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'n':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ACCUMULATE_NONE
						break;
					case 's':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ACCUMULATE_SUM
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'd':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'r':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ADDITIVE_REPLACE
						break;
					case 's':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ADDITIVE_SUM
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				if (!strncasecmp (&svg->att[2],"tribute",7)) {//up
					switch(tolower(svg->att[9])) {
					case 'n':
						PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB_ATTRIBUTENAME
						break;
					case 't':
						PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB_ATTRIBUTETYPE
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'b':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_BEGIN
				break;
			case 'y':
				PROCESS_SVG_ANIMATIONVALUE_ATTRIB_BY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'c':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'd':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_DISCRETE
					break;
				case 'l':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_LINEAR
					break;
				case 'p':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_PACED
					break;
				case 's':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_SPLINE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'd':
			PROCESS_SVG_ANIMATIONTIMING_ATTRIB_DUR
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_END
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_ANIMATE_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_ANIMATE_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_FREEZE
						break;
					case 'r':
						PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_REMOVE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'r':
				PROCESS_SVG_ANIMATIONVALUE_ATTRIB_FROM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'k':
			if (!strncasecmp (&svg->att[1],"ey",2)) {//up
				switch(tolower(svg->att[3])) {
				case 's':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_KEYSPLINES
					break;
				case 't':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_KEYTIMES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'm':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MAX
				break;
			case 'i':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MIN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'o':
			if (tolower(svg->att[1]) == 'n') {//up
				switch(tolower(svg->att[2])) {
				case 'b':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONBEGIN
					break;
				case 'e':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONEND
					break;
				case 'l':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONLOAD
					break;
				case 'r':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONREPEAT
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'r':
			if (tolower(svg->att[1]) == 'e') {//up
				switch(tolower(svg->att[2])) {
				case 'p':
					if (!strncasecmp (&svg->att[3],"eat",3)) {//up
						switch(tolower(svg->att[6])) {
						case 'c':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATCOUNT
							break;
						case 'd':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATDUR
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'q':
					if (!strncasecmp (&svg->att[3],"uired",5)) {//up
						switch(tolower(svg->att[8])) {
						case 'e':
							PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
							break;
						case 'f':
							PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_ALWAYS
							break;
						case 'n':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_NEVER
							break;
						case 'w':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_WHENNOTACTIVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
			break;
		case 't':
			PROCESS_SVG_ANIMATIONVALUE_ATTRIB_TO
			break;
		case 'v':
			PROCESS_SVG_ANIMATIONVALUE_ATTRIB_VALUES
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'a':
						switch(tolower(svg->att[7])) {
						case 'c':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"onload"))
									PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ACTUATE_ONLOAD
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 'r':
							PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ARCROLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'h':
						PROCESS_SVG_ANIMATION_ATTRIB_XLINK_HREF
						break;
					case 'r':
						PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ROLE
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							if (!strcasecmp (&svg->value[0],"other"))
								PROCESS_SVG_ANIMATION_ATTRIB_XLINK_SHOW_OTHER
							else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						}
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TITLE
							break;
						case 'y':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"simple"))
									PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TYPE_SIMPLE
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'm':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_ANIMATION_ATTRIB_XMLNS_XLINK
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_ANIMATIONEVENTS_ATTRIB
	PROCESS_SVG_ANIMATION_ATTRIB
	PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB
	PROCESS_SVG_ANIMATIONTIMING_ATTRIB
	PROCESS_SVG_ANIMATIONVALUE_ATTRIB
	PROCESS_SVG_ANIMATIONADDTION_ATTRIB
	ELEMENT_PRE_PROCESS_ANIMATE
	read_tag_end
	if (res > 0)
		res = read_animate_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_ANIMATE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_set_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_SET
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_ANIMATIONEVENTS_ATTRIB
	HEADING_SVG_ANIMATION_ATTRIB
	HEADING_SVG_ANIMATIONATTRIBUTE_ATTRIB
	HEADING_SVG_ANIMATIONTIMING_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			if (!strncasecmp (&svg->att[1],"ttribute",8)) {//up
				switch(tolower(svg->att[9])) {
				case 'n':
					PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB_ATTRIBUTENAME
					break;
				case 't':
					PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB_ATTRIBUTETYPE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'b':
			PROCESS_SVG_ANIMATIONTIMING_ATTRIB_BEGIN
			break;
		case 'd':
			PROCESS_SVG_ANIMATIONTIMING_ATTRIB_DUR
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_END
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_SET_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_SET_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'f':
					PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_FREEZE
					break;
				case 'r':
					PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_REMOVE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'm':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MAX
				break;
			case 'i':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MIN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'o':
			if (tolower(svg->att[1]) == 'n') {//up
				switch(tolower(svg->att[2])) {
				case 'b':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONBEGIN
					break;
				case 'e':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONEND
					break;
				case 'l':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONLOAD
					break;
				case 'r':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONREPEAT
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'r':
			if (tolower(svg->att[1]) == 'e') {//up
				switch(tolower(svg->att[2])) {
				case 'p':
					if (!strncasecmp (&svg->att[3],"eat",3)) {//up
						switch(tolower(svg->att[6])) {
						case 'c':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATCOUNT
							break;
						case 'd':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATDUR
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'q':
					if (!strncasecmp (&svg->att[3],"uired",5)) {//up
						switch(tolower(svg->att[8])) {
						case 'e':
							PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
							break;
						case 'f':
							PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_ALWAYS
							break;
						case 'n':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_NEVER
							break;
						case 'w':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_WHENNOTACTIVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
			break;
		case 't':
			PROCESS_SET_TO
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'a':
						switch(tolower(svg->att[7])) {
						case 'c':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"onload"))
									PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ACTUATE_ONLOAD
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 'r':
							PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ARCROLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'h':
						PROCESS_SVG_ANIMATION_ATTRIB_XLINK_HREF
						break;
					case 'r':
						PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ROLE
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							if (!strcasecmp (&svg->value[0],"other"))
								PROCESS_SVG_ANIMATION_ATTRIB_XLINK_SHOW_OTHER
							else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						}
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TITLE
							break;
						case 'y':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"simple"))
									PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TYPE_SIMPLE
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'm':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_ANIMATION_ATTRIB_XMLNS_XLINK
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_ANIMATIONEVENTS_ATTRIB
	PROCESS_SVG_ANIMATION_ATTRIB
	PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB
	PROCESS_SVG_ANIMATIONTIMING_ATTRIB
	ELEMENT_PRE_PROCESS_SET
	read_tag_end
	if (res > 0)
		res = read_set_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_SET
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_animateMotion_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_ANIMATEMOTION
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_ANIMATIONEVENTS_ATTRIB
	HEADING_SVG_ANIMATION_ATTRIB
	HEADING_SVG_ANIMATIONTIMING_ATTRIB
	HEADING_SVG_ANIMATIONADDTION_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			switch(tolower(svg->att[1])) {
			case 'c':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'n':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ACCUMULATE_NONE
						break;
					case 's':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ACCUMULATE_SUM
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'd':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'r':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ADDITIVE_REPLACE
						break;
					case 's':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ADDITIVE_SUM
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'b':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_BEGIN
				break;
			case 'y':
				PROCESS_ANIMATEMOTION_BY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'c':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'd':
					PROCESS_ANIMATEMOTION_CALCMODE_DISCRETE
					break;
				case 'l':
					PROCESS_ANIMATEMOTION_CALCMODE_LINEAR
					break;
				case 'p':
					PROCESS_ANIMATEMOTION_CALCMODE_PACED
					break;
				case 's':
					PROCESS_ANIMATEMOTION_CALCMODE_SPLINE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'd':
			PROCESS_SVG_ANIMATIONTIMING_ATTRIB_DUR
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_END
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_ANIMATEMOTION_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_ANIMATEMOTION_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_FREEZE
						break;
					case 'r':
						PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_REMOVE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'r':
				PROCESS_ANIMATEMOTION_FROM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'k':
			if (!strncasecmp (&svg->att[1],"ey",2)) {//up
				switch(tolower(svg->att[3])) {
				case 'p':
					PROCESS_ANIMATEMOTION_KEYPOINTS
					break;
				case 's':
					PROCESS_ANIMATEMOTION_KEYSPLINES
					break;
				case 't':
					PROCESS_ANIMATEMOTION_KEYTIMES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'm':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MAX
				break;
			case 'i':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MIN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'b':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONBEGIN
					break;
				case 'e':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONEND
					break;
				case 'l':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONLOAD
					break;
				case 'r':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONREPEAT
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'r':
				PROCESS_ANIMATEMOTION_ORIGIN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			PROCESS_ANIMATEMOTION_PATH
			break;
		case 'r':
			switch(tolower(svg->att[1])) {
			case 'e':
				switch(tolower(svg->att[2])) {
				case 'p':
					if (!strncasecmp (&svg->att[3],"eat",3)) {//up
						switch(tolower(svg->att[6])) {
						case 'c':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATCOUNT
							break;
						case 'd':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATDUR
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'q':
					if (!strncasecmp (&svg->att[3],"uired",5)) {//up
						switch(tolower(svg->att[8])) {
						case 'e':
							PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
							break;
						case 'f':
							PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_ALWAYS
							break;
						case 'n':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_NEVER
							break;
						case 'w':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_WHENNOTACTIVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				PROCESS_ANIMATEMOTION_ROTATE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 's':
			PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
			break;
		case 't':
			PROCESS_ANIMATEMOTION_TO
			break;
		case 'v':
			PROCESS_ANIMATEMOTION_VALUES
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'a':
						switch(tolower(svg->att[7])) {
						case 'c':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"onload"))
									PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ACTUATE_ONLOAD
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 'r':
							PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ARCROLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'h':
						PROCESS_SVG_ANIMATION_ATTRIB_XLINK_HREF
						break;
					case 'r':
						PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ROLE
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							if (!strcasecmp (&svg->value[0],"other"))
								PROCESS_SVG_ANIMATION_ATTRIB_XLINK_SHOW_OTHER
							else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						}
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TITLE
							break;
						case 'y':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"simple"))
									PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TYPE_SIMPLE
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'm':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_ANIMATION_ATTRIB_XMLNS_XLINK
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_ANIMATIONEVENTS_ATTRIB
	PROCESS_SVG_ANIMATION_ATTRIB
	PROCESS_SVG_ANIMATIONTIMING_ATTRIB
	PROCESS_SVG_ANIMATIONADDTION_ATTRIB
	ELEMENT_PRE_PROCESS_ANIMATEMOTION
	read_tag_end
	if (res > 0)
		res = read_animateMotion_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_ANIMATEMOTION
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_animateColor_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_ANIMATECOLOR
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_ANIMATIONEVENTS_ATTRIB
	HEADING_SVG_ANIMATION_ATTRIB
	HEADING_SVG_ANIMATIONATTRIBUTE_ATTRIB
	HEADING_SVG_ANIMATIONTIMING_ATTRIB
	HEADING_SVG_ANIMATIONVALUE_ATTRIB
	HEADING_SVG_ANIMATIONADDTION_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			switch(tolower(svg->att[1])) {
			case 'c':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'n':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ACCUMULATE_NONE
						break;
					case 's':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ACCUMULATE_SUM
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'd':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'r':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ADDITIVE_REPLACE
						break;
					case 's':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ADDITIVE_SUM
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				if (!strncasecmp (&svg->att[2],"tribute",7)) {//up
					switch(tolower(svg->att[9])) {
					case 'n':
						PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB_ATTRIBUTENAME
						break;
					case 't':
						PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB_ATTRIBUTETYPE
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'b':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_BEGIN
				break;
			case 'y':
				PROCESS_SVG_ANIMATIONVALUE_ATTRIB_BY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'c':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'd':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_DISCRETE
					break;
				case 'l':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_LINEAR
					break;
				case 'p':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_PACED
					break;
				case 's':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_SPLINE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'd':
			PROCESS_SVG_ANIMATIONTIMING_ATTRIB_DUR
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_END
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_ANIMATECOLOR_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_ANIMATECOLOR_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_FREEZE
						break;
					case 'r':
						PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_REMOVE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'r':
				PROCESS_SVG_ANIMATIONVALUE_ATTRIB_FROM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'k':
			if (!strncasecmp (&svg->att[1],"ey",2)) {//up
				switch(tolower(svg->att[3])) {
				case 's':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_KEYSPLINES
					break;
				case 't':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_KEYTIMES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'm':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MAX
				break;
			case 'i':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MIN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'o':
			if (tolower(svg->att[1]) == 'n') {//up
				switch(tolower(svg->att[2])) {
				case 'b':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONBEGIN
					break;
				case 'e':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONEND
					break;
				case 'l':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONLOAD
					break;
				case 'r':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONREPEAT
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'r':
			if (tolower(svg->att[1]) == 'e') {//up
				switch(tolower(svg->att[2])) {
				case 'p':
					if (!strncasecmp (&svg->att[3],"eat",3)) {//up
						switch(tolower(svg->att[6])) {
						case 'c':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATCOUNT
							break;
						case 'd':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATDUR
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'q':
					if (!strncasecmp (&svg->att[3],"uired",5)) {//up
						switch(tolower(svg->att[8])) {
						case 'e':
							PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
							break;
						case 'f':
							PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_ALWAYS
							break;
						case 'n':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_NEVER
							break;
						case 'w':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_WHENNOTACTIVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
			break;
		case 't':
			PROCESS_SVG_ANIMATIONVALUE_ATTRIB_TO
			break;
		case 'v':
			PROCESS_SVG_ANIMATIONVALUE_ATTRIB_VALUES
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'a':
						switch(tolower(svg->att[7])) {
						case 'c':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"onload"))
									PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ACTUATE_ONLOAD
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 'r':
							PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ARCROLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'h':
						PROCESS_SVG_ANIMATION_ATTRIB_XLINK_HREF
						break;
					case 'r':
						PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ROLE
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							if (!strcasecmp (&svg->value[0],"other"))
								PROCESS_SVG_ANIMATION_ATTRIB_XLINK_SHOW_OTHER
							else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						}
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TITLE
							break;
						case 'y':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"simple"))
									PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TYPE_SIMPLE
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'm':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_ANIMATION_ATTRIB_XMLNS_XLINK
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_ANIMATIONEVENTS_ATTRIB
	PROCESS_SVG_ANIMATION_ATTRIB
	PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB
	PROCESS_SVG_ANIMATIONTIMING_ATTRIB
	PROCESS_SVG_ANIMATIONVALUE_ATTRIB
	PROCESS_SVG_ANIMATIONADDTION_ATTRIB
	ELEMENT_PRE_PROCESS_ANIMATECOLOR
	read_tag_end
	if (res > 0)
		res = read_animateColor_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_ANIMATECOLOR
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_animateTransform_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_ANIMATETRANSFORM
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_ANIMATIONEVENTS_ATTRIB
	HEADING_SVG_ANIMATION_ATTRIB
	HEADING_SVG_ANIMATIONATTRIBUTE_ATTRIB
	HEADING_SVG_ANIMATIONTIMING_ATTRIB
	HEADING_SVG_ANIMATIONVALUE_ATTRIB
	HEADING_SVG_ANIMATIONADDTION_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			switch(tolower(svg->att[1])) {
			case 'c':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'n':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ACCUMULATE_NONE
						break;
					case 's':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ACCUMULATE_SUM
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'd':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'r':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ADDITIVE_REPLACE
						break;
					case 's':
						PROCESS_SVG_ANIMATIONADDTION_ATTRIB_ADDITIVE_SUM
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				if (!strncasecmp (&svg->att[2],"tribute",7)) {//up
					switch(tolower(svg->att[9])) {
					case 'n':
						PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB_ATTRIBUTENAME
						break;
					case 't':
						PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB_ATTRIBUTETYPE
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'b':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_BEGIN
				break;
			case 'y':
				PROCESS_SVG_ANIMATIONVALUE_ATTRIB_BY
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'c':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'd':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_DISCRETE
					break;
				case 'l':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_LINEAR
					break;
				case 'p':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_PACED
					break;
				case 's':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_CALCMODE_SPLINE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'd':
			PROCESS_SVG_ANIMATIONTIMING_ATTRIB_DUR
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_END
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_ANIMATETRANSFORM_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_ANIMATETRANSFORM_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_FREEZE
						break;
					case 'r':
						PROCESS_SVG_ANIMATIONTIMING_ATTRIB_FILL_REMOVE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'r':
				PROCESS_SVG_ANIMATIONVALUE_ATTRIB_FROM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'k':
			if (!strncasecmp (&svg->att[1],"ey",2)) {//up
				switch(tolower(svg->att[3])) {
				case 's':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_KEYSPLINES
					break;
				case 't':
					PROCESS_SVG_ANIMATIONVALUE_ATTRIB_KEYTIMES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'm':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MAX
				break;
			case 'i':
				PROCESS_SVG_ANIMATIONTIMING_ATTRIB_MIN
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'o':
			if (tolower(svg->att[1]) == 'n') {//up
				switch(tolower(svg->att[2])) {
				case 'b':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONBEGIN
					break;
				case 'e':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONEND
					break;
				case 'l':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONLOAD
					break;
				case 'r':
					PROCESS_SVG_ANIMATIONEVENTS_ATTRIB_ONREPEAT
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'r':
			if (tolower(svg->att[1]) == 'e') {//up
				switch(tolower(svg->att[2])) {
				case 'p':
					if (!strncasecmp (&svg->att[3],"eat",3)) {//up
						switch(tolower(svg->att[6])) {
						case 'c':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATCOUNT
							break;
						case 'd':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_REPEATDUR
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'q':
					if (!strncasecmp (&svg->att[3],"uired",5)) {//up
						switch(tolower(svg->att[8])) {
						case 'e':
							PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
							break;
						case 'f':
							PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_ALWAYS
							break;
						case 'n':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_NEVER
							break;
						case 'w':
							PROCESS_SVG_ANIMATIONTIMING_ATTRIB_RESTART_WHENNOTACTIVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_ANIMATIONVALUE_ATTRIB_TO
				break;
			case 'y':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'r':
						PROCESS_ANIMATETRANSFORM_TYPE_ROTATE
						break;
					case 's':
						switch(tolower(svg->value[1])) {
						case 'c':
							PROCESS_ANIMATETRANSFORM_TYPE_SCALE
							break;
						case 'k':
							if (!strncasecmp (&svg->value[2],"ew",2)) {//up
								switch(tolower(svg->value[4])) {
								case 'x':
									PROCESS_ANIMATETRANSFORM_TYPE_SKEWX
									break;
								case 'y':
									PROCESS_ANIMATETRANSFORM_TYPE_SKEWY
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 't':
						PROCESS_ANIMATETRANSFORM_TYPE_TRANSLATE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'v':
			PROCESS_SVG_ANIMATIONVALUE_ATTRIB_VALUES
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'a':
						switch(tolower(svg->att[7])) {
						case 'c':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"onload"))
									PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ACTUATE_ONLOAD
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 'r':
							PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ARCROLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'h':
						PROCESS_SVG_ANIMATION_ATTRIB_XLINK_HREF
						break;
					case 'r':
						PROCESS_SVG_ANIMATION_ATTRIB_XLINK_ROLE
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							if (!strcasecmp (&svg->value[0],"other"))
								PROCESS_SVG_ANIMATION_ATTRIB_XLINK_SHOW_OTHER
							else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						}
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TITLE
							break;
						case 'y':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"simple"))
									PROCESS_SVG_ANIMATION_ATTRIB_XLINK_TYPE_SIMPLE
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'm':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_ANIMATION_ATTRIB_XMLNS_XLINK
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_ANIMATIONEVENTS_ATTRIB
	PROCESS_SVG_ANIMATION_ATTRIB
	PROCESS_SVG_ANIMATIONATTRIBUTE_ATTRIB
	PROCESS_SVG_ANIMATIONTIMING_ATTRIB
	PROCESS_SVG_ANIMATIONVALUE_ATTRIB
	PROCESS_SVG_ANIMATIONADDTION_ATTRIB
	ELEMENT_PRE_PROCESS_ANIMATETRANSFORM
	read_tag_end
	if (res > 0)
		res = read_animateTransform_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_ANIMATETRANSFORM
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_mpath_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_MPATH
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_XLINKREQUIRED_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'e':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'f':
					PROCESS_MPATH_EXTERNALRESOURCESREQUIRED_FALSE
					break;
				case 't':
					PROCESS_MPATH_EXTERNALRESOURCESREQUIRED_TRUE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'a':
						switch(tolower(svg->att[7])) {
						case 'c':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"onload"))
									PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ACTUATE_ONLOAD
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 'r':
							PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ARCROLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'h':
						PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_HREF
						break;
					case 'r':
						PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ROLE
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							if (!strcasecmp (&svg->value[0],"other"))
								PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_SHOW_OTHER
							else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						}
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TITLE
							break;
						case 'y':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"simple"))
									PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TYPE_SIMPLE
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'm':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_XLINKREQUIRED_ATTRIB_XMLNS_XLINK
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_XLINKREQUIRED_ATTRIB
	ELEMENT_PRE_PROCESS_MPATH
	read_tag_end
	if (res > 0)
		res = read_mpath_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_MPATH
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_font_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FONT
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_FONT_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_FONT_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			if (!strncasecmp (&svg->att[1],"oriz-",5)) {//up
				switch(tolower(svg->att[6])) {
				case 'a':
					PROCESS_FONT_HORIZ_ADV_X
					break;
				case 'o':
					if (!strncasecmp (&svg->att[7],"rigin-",6)) {//up
						switch(tolower(svg->att[13])) {
						case 'x':
							PROCESS_FONT_HORIZ_ORIGIN_X
							break;
						case 'y':
							PROCESS_FONT_HORIZ_ORIGIN_Y
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"rt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						PROCESS_FONT_VERT_ADV_Y
						break;
					case 'o':
						if (!strncasecmp (&svg->att[6],"rigin-",6)) {//up
							switch(tolower(svg->att[12])) {
							case 'x':
								PROCESS_FONT_VERT_ORIGIN_X
								break;
							case 'y':
								PROCESS_FONT_VERT_ORIGIN_Y
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'i':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'h':
						PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
						break;
					case 'v':
						PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	ELEMENT_PRE_PROCESS_FONT
	read_tag_end
	if (res > 0)
		res = read_font_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FONT
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_font_face_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FONT_FACE
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			switch(tolower(svg->att[1])) {
			case 'c':
				PROCESS_FONT_FACE_ACCENT_HEIGHT
				break;
			case 'l':
				PROCESS_FONT_FACE_ALPHABETIC
				break;
			case 's':
				PROCESS_FONT_FACE_ASCENT
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'b':
			PROCESS_FONT_FACE_BBOX
			break;
		case 'c':
			PROCESS_FONT_FACE_CAP_HEIGHT
			break;
		case 'd':
			PROCESS_FONT_FACE_DESCENT
			break;
		case 'f':
			if (!strncasecmp (&svg->att[1],"ont-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'f':
					PROCESS_FONT_FACE_FONT_FAMILY
					break;
				case 's':
					switch(tolower(svg->att[6])) {
					case 'i':
						PROCESS_FONT_FACE_FONT_SIZE
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'r':
							PROCESS_FONT_FACE_FONT_STRETCH
							break;
						case 'y':
							PROCESS_FONT_FACE_FONT_STYLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
					break;
				case 'v':
					PROCESS_FONT_FACE_FONT_VARIANT
					break;
				case 'w':
					PROCESS_FONT_FACE_FONT_WEIGHT
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_FONT_FACE_HANGING
			break;
		case 'i':
			if (tolower(svg->att[1]) == 'd') {//down
				if (nameLenght == 2)
					PROCESS_SVG_CORE_ATTRIB_ID
				else {
					if (!strcasecmp (&svg->att[2],"eographic"))
						PROCESS_FONT_FACE_IDEOGRAPHIC
					else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'm':
			PROCESS_FONT_FACE_MATHEMATICAL
			break;
		case 'o':
			if (!strncasecmp (&svg->att[1],"verline-",8)) {//up
				switch(tolower(svg->att[9])) {
				case 'p':
					PROCESS_FONT_FACE_OVERLINE_POSITION
					break;
				case 't':
					PROCESS_FONT_FACE_OVERLINE_THICKNESS
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'p':
			PROCESS_FONT_FACE_PANOSE_1
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'l':
				PROCESS_FONT_FACE_SLOPE
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'e':
					if (tolower(svg->att[3]) == 'm') {//up
						switch(tolower(svg->att[4])) {
						case 'h':
							PROCESS_FONT_FACE_STEMH
							break;
						case 'v':
							PROCESS_FONT_FACE_STEMV
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"ikethrough-",11)) {//up
						switch(tolower(svg->att[14])) {
						case 'p':
							PROCESS_FONT_FACE_STRIKETHROUGH_POSITION
							break;
						case 't':
							PROCESS_FONT_FACE_STRIKETHROUGH_THICKNESS
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			if (tolower(svg->att[1]) == 'n') {//up
				switch(tolower(svg->att[2])) {
				case 'd':
					if (!strncasecmp (&svg->att[3],"erline-",7)) {//up
						switch(tolower(svg->att[10])) {
						case 'p':
							PROCESS_FONT_FACE_UNDERLINE_POSITION
							break;
						case 't':
							PROCESS_FONT_FACE_UNDERLINE_THICKNESS
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'i':
					switch(tolower(svg->att[3])) {
					case 'c':
						PROCESS_FONT_FACE_UNICODE_RANGE
						break;
					case 't':
						PROCESS_FONT_FACE_UNITS_PER_EM
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'v':
			if (tolower(svg->att[1]) == '-') {//up
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_FONT_FACE_V_ALPHABETIC
					break;
				case 'h':
					PROCESS_FONT_FACE_V_HANGING
					break;
				case 'i':
					PROCESS_FONT_FACE_V_IDEOGRAPHIC
					break;
				case 'm':
					PROCESS_FONT_FACE_V_MATHEMATICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'w':
			PROCESS_FONT_FACE_WIDTHS
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case '-':
				PROCESS_FONT_FACE_X_HEIGHT
				break;
			case 'm':
				if (!strncasecmp (&svg->att[2],"l:",2)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_FONT_FACE
	read_tag_end
	if (res > 0)
		res = read_font_face_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FONT_FACE
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_glyph_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_GLYPH
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			switch(tolower(svg->att[1])) {
			case 'l':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'f':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'b':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
							break;
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 'r':
				PROCESS_GLYPH_ARABIC_FORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			if (nameLenght == 1)
				PROCESS_GLYPH_D
			else {
				switch(tolower(svg->att[1])) {
				case 'i':
					switch(tolower(svg->att[2])) {
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
								break;
							case 'l':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
								break;
							case 'r':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'b':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
								break;
							case 'c':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
								break;
							case 'i':
								if (tolower(svg->value[1]) == 'n') {//up
									switch(tolower(svg->value[2])) {
									case 'h':
										PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
										break;
									case 'l':
										if (!strncasecmp (&svg->value[3],"ine",3)) {//down
											if (nameLenght == 6)
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
											else {
												if (!strcasecmp (&svg->value[6],"-table"))
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
												else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'l':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
								break;
							case 'm':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
								break;
							case 'n':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
								break;
							case 'r':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
								break;
							case 't':
								if (!strncasecmp (&svg->value[1],"able",4)) {//down
									if (nameLenght == 5)
										PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
									else {
										if (tolower(svg->value[5]) == '-') {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												switch(tolower(svg->value[7])) {
												case 'a':
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
													break;
												case 'e':
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
													break;
												case 'o':
													if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
														if (nameLenght == 12)
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
														else {
															if (!strcasecmp (&svg->value[12],"-group"))
																PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
															else
																LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														}
													} else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
												break;
											case 'f':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
												break;
											case 'h':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
												break;
											case 'r':
												if (!strncasecmp (&svg->value[7],"ow",2)) {//down
													if (nameLenght == 9)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
													else {
														if (!strcasecmp (&svg->value[9],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
					break;
				case 'o':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							switch(tolower(svg->value[1])) {
							case 'l':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
								break;
							case 'u':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
							break;
						case 'c':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
							break;
						case 'h':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
							break;
						case 'i':
							switch(tolower(svg->value[1])) {
							case 'd':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
								break;
							case 'n':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
							break;
						case 'm':
							switch(tolower(svg->value[1])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
								switch(tolower(svg->value[5])) {
								case 'a':
									PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
									break;
								case 'b':
									PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-",5)) {//up
				switch(tolower(svg->att[6])) {
				case 'n':
					PROCESS_GLYPH_GLYPH_NAME
					break;
				case 'o':
					if (!strncasecmp (&svg->att[7],"rientation-",11)) {//up
						switch(tolower(svg->att[18])) {
						case 'h':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
							break;
						case 'v':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_GLYPH_HORIZ_ADV_X
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'a':
				PROCESS_GLYPH_LANG
				break;
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'r':
				PROCESS_GLYPH_ORIENTATION
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			if (!strncasecmp (&svg->att[1],"nicode",6)) {//down
				if (nameLenght == 7)
					PROCESS_GLYPH_UNICODE
				else {
					if (!strcasecmp (&svg->att[7],"-bidi"))
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
								break;
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
								break;
							case 'n':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'v':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"rt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						PROCESS_GLYPH_VERT_ADV_Y
						break;
					case 'o':
						if (!strncasecmp (&svg->att[6],"rigin-",6)) {//up
							switch(tolower(svg->att[12])) {
							case 'x':
								PROCESS_GLYPH_VERT_ORIGIN_X
								break;
							case 'y':
								PROCESS_GLYPH_VERT_ORIGIN_Y
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'i':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'h':
						PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
						break;
					case 'v':
						PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	ELEMENT_PRE_PROCESS_GLYPH
	read_tag_end
	if (res > 0)
		res = read_glyph_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_GLYPH
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_missing_glyph_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_MISSING_GLYPH
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			if (nameLenght == 1)
				PROCESS_MISSING_GLYPH_D
			else {
				switch(tolower(svg->att[1])) {
				case 'i':
					switch(tolower(svg->att[2])) {
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
								break;
							case 'l':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
								break;
							case 'r':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'b':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
								break;
							case 'c':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
								break;
							case 'i':
								if (tolower(svg->value[1]) == 'n') {//up
									switch(tolower(svg->value[2])) {
									case 'h':
										PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
										break;
									case 'l':
										if (!strncasecmp (&svg->value[3],"ine",3)) {//down
											if (nameLenght == 6)
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
											else {
												if (!strcasecmp (&svg->value[6],"-table"))
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
												else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'l':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
								break;
							case 'm':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
								break;
							case 'n':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
								break;
							case 'r':
								PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
								break;
							case 't':
								if (!strncasecmp (&svg->value[1],"able",4)) {//down
									if (nameLenght == 5)
										PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
									else {
										if (tolower(svg->value[5]) == '-') {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												switch(tolower(svg->value[7])) {
												case 'a':
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
													break;
												case 'e':
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
													break;
												case 'o':
													if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
														if (nameLenght == 12)
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
														else {
															if (!strcasecmp (&svg->value[12],"-group"))
																PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
															else
																LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														}
													} else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
												break;
											case 'f':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
												break;
											case 'h':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
												break;
											case 'r':
												if (!strncasecmp (&svg->value[7],"ow",2)) {//down
													if (nameLenght == 9)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
													else {
														if (!strcasecmp (&svg->value[9],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
					break;
				case 'o':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							switch(tolower(svg->value[1])) {
							case 'l':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
								break;
							case 'u':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
							break;
						case 'c':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
							break;
						case 'h':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
							break;
						case 'i':
							switch(tolower(svg->value[1])) {
							case 'd':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
								break;
							case 'n':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
							break;
						case 'm':
							switch(tolower(svg->value[1])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
								switch(tolower(svg->value[5])) {
								case 'a':
									PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
									break;
								case 'b':
									PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			}
			break;
		case 'e':
			PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_MISSING_GLYPH_HORIZ_ADV_X
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			if (!strncasecmp (&svg->att[1],"ext-",4)) {//up
				switch(tolower(svg->att[5])) {
				case 'a':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'e':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
							break;
						case 'm':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
							break;
						case 's':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 'd':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
					break;
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'a':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
							break;
						case 'g':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
							break;
						case 'i':
							PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
							break;
						case 'o':
							if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
								switch(tolower(svg->value[8])) {
								case 'l':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
									break;
								case 's':
									PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"rt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						PROCESS_MISSING_GLYPH_VERT_ADV_Y
						break;
					case 'o':
						if (!strncasecmp (&svg->att[6],"rigin-",6)) {//up
							switch(tolower(svg->att[12])) {
							case 'x':
								PROCESS_MISSING_GLYPH_VERT_ORIGIN_X
								break;
							case 'y':
								PROCESS_MISSING_GLYPH_VERT_ORIGIN_Y
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'i':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'h':
						PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
						break;
					case 'v':
						PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	ELEMENT_PRE_PROCESS_MISSING_GLYPH
	read_tag_end
	if (res > 0)
		res = read_missing_glyph_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_MISSING_GLYPH
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_hkern_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_HKERN
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'g':
			switch(tolower(svg->att[1])) {
			case '1':
				PROCESS_HKERN_G1
				break;
			case '2':
				PROCESS_HKERN_G2
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'k':
			PROCESS_HKERN_K
			break;
		case 'u':
			switch(tolower(svg->att[1])) {
			case '1':
				PROCESS_HKERN_U1
				break;
			case '2':
				PROCESS_HKERN_U2
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_HKERN
	read_tag_end
	if (res > 0)
		res = skip_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_HKERN
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_vkern_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_VKERN
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'g':
			switch(tolower(svg->att[1])) {
			case '1':
				PROCESS_VKERN_G1
				break;
			case '2':
				PROCESS_VKERN_G2
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'k':
			PROCESS_VKERN_K
			break;
		case 'u':
			switch(tolower(svg->att[1])) {
			case '1':
				PROCESS_VKERN_U1
				break;
			case '2':
				PROCESS_VKERN_U2
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_VKERN
	read_tag_end
	if (res > 0)
		res = skip_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_VKERN
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_font_face_src_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FONT_FACE_SRC
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_FONT_FACE_SRC
	read_tag_end
	if (res > 0)
		res = read_font_face_src_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FONT_FACE_SRC
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_font_face_uri_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FONT_FACE_URI
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_XLINKREQUIRED_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'x':
			switch(tolower(svg->att[1])) {
			case 'l':
				if (!strncasecmp (&svg->att[2],"ink:",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'a':
						switch(tolower(svg->att[7])) {
						case 'c':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"onload"))
									PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ACTUATE_ONLOAD
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						case 'r':
							PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ARCROLE
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'h':
						PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_HREF
						break;
					case 'r':
						PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_ROLE
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							if (!strcasecmp (&svg->value[0],"other"))
								PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_SHOW_OTHER
							else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						}
						break;
					case 't':
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TITLE
							break;
						case 'y':
							{
								nameLenght = strlen (svg->value);
								if (!strcasecmp (&svg->value[0],"simple"))
									PROCESS_SVG_XLINKREQUIRED_ATTRIB_XLINK_TYPE_SIMPLE
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'm':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case ':':
						switch(tolower(svg->att[4])) {
						case 'b':
							PROCESS_SVG_CORE_ATTRIB_XML_BASE
							break;
						case 'l':
							PROCESS_SVG_CORE_ATTRIB_XML_LANG
							break;
						case 's':
							{
								nameLenght = strlen (svg->value);
								switch(tolower(svg->value[0])) {
								case 'd':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
									break;
								case 'p':
									PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_XLINKREQUIRED_ATTRIB_XMLNS_XLINK
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_XLINKREQUIRED_ATTRIB
	ELEMENT_PRE_PROCESS_FONT_FACE_URI
	read_tag_end
	if (res > 0)
		res = read_font_face_uri_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FONT_FACE_URI
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_font_face_format_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FONT_FACE_FORMAT
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 's':
			PROCESS_FONT_FACE_FORMAT_STRING
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_FONT_FACE_FORMAT
	read_tag_end
	if (res > 0)
		res = skip_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FONT_FACE_FORMAT
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_font_face_name_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FONT_FACE_NAME
	HEADING_SVG_CORE_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'i':
			PROCESS_SVG_CORE_ATTRIB_ID
			break;
		case 'n':
			PROCESS_FONT_FACE_NAME_NAME
			break;
		case 'x':
			if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
				switch(tolower(svg->att[4])) {
				case 'b':
					PROCESS_SVG_CORE_ATTRIB_XML_BASE
					break;
				case 'l':
					PROCESS_SVG_CORE_ATTRIB_XML_LANG
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'd':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
							break;
						case 'p':
							PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	ELEMENT_PRE_PROCESS_FONT_FACE_NAME
	read_tag_end
	if (res > 0)
		res = skip_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FONT_FACE_NAME
	if (matchedId)
		svg->skipDraw = true;
	return res;
}
int read_foreignObject_attributes (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	bool matchedId = false;
	HEADING_FOREIGNOBJECT
	HEADING_SVG_CORE_ATTRIB
	HEADING_SVG_CONDITIONAL_ATTRIB
	HEADING_SVG_STYLE_ATTRIB
	HEADING_SVG_PRESENTATION_ATTRIB
	HEADING_SVG_VIEWPORT_ATTRIB
	HEADING_SVG_TEXTCONTENT_ATTRIB
	HEADING_SVG_FONT_ATTRIB
	HEADING_SVG_PAINT_ATTRIB
	HEADING_SVG_COLOR_ATTRIB
	HEADING_SVG_OPACITY_ATTRIB
	HEADING_SVG_GRAPHICS_ATTRIB
	HEADING_SVG_MARKER_ATTRIB
	HEADING_SVG_GRADIENT_ATTRIB
	HEADING_SVG_CLIP_ATTRIB
	HEADING_SVG_GRAPHICALEVENTS_ATTRIB
	read_attributes_loop_start
		int nameLenght = strlen (svg->att);
		switch(tolower(svg->att[0])) {
		case 'a':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					switch(tolower(svg->value[1])) {
					case 'f':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AFTER_EDGE
						break;
					case 'l':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_ALPHABETIC
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_AUTO
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'b':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BASELINE
						break;
					case 'e':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_BEFORE_EDGE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'c':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_CENTRAL
					break;
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_HANGING
					break;
				case 'i':
					switch(tolower(svg->value[1])) {
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_IDEOGRAPHIC
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_INHERIT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 'm':
					switch(tolower(svg->value[1])) {
					case 'a':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MATHEMATICAL
						break;
					case 'i':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_MIDDLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
					break;
				case 't':
					if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
						switch(tolower(svg->value[5])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_AFTER_EDGE
							break;
						case 'b':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_ALIGNMENT_BASELINE_TEXT_BEFORE_EDGE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'b':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_BASELINE_SHIFT
			break;
		case 'c':
			switch(tolower(svg->att[1])) {
			case 'l':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_STYLE_ATTRIB_CLASS
					break;
				case 'i':
					if (tolower(svg->att[3]) == 'p') {//down
						if (nameLenght == 4)
							PROCESS_SVG_VIEWPORT_ATTRIB_CLIP
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'p':
									PROCESS_SVG_CLIP_ATTRIB_CLIP_PATH
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_CLIP_ATTRIB_CLIP_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"lor",3)) {//down
					if (nameLenght == 5)
						PROCESS_SVG_COLOR_ATTRIB_COLOR
					else {
						if (tolower(svg->att[5]) == '-') {//up
							switch(tolower(svg->att[6])) {
							case 'i':
								if (!strncasecmp (&svg->att[7],"nterpolation",12)) {//down
									if (nameLenght == 19)
										{
											nameLenght = strlen (svg->value);
											switch(tolower(svg->value[0])) {
											case 'a':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_AUTO
												break;
											case 'i':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_INHERIT
												break;
											case 'l':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_LINEARRGB
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_INTERPOLATION_SRGB
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										}
									else {
										if (!strcasecmp (&svg->att[19],"-filters"))
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'a':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_AUTO
													break;
												case 'i':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_INHERIT
													break;
												case 'l':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_LINEARRGB
													break;
												case 's':
													PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_INTERPOLATION_FILTERS_SRGB
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
										else
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									}
								} else
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							case 'p':
								PROCESS_SVG_PRESENTATION_ATTRIB_COLOR_PROFILE
								break;
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'a':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_AUTO
										break;
									case 'i':
										PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_INHERIT
										break;
									case 'o':
										if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
											switch(tolower(svg->value[8])) {
											case 'q':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZEQUALITY
												break;
											case 's':
												PROCESS_SVG_COLOR_ATTRIB_COLOR_RENDERING_OPTIMIZESPEED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
						} else
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'u':
				PROCESS_SVG_PRESENTATION_ATTRIB_CURSOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'd':
			switch(tolower(svg->att[1])) {
			case 'i':
				switch(tolower(svg->att[2])) {
				case 'r':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_INHERIT
							break;
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_LTR
							break;
						case 'r':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DIRECTION_RTL
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				case 's':
					{
						nameLenght = strlen (svg->value);
						switch(tolower(svg->value[0])) {
						case 'b':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_BLOCK
							break;
						case 'c':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_COMPACT
							break;
						case 'i':
							if (tolower(svg->value[1]) == 'n') {//up
								switch(tolower(svg->value[2])) {
								case 'h':
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INHERIT
									break;
								case 'l':
									if (!strncasecmp (&svg->value[3],"ine",3)) {//down
										if (nameLenght == 6)
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE
										else {
											if (!strcasecmp (&svg->value[6],"-table"))
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_INLINE_TABLE
											else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								default:
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									break;
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						case 'l':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_LIST_ITEM
							break;
						case 'm':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_MARKER
							break;
						case 'n':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_NONE
							break;
						case 'r':
							PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_RUN_IN
							break;
						case 't':
							if (!strncasecmp (&svg->value[1],"able",4)) {//down
								if (nameLenght == 5)
									PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE
								else {
									if (tolower(svg->value[5]) == '-') {//up
										switch(tolower(svg->value[6])) {
										case 'c':
											switch(tolower(svg->value[7])) {
											case 'a':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CAPTION
												break;
											case 'e':
												PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_CELL
												break;
											case 'o':
												if (!strncasecmp (&svg->value[8],"lumn",4)) {//down
													if (nameLenght == 12)
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN
													else {
														if (!strcasecmp (&svg->value[12],"-group"))
															PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_COLUMN_GROUP
														else
															LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
											break;
										case 'f':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_FOOTER_GROUP
											break;
										case 'h':
											PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_HEADER_GROUP
											break;
										case 'r':
											if (!strncasecmp (&svg->value[7],"ow",2)) {//down
												if (nameLenght == 9)
													PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW
												else {
													if (!strcasecmp (&svg->value[9],"-group"))
														PROCESS_SVG_GRAPHICS_ATTRIB_DISPLAY_TABLE_ROW_GROUP
													else
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												}
											} else
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									} else
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								}
							} else
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
					}
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'o':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						switch(tolower(svg->value[1])) {
						case 'l':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_ALPHABETIC
							break;
						case 'u':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_AUTO
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'c':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_CENTRAL
						break;
					case 'h':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_HANGING
						break;
					case 'i':
						switch(tolower(svg->value[1])) {
						case 'd':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_IDEOGRAPHIC
							break;
						case 'n':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_INHERIT
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'm':
						switch(tolower(svg->value[1])) {
						case 'a':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MATHEMATICAL
							break;
						case 'i':
							PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_MIDDLE
							break;
						default:
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							break;
						}
						break;
					case 'n':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_NO_CHANGE
						break;
					case 'r':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_RESET_SIZE
						break;
					case 't':
						if (!strncasecmp (&svg->value[1],"ext-",4)) {//up
							switch(tolower(svg->value[5])) {
							case 'a':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_AFTER_EDGE
								break;
							case 'b':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_TEXT_BEFORE_EDGE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'u':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_DOMINANT_BASELINE_USE_SCRIPT
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'e':
			switch(tolower(svg->att[1])) {
			case 'n':
				PROCESS_SVG_PRESENTATION_ATTRIB_ENABLE_BACKGROUND
				break;
			case 'x':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'f':
						PROCESS_FOREIGNOBJECT_EXTERNALRESOURCESREQUIRED_FALSE
						break;
					case 't':
						PROCESS_FOREIGNOBJECT_EXTERNALRESOURCESREQUIRED_TRUE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'f':
			switch(tolower(svg->att[1])) {
			case 'i':
				if (tolower(svg->att[2]) == 'l') {//up
					switch(tolower(svg->att[3])) {
					case 'l':
						if (nameLenght == 4)
							PROCESS_SVG_PAINT_ATTRIB_FILL
						else {
							if (tolower(svg->att[4]) == '-') {//up
								switch(tolower(svg->att[5])) {
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_FILL_OPACITY
									break;
								case 'r':
									{
										nameLenght = strlen (svg->value);
										switch(tolower(svg->value[0])) {
										case 'e':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_EVENODD
											break;
										case 'i':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_INHERIT
											break;
										case 'n':
											PROCESS_SVG_PAINT_ATTRIB_FILL_RULE_NONZERO
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
									}
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
						break;
					case 't':
						PROCESS_SVG_PRESENTATION_ATTRIB_FILTER
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'l':
				if (!strncasecmp (&svg->att[2],"ood-",4)) {//up
					switch(tolower(svg->att[6])) {
					case 'c':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_COLOR
						break;
					case 'o':
						PROCESS_SVG_PRESENTATION_ATTRIB_FLOOD_OPACITY
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'o':
				if (!strncasecmp (&svg->att[2],"nt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'f':
						PROCESS_SVG_FONT_ATTRIB_FONT_FAMILY
						break;
					case 's':
						switch(tolower(svg->att[6])) {
						case 'i':
							if (!strncasecmp (&svg->att[7],"ze",2)) {//down
								if (nameLenght == 9)
									PROCESS_SVG_FONT_ATTRIB_FONT_SIZE
								else {
									if (!strcasecmp (&svg->att[9],"-adjust"))
										PROCESS_SVG_FONT_ATTRIB_FONT_SIZE_ADJUST
									else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						case 't':
							switch(tolower(svg->att[7])) {
							case 'r':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'c':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_CONDENSED
										break;
									case 'e':
										if (tolower(svg->value[1]) == 'x') {//up
											switch(tolower(svg->value[2])) {
											case 'p':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXPANDED
												break;
											case 't':
												if (!strncasecmp (&svg->value[3],"ra-",3)) {//up
													switch(tolower(svg->value[6])) {
													case 'c':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_CONDENSED
														break;
													case 'e':
														PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_EXTRA_EXPANDED
														break;
													default:
														LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
														break;
													}
												} else
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'i':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_INHERIT
										break;
									case 'n':
										switch(tolower(svg->value[1])) {
										case 'a':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NARROWER
											break;
										case 'o':
											PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_NORMAL
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 's':
										if (!strncasecmp (&svg->value[1],"emi-",4)) {//up
											switch(tolower(svg->value[5])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_SEMI_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'u':
										if (!strncasecmp (&svg->value[1],"ltra-",5)) {//up
											switch(tolower(svg->value[6])) {
											case 'c':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_CONDENSED
												break;
											case 'e':
												PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_ULTRA_EXPANDED
												break;
											default:
												LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
												break;
											}
										} else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									case 'w':
										PROCESS_SVG_FONT_ATTRIB_FONT_STRETCH_WIDER
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							case 'y':
								{
									nameLenght = strlen (svg->value);
									switch(tolower(svg->value[0])) {
									case 'i':
										switch(tolower(svg->value[1])) {
										case 'n':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_INHERIT
											break;
										case 't':
											PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_ITALIC
											break;
										default:
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
											break;
										}
										break;
									case 'n':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_NORMAL
										break;
									case 'o':
										PROCESS_SVG_FONT_ATTRIB_FONT_STYLE_OBLIQUE
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								}
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
						break;
					case 'v':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_INHERIT
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_NORMAL
								break;
							case 's':
								PROCESS_SVG_FONT_ATTRIB_FONT_VARIANT_SMALL_CAPS
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'w':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case '1':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_100
								break;
							case '2':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_200
								break;
							case '3':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_300
								break;
							case '4':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_400
								break;
							case '5':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_500
								break;
							case '6':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_600
								break;
							case '7':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_700
								break;
							case '8':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_800
								break;
							case '9':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_900
								break;
							case 'b':
								if (!strncasecmp (&svg->value[1],"old",3)) {//down
									if (nameLenght == 4)
										PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLD
									else {
										if (!strcasecmp (&svg->value[4],"er"))
											PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_BOLDER
										else
											LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							case 'i':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_INHERIT
								break;
							case 'l':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_LIGHTER
								break;
							case 'n':
								PROCESS_SVG_FONT_ATTRIB_FONT_WEIGHT_NORMAL
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'g':
			if (!strncasecmp (&svg->att[1],"lyph-orientation-",17)) {//up
				switch(tolower(svg->att[18])) {
				case 'h':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_HORIZONTAL
					break;
				case 'v':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_GLYPH_ORIENTATION_VERTICAL
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'h':
			PROCESS_FOREIGNOBJECT_HEIGHT
			break;
		case 'i':
			switch(tolower(svg->att[1])) {
			case 'd':
				PROCESS_SVG_CORE_ATTRIB_ID
				break;
			case 'm':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_AUTO
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_INHERIT
						break;
					case 'o':
						if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
							switch(tolower(svg->value[8])) {
							case 'q':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZEQUALITY
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_IMAGE_RENDERING_OPTIMIZESPEED
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'k':
			PROCESS_SVG_TEXTCONTENT_ATTRIB_KERNING
			break;
		case 'l':
			switch(tolower(svg->att[1])) {
			case 'e':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_LETTER_SPACING
				break;
			case 'i':
				PROCESS_SVG_PRESENTATION_ATTRIB_LIGHTING_COLOR
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'm':
			if (tolower(svg->att[1]) == 'a') {//up
				switch(tolower(svg->att[2])) {
				case 'r':
					if (!strncasecmp (&svg->att[3],"ker-",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'e':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_END
							break;
						case 'm':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_MID
							break;
						case 's':
							PROCESS_SVG_MARKER_ATTRIB_MARKER_START
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 's':
					PROCESS_SVG_PRESENTATION_ATTRIB_MASK
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 'o':
			switch(tolower(svg->att[1])) {
			case 'n':
				switch(tolower(svg->att[2])) {
				case 'a':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONACTIVATE
					break;
				case 'c':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONCLICK
					break;
				case 'f':
					if (!strncasecmp (&svg->att[3],"ocus",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'i':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSIN
							break;
						case 'o':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONFOCUSOUT
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'l':
					PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONLOAD
					break;
				case 'm':
					if (!strncasecmp (&svg->att[3],"ouse",4)) {//up
						switch(tolower(svg->att[7])) {
						case 'd':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEDOWN
							break;
						case 'm':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEMOVE
							break;
						case 'o':
							switch(tolower(svg->att[8])) {
							case 'u':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOUT
								break;
							case 'v':
								PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEOVER
								break;
							default:
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
								break;
							}
							break;
						case 'u':
							PROCESS_SVG_GRAPHICALEVENTS_ATTRIB_ONMOUSEUP
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'p':
				PROCESS_SVG_OPACITY_ATTRIB_OPACITY
				break;
			case 'v':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_AUTO
						break;
					case 'h':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_HIDDEN
						break;
					case 'i':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_INHERIT
						break;
					case 's':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_SCROLL
						break;
					case 'v':
						PROCESS_SVG_VIEWPORT_ATTRIB_OVERFLOW_VISIBLE
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'p':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'a':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_ALL
					break;
				case 'f':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_FILL
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_INHERIT
					break;
				case 'n':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_NONE
					break;
				case 'p':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_PAINTED
					break;
				case 's':
					PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_STROKE
					break;
				case 'v':
					if (!strncasecmp (&svg->value[1],"isible",6)) {//down
						if (nameLenght == 7)
							PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLE
						else {
							switch(tolower(svg->value[7])) {
							case 'f':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEFILL
								break;
							case 'p':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLEPAINTED
								break;
							case 's':
								PROCESS_SVG_GRAPHICS_ATTRIB_POINTER_EVENTS_VISIBLESTROKE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
					} else
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'r':
			if (!strncasecmp (&svg->att[1],"equired",7)) {//up
				switch(tolower(svg->att[8])) {
				case 'e':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDEXTENSIONS
					break;
				case 'f':
					PROCESS_SVG_CONDITIONAL_ATTRIB_REQUIREDFEATURES
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
			} else
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		case 's':
			switch(tolower(svg->att[1])) {
			case 'h':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'a':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_AUTO
						break;
					case 'c':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_CRISPEDGES
						break;
					case 'g':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_GEOMETRICPRECISION
						break;
					case 'i':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_INHERIT
						break;
					case 'o':
						PROCESS_SVG_GRAPHICS_ATTRIB_SHAPE_RENDERING_OPTIMIZESPEED
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			case 't':
				switch(tolower(svg->att[2])) {
				case 'o':
					if (!strncasecmp (&svg->att[3],"p-",2)) {//up
						switch(tolower(svg->att[5])) {
						case 'c':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_COLOR
							break;
						case 'o':
							PROCESS_SVG_GRADIENT_ATTRIB_STOP_OPACITY
							break;
						default:
							LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
							break;
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'r':
					if (!strncasecmp (&svg->att[3],"oke",3)) {//down
						if (nameLenght == 6)
							PROCESS_SVG_PAINT_ATTRIB_STROKE
						else {
							if (tolower(svg->att[6]) == '-') {//up
								switch(tolower(svg->att[7])) {
								case 'd':
									if (!strncasecmp (&svg->att[8],"ash",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'a':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHARRAY
											break;
										case 'o':
											PROCESS_SVG_PAINT_ATTRIB_STROKE_DASHOFFSET
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'l':
									if (!strncasecmp (&svg->att[8],"ine",3)) {//up
										switch(tolower(svg->att[11])) {
										case 'c':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_BUTT
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_INHERIT
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_ROUND
													break;
												case 's':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINECAP_SQUARE
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										case 'j':
											{
												nameLenght = strlen (svg->value);
												switch(tolower(svg->value[0])) {
												case 'b':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_BEVEL
													break;
												case 'i':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_INHERIT
													break;
												case 'm':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_MITER
													break;
												case 'r':
													PROCESS_SVG_PAINT_ATTRIB_STROKE_LINEJOIN_ROUND
													break;
												default:
													LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
													break;
												}
											}
											break;
										default:
											LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
											break;
										}
									} else
										LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								case 'm':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_MITERLIMIT
									break;
								case 'o':
									PROCESS_SVG_OPACITY_ATTRIB_STROKE_OPACITY
									break;
								case 'w':
									PROCESS_SVG_PAINT_ATTRIB_STROKE_WIDTH
									break;
								default:
									LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
									break;
								}
							} else
								LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						}
					} else
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				case 'y':
					PROCESS_SVG_STYLE_ATTRIB_STYLE
					break;
				default:
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
					break;
				}
				break;
			case 'y':
				PROCESS_SVG_CONDITIONAL_ATTRIB_SYSTEMLANGUAGE
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 't':
			switch(tolower(svg->att[1])) {
			case 'e':
				if (!strncasecmp (&svg->att[2],"xt-",3)) {//up
					switch(tolower(svg->att[5])) {
					case 'a':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'e':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_END
								break;
							case 'i':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_INHERIT
								break;
							case 'm':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_MIDDLE
								break;
							case 's':
								PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_ANCHOR_START
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					case 'd':
						PROCESS_SVG_TEXTCONTENT_ATTRIB_TEXT_DECORATION
						break;
					case 'r':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'a':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_AUTO
								break;
							case 'g':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_GEOMETRICPRECISION
								break;
							case 'i':
								PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_INHERIT
								break;
							case 'o':
								if (!strncasecmp (&svg->value[1],"ptimize",7)) {//up
									switch(tolower(svg->value[8])) {
									case 'l':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZELEGIBILITY
										break;
									case 's':
										PROCESS_SVG_GRAPHICS_ATTRIB_TEXT_RENDERING_OPTIMIZESPEED
										break;
									default:
										LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
										break;
									}
								} else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			case 'r':
				PROCESS_FOREIGNOBJECT_TRANSFORM
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'u':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'b':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_BIDI_OVERRIDE
					break;
				case 'e':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_EMBED
					break;
				case 'i':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_INHERIT
					break;
				case 'n':
					PROCESS_SVG_TEXTCONTENT_ATTRIB_UNICODE_BIDI_NORMAL
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'v':
			{
				nameLenght = strlen (svg->value);
				switch(tolower(svg->value[0])) {
				case 'h':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_HIDDEN
					break;
				case 'i':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_INHERIT
					break;
				case 'v':
					PROCESS_SVG_GRAPHICS_ATTRIB_VISIBILITY_VISIBLE
					break;
				default:
					LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
					break;
				}
			}
			break;
		case 'w':
			switch(tolower(svg->att[1])) {
			case 'i':
				PROCESS_FOREIGNOBJECT_WIDTH
				break;
			case 'o':
				PROCESS_SVG_TEXTCONTENT_ATTRIB_WORD_SPACING
				break;
			case 'r':
				{
					nameLenght = strlen (svg->value);
					switch(tolower(svg->value[0])) {
					case 'i':
						PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_INHERIT
						break;
					case 'l':
						if (tolower(svg->value[1]) == 'r') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_LR_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 'r':
						if (tolower(svg->value[1]) == 'l') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL
							else {
								if (!strcasecmp (&svg->value[2],"-tb"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_RL_TB
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					case 't':
						if (tolower(svg->value[1]) == 'b') {//down
							if (nameLenght == 2)
								PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB
							else {
								if (!strcasecmp (&svg->value[2],"-rl"))
									PROCESS_SVG_PRESENTATION_ATTRIB_WRITING_MODE_TB_RL
								else
									LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
							}
						} else
							LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					default:
						LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
						break;
					}
				}
				break;
			default:
				LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
				break;
			}
			break;
		case 'x':
			if (nameLenght == 1)
				PROCESS_FOREIGNOBJECT_X
			else {
				if (!strncasecmp (&svg->att[1],"ml:",3)) {//up
					switch(tolower(svg->att[4])) {
					case 'b':
						PROCESS_SVG_CORE_ATTRIB_XML_BASE
						break;
					case 'l':
						PROCESS_SVG_CORE_ATTRIB_XML_LANG
						break;
					case 's':
						{
							nameLenght = strlen (svg->value);
							switch(tolower(svg->value[0])) {
							case 'd':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_DEFAULT
								break;
							case 'p':
								PROCESS_SVG_CORE_ATTRIB_XML_SPACE_PRESERVE
								break;
							default:
								LOG("Unexpected enum value: %s->%s=%s\n", svg->att, svg->att, svg->value);
								break;
							}
						}
						break;
					default:
						LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
						break;
					}
				} else
					LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			}
			break;
		case 'y':
			PROCESS_FOREIGNOBJECT_Y
			break;
		default:
			LOG("Unexpected attribute: %s->%s\n", svg->att, svg->att);
			break;
		}
	read_attributes_loop_end
	PROCESS_SVG_CORE_ATTRIB
	PROCESS_SVG_CONDITIONAL_ATTRIB
	PROCESS_SVG_STYLE_ATTRIB
	PROCESS_SVG_PRESENTATION_ATTRIB
	PROCESS_SVG_VIEWPORT_ATTRIB
	PROCESS_SVG_TEXTCONTENT_ATTRIB
	PROCESS_SVG_FONT_ATTRIB
	PROCESS_SVG_PAINT_ATTRIB
	PROCESS_SVG_COLOR_ATTRIB
	PROCESS_SVG_OPACITY_ATTRIB
	PROCESS_SVG_GRAPHICS_ATTRIB
	PROCESS_SVG_MARKER_ATTRIB
	PROCESS_SVG_GRADIENT_ATTRIB
	PROCESS_SVG_CLIP_ATTRIB
	PROCESS_SVG_GRAPHICALEVENTS_ATTRIB
	ELEMENT_PRE_PROCESS_FOREIGNOBJECT
	read_tag_end
	if (res > 0)
		res = skip_children (svg, f, attribs, parentData);
	ELEMENT_POST_PROCESS_FOREIGNOBJECT
	if (matchedId)
		svg->skipDraw = true;
	return res;
}


int read_svg_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				switch(tolower(svg->elt[1])) {
				case 'l':
					res = read_altGlyphDef_attributes (svg, f, attribs, parentData);
					break;
				case 'n':
					if (!strncasecmp (&svg->elt[2],"imate",5)) {//down
						if (nameLenght == 7)
							res = read_animate_attributes (svg, f, attribs, parentData);
						else {
							switch(tolower(svg->elt[7])) {
							case 'c':
								res = read_animateColor_attributes (svg, f, attribs, parentData);
								break;
							case 'm':
								res = read_animateMotion_attributes (svg, f, attribs, parentData);
								break;
							case 't':
								res = read_animateTransform_attributes (svg, f, attribs, parentData);
								break;
							default:
								skip_element
								break;
							}
						}
					} else
						skip_element
					break;
				default:
					skip_element
					break;
				}
			}
			break;
		case 'c':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_circle_attributes (svg, f, attribs, parentData);
				break;
			case 'l':
				res = read_clipPath_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				res = read_color_profile_attributes (svg, f, attribs, parentData);
				break;
			case 'u':
				res = read_cursor_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'd':
			if (tolower(svg->elt[1]) == 'e') {//up
				switch(tolower(svg->elt[2])) {
				case 'f':
					res = read_defs_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_desc_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
			} else
				skip_element
			break;
		case 'e':
			res = read_ellipse_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_filter_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				switch(tolower(svg->elt[2])) {
				case 'n':
					if (tolower(svg->elt[3]) == 't') {//down
						if (nameLenght == 4)
							res = read_font_attributes (svg, f, attribs, parentData);
						else {
							if (!strcasecmp (&svg->elt[4],"_face"))
								res = read_font_face_attributes (svg, f, attribs, parentData);
							else
								skip_element
						}
					} else
						skip_element
					break;
				case 'r':
					res = read_foreignObject_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'g':
			res = read_g_attributes (svg, f, attribs, parentData);
			break;
		case 'i':
			res = read_image_attributes (svg, f, attribs, parentData);
			break;
		case 'l':
			if (!strncasecmp (&svg->elt[1],"ine",3)) {//down
				if (nameLenght == 4)
					res = read_line_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[4],"argradient"))
						res = read_linearGradient_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'm':
			switch(tolower(svg->elt[1])) {
			case 'a':
				switch(tolower(svg->elt[2])) {
				case 'r':
					res = read_marker_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_mask_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			case 'e':
				res = read_metadata_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->elt[1])) {
			case 'a':
				if (tolower(svg->elt[2]) == 't') {//up
					switch(tolower(svg->elt[3])) {
					case 'h':
						res = read_path_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_pattern_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			case 'o':
				if (!strncasecmp (&svg->elt[2],"ly",2)) {//up
					switch(tolower(svg->elt[4])) {
					case 'g':
						res = read_polygon_attributes (svg, f, attribs, parentData);
						break;
					case 'l':
						res = read_polyline_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'r':
			switch(tolower(svg->elt[1])) {
			case 'a':
				res = read_radialGradient_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_rect_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 's':
			switch(tolower(svg->elt[1])) {
			case 'c':
				res = read_script_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_set_attributes (svg, f, attribs, parentData);
				break;
			case 't':
				res = read_style_attributes (svg, f, attribs, parentData);
				break;
			case 'v':
				res = read_svg_attributes (svg, f, attribs, parentData);
				break;
			case 'w':
				res = read_switch_attributes (svg, f, attribs, parentData);
				break;
			case 'y':
				res = read_symbol_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_text_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'u':
			res = read_use_attributes (svg, f, attribs, parentData);
			break;
		case 'v':
			res = read_view_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_g_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				switch(tolower(svg->elt[1])) {
				case 'l':
					res = read_altGlyphDef_attributes (svg, f, attribs, parentData);
					break;
				case 'n':
					if (!strncasecmp (&svg->elt[2],"imate",5)) {//down
						if (nameLenght == 7)
							res = read_animate_attributes (svg, f, attribs, parentData);
						else {
							switch(tolower(svg->elt[7])) {
							case 'c':
								res = read_animateColor_attributes (svg, f, attribs, parentData);
								break;
							case 'm':
								res = read_animateMotion_attributes (svg, f, attribs, parentData);
								break;
							case 't':
								res = read_animateTransform_attributes (svg, f, attribs, parentData);
								break;
							default:
								skip_element
								break;
							}
						}
					} else
						skip_element
					break;
				default:
					skip_element
					break;
				}
			}
			break;
		case 'c':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_circle_attributes (svg, f, attribs, parentData);
				break;
			case 'l':
				res = read_clipPath_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				res = read_color_profile_attributes (svg, f, attribs, parentData);
				break;
			case 'u':
				res = read_cursor_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'd':
			if (tolower(svg->elt[1]) == 'e') {//up
				switch(tolower(svg->elt[2])) {
				case 'f':
					res = read_defs_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_desc_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
			} else
				skip_element
			break;
		case 'e':
			res = read_ellipse_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_filter_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				switch(tolower(svg->elt[2])) {
				case 'n':
					if (tolower(svg->elt[3]) == 't') {//down
						if (nameLenght == 4)
							res = read_font_attributes (svg, f, attribs, parentData);
						else {
							if (!strcasecmp (&svg->elt[4],"_face"))
								res = read_font_face_attributes (svg, f, attribs, parentData);
							else
								skip_element
						}
					} else
						skip_element
					break;
				case 'r':
					res = read_foreignObject_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'g':
			res = read_g_attributes (svg, f, attribs, parentData);
			break;
		case 'i':
			res = read_image_attributes (svg, f, attribs, parentData);
			break;
		case 'l':
			if (!strncasecmp (&svg->elt[1],"ine",3)) {//down
				if (nameLenght == 4)
					res = read_line_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[4],"argradient"))
						res = read_linearGradient_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'm':
			switch(tolower(svg->elt[1])) {
			case 'a':
				switch(tolower(svg->elt[2])) {
				case 'r':
					res = read_marker_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_mask_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			case 'e':
				res = read_metadata_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->elt[1])) {
			case 'a':
				if (tolower(svg->elt[2]) == 't') {//up
					switch(tolower(svg->elt[3])) {
					case 'h':
						res = read_path_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_pattern_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			case 'o':
				if (!strncasecmp (&svg->elt[2],"ly",2)) {//up
					switch(tolower(svg->elt[4])) {
					case 'g':
						res = read_polygon_attributes (svg, f, attribs, parentData);
						break;
					case 'l':
						res = read_polyline_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'r':
			switch(tolower(svg->elt[1])) {
			case 'a':
				res = read_radialGradient_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_rect_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 's':
			switch(tolower(svg->elt[1])) {
			case 'c':
				res = read_script_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_set_attributes (svg, f, attribs, parentData);
				break;
			case 't':
				res = read_style_attributes (svg, f, attribs, parentData);
				break;
			case 'v':
				res = read_svg_attributes (svg, f, attribs, parentData);
				break;
			case 'w':
				res = read_switch_attributes (svg, f, attribs, parentData);
				break;
			case 'y':
				res = read_symbol_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_text_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'u':
			res = read_use_attributes (svg, f, attribs, parentData);
			break;
		case 'v':
			res = read_view_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_defs_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				switch(tolower(svg->elt[1])) {
				case 'l':
					res = read_altGlyphDef_attributes (svg, f, attribs, parentData);
					break;
				case 'n':
					if (!strncasecmp (&svg->elt[2],"imate",5)) {//down
						if (nameLenght == 7)
							res = read_animate_attributes (svg, f, attribs, parentData);
						else {
							switch(tolower(svg->elt[7])) {
							case 'c':
								res = read_animateColor_attributes (svg, f, attribs, parentData);
								break;
							case 'm':
								res = read_animateMotion_attributes (svg, f, attribs, parentData);
								break;
							case 't':
								res = read_animateTransform_attributes (svg, f, attribs, parentData);
								break;
							default:
								skip_element
								break;
							}
						}
					} else
						skip_element
					break;
				default:
					skip_element
					break;
				}
			}
			break;
		case 'c':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_circle_attributes (svg, f, attribs, parentData);
				break;
			case 'l':
				res = read_clipPath_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				res = read_color_profile_attributes (svg, f, attribs, parentData);
				break;
			case 'u':
				res = read_cursor_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'd':
			if (tolower(svg->elt[1]) == 'e') {//up
				switch(tolower(svg->elt[2])) {
				case 'f':
					res = read_defs_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_desc_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
			} else
				skip_element
			break;
		case 'e':
			res = read_ellipse_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_filter_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				switch(tolower(svg->elt[2])) {
				case 'n':
					if (tolower(svg->elt[3]) == 't') {//down
						if (nameLenght == 4)
							res = read_font_attributes (svg, f, attribs, parentData);
						else {
							if (!strcasecmp (&svg->elt[4],"_face"))
								res = read_font_face_attributes (svg, f, attribs, parentData);
							else
								skip_element
						}
					} else
						skip_element
					break;
				case 'r':
					res = read_foreignObject_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'g':
			res = read_g_attributes (svg, f, attribs, parentData);
			break;
		case 'i':
			res = read_image_attributes (svg, f, attribs, parentData);
			break;
		case 'l':
			if (!strncasecmp (&svg->elt[1],"ine",3)) {//down
				if (nameLenght == 4)
					res = read_line_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[4],"argradient"))
						res = read_linearGradient_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'm':
			switch(tolower(svg->elt[1])) {
			case 'a':
				switch(tolower(svg->elt[2])) {
				case 'r':
					res = read_marker_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_mask_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			case 'e':
				res = read_metadata_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->elt[1])) {
			case 'a':
				if (tolower(svg->elt[2]) == 't') {//up
					switch(tolower(svg->elt[3])) {
					case 'h':
						res = read_path_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_pattern_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			case 'o':
				if (!strncasecmp (&svg->elt[2],"ly",2)) {//up
					switch(tolower(svg->elt[4])) {
					case 'g':
						res = read_polygon_attributes (svg, f, attribs, parentData);
						break;
					case 'l':
						res = read_polyline_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'r':
			switch(tolower(svg->elt[1])) {
			case 'a':
				res = read_radialGradient_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_rect_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 's':
			switch(tolower(svg->elt[1])) {
			case 'c':
				res = read_script_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_set_attributes (svg, f, attribs, parentData);
				break;
			case 't':
				res = read_style_attributes (svg, f, attribs, parentData);
				break;
			case 'v':
				res = read_svg_attributes (svg, f, attribs, parentData);
				break;
			case 'w':
				res = read_switch_attributes (svg, f, attribs, parentData);
				break;
			case 'y':
				res = read_symbol_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_text_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'u':
			res = read_use_attributes (svg, f, attribs, parentData);
			break;
		case 'v':
			res = read_view_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_symbol_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				switch(tolower(svg->elt[1])) {
				case 'l':
					res = read_altGlyphDef_attributes (svg, f, attribs, parentData);
					break;
				case 'n':
					if (!strncasecmp (&svg->elt[2],"imate",5)) {//down
						if (nameLenght == 7)
							res = read_animate_attributes (svg, f, attribs, parentData);
						else {
							switch(tolower(svg->elt[7])) {
							case 'c':
								res = read_animateColor_attributes (svg, f, attribs, parentData);
								break;
							case 'm':
								res = read_animateMotion_attributes (svg, f, attribs, parentData);
								break;
							case 't':
								res = read_animateTransform_attributes (svg, f, attribs, parentData);
								break;
							default:
								skip_element
								break;
							}
						}
					} else
						skip_element
					break;
				default:
					skip_element
					break;
				}
			}
			break;
		case 'c':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_circle_attributes (svg, f, attribs, parentData);
				break;
			case 'l':
				res = read_clipPath_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				res = read_color_profile_attributes (svg, f, attribs, parentData);
				break;
			case 'u':
				res = read_cursor_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'd':
			if (tolower(svg->elt[1]) == 'e') {//up
				switch(tolower(svg->elt[2])) {
				case 'f':
					res = read_defs_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_desc_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
			} else
				skip_element
			break;
		case 'e':
			res = read_ellipse_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_filter_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				switch(tolower(svg->elt[2])) {
				case 'n':
					if (tolower(svg->elt[3]) == 't') {//down
						if (nameLenght == 4)
							res = read_font_attributes (svg, f, attribs, parentData);
						else {
							if (!strcasecmp (&svg->elt[4],"_face"))
								res = read_font_face_attributes (svg, f, attribs, parentData);
							else
								skip_element
						}
					} else
						skip_element
					break;
				case 'r':
					res = read_foreignObject_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'g':
			res = read_g_attributes (svg, f, attribs, parentData);
			break;
		case 'i':
			res = read_image_attributes (svg, f, attribs, parentData);
			break;
		case 'l':
			if (!strncasecmp (&svg->elt[1],"ine",3)) {//down
				if (nameLenght == 4)
					res = read_line_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[4],"argradient"))
						res = read_linearGradient_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'm':
			switch(tolower(svg->elt[1])) {
			case 'a':
				switch(tolower(svg->elt[2])) {
				case 'r':
					res = read_marker_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_mask_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			case 'e':
				res = read_metadata_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->elt[1])) {
			case 'a':
				if (tolower(svg->elt[2]) == 't') {//up
					switch(tolower(svg->elt[3])) {
					case 'h':
						res = read_path_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_pattern_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			case 'o':
				if (!strncasecmp (&svg->elt[2],"ly",2)) {//up
					switch(tolower(svg->elt[4])) {
					case 'g':
						res = read_polygon_attributes (svg, f, attribs, parentData);
						break;
					case 'l':
						res = read_polyline_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'r':
			switch(tolower(svg->elt[1])) {
			case 'a':
				res = read_radialGradient_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_rect_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 's':
			switch(tolower(svg->elt[1])) {
			case 'c':
				res = read_script_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_set_attributes (svg, f, attribs, parentData);
				break;
			case 't':
				res = read_style_attributes (svg, f, attribs, parentData);
				break;
			case 'v':
				res = read_svg_attributes (svg, f, attribs, parentData);
				break;
			case 'w':
				res = read_switch_attributes (svg, f, attribs, parentData);
				break;
			case 'y':
				res = read_symbol_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_text_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'u':
			res = read_use_attributes (svg, f, attribs, parentData);
			break;
		case 'v':
			res = read_view_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_use_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					switch(tolower(svg->elt[7])) {
					case 'c':
						res = read_animateColor_attributes (svg, f, attribs, parentData);
						break;
					case 'm':
						res = read_animateMotion_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_animateTransform_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				}
			} else
				skip_element
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_switch_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
					if (nameLenght == 7)
						res = read_animate_attributes (svg, f, attribs, parentData);
					else {
						switch(tolower(svg->elt[7])) {
						case 'c':
							res = read_animateColor_attributes (svg, f, attribs, parentData);
							break;
						case 'm':
							res = read_animateMotion_attributes (svg, f, attribs, parentData);
							break;
						case 't':
							res = read_animateTransform_attributes (svg, f, attribs, parentData);
							break;
						default:
							skip_element
							break;
						}
					}
				} else
					skip_element
			}
			break;
		case 'c':
			res = read_circle_attributes (svg, f, attribs, parentData);
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'e':
			res = read_ellipse_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			res = read_foreignObject_attributes (svg, f, attribs, parentData);
			break;
		case 'g':
			res = read_g_attributes (svg, f, attribs, parentData);
			break;
		case 'i':
			res = read_image_attributes (svg, f, attribs, parentData);
			break;
		case 'l':
			res = read_line_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 'p':
			switch(tolower(svg->elt[1])) {
			case 'a':
				res = read_path_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				if (!strncasecmp (&svg->elt[2],"ly",2)) {//up
					switch(tolower(svg->elt[4])) {
					case 'g':
						res = read_polygon_attributes (svg, f, attribs, parentData);
						break;
					case 'l':
						res = read_polyline_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'r':
			res = read_rect_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_set_attributes (svg, f, attribs, parentData);
				break;
			case 'v':
				res = read_svg_attributes (svg, f, attribs, parentData);
				break;
			case 'w':
				res = read_switch_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_text_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'u':
			res = read_use_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_image_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					switch(tolower(svg->elt[7])) {
					case 'c':
						res = read_animateColor_attributes (svg, f, attribs, parentData);
						break;
					case 'm':
						res = read_animateMotion_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_animateTransform_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				}
			} else
				skip_element
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_path_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					switch(tolower(svg->elt[7])) {
					case 'c':
						res = read_animateColor_attributes (svg, f, attribs, parentData);
						break;
					case 'm':
						res = read_animateMotion_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_animateTransform_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				}
			} else
				skip_element
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_rect_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					switch(tolower(svg->elt[7])) {
					case 'c':
						res = read_animateColor_attributes (svg, f, attribs, parentData);
						break;
					case 'm':
						res = read_animateMotion_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_animateTransform_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				}
			} else
				skip_element
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_circle_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					switch(tolower(svg->elt[7])) {
					case 'c':
						res = read_animateColor_attributes (svg, f, attribs, parentData);
						break;
					case 'm':
						res = read_animateMotion_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_animateTransform_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				}
			} else
				skip_element
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_line_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					switch(tolower(svg->elt[7])) {
					case 'c':
						res = read_animateColor_attributes (svg, f, attribs, parentData);
						break;
					case 'm':
						res = read_animateMotion_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_animateTransform_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				}
			} else
				skip_element
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_ellipse_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					switch(tolower(svg->elt[7])) {
					case 'c':
						res = read_animateColor_attributes (svg, f, attribs, parentData);
						break;
					case 'm':
						res = read_animateMotion_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_animateTransform_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				}
			} else
				skip_element
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_polyline_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					switch(tolower(svg->elt[7])) {
					case 'c':
						res = read_animateColor_attributes (svg, f, attribs, parentData);
						break;
					case 'm':
						res = read_animateMotion_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_animateTransform_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				}
			} else
				skip_element
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_polygon_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					switch(tolower(svg->elt[7])) {
					case 'c':
						res = read_animateColor_attributes (svg, f, attribs, parentData);
						break;
					case 'm':
						res = read_animateMotion_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_animateTransform_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				}
			} else
				skip_element
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_text_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				switch(tolower(svg->elt[1])) {
				case 'l':
					res = read_altGlyph_attributes (svg, f, attribs, parentData);
					break;
				case 'n':
					if (!strncasecmp (&svg->elt[2],"imate",5)) {//down
						if (nameLenght == 7)
							res = read_animate_attributes (svg, f, attribs, parentData);
						else {
							switch(tolower(svg->elt[7])) {
							case 'c':
								res = read_animateColor_attributes (svg, f, attribs, parentData);
								break;
							case 'm':
								res = read_animateMotion_attributes (svg, f, attribs, parentData);
								break;
							case 't':
								res = read_animateTransform_attributes (svg, f, attribs, parentData);
								break;
							default:
								skip_element
								break;
							}
						}
					} else
						skip_element
					break;
				default:
					skip_element
					break;
				}
			}
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_textPath_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			case 'r':
				res = read_tref_attributes (svg, f, attribs, parentData);
				break;
			case 's':
				res = read_tspan_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_tspan_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				switch(tolower(svg->elt[1])) {
				case 'l':
					res = read_altGlyph_attributes (svg, f, attribs, parentData);
					break;
				case 'n':
					if (!strncasecmp (&svg->elt[2],"imate",5)) {//down
						if (nameLenght == 7)
							res = read_animate_attributes (svg, f, attribs, parentData);
						else {
							if (!strcasecmp (&svg->elt[7],"color"))
								res = read_animateColor_attributes (svg, f, attribs, parentData);
							else
								skip_element
						}
					} else
						skip_element
					break;
				default:
					skip_element
					break;
				}
			}
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			case 'r':
				res = read_tref_attributes (svg, f, attribs, parentData);
				break;
			case 's':
				res = read_tspan_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_tref_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[7],"color"))
						res = read_animateColor_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_textPath_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				switch(tolower(svg->elt[1])) {
				case 'l':
					res = read_altGlyph_attributes (svg, f, attribs, parentData);
					break;
				case 'n':
					if (!strncasecmp (&svg->elt[2],"imate",5)) {//down
						if (nameLenght == 7)
							res = read_animate_attributes (svg, f, attribs, parentData);
						else {
							if (!strcasecmp (&svg->elt[7],"color"))
								res = read_animateColor_attributes (svg, f, attribs, parentData);
							else
								skip_element
						}
					} else
						skip_element
					break;
				default:
					skip_element
					break;
				}
			}
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			case 'r':
				res = read_tref_attributes (svg, f, attribs, parentData);
				break;
			case 's':
				res = read_tspan_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_altGlyphDef_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_altGlyphItem_attributes (svg, f, attribs, parentData);
			break;
		case 'g':
			res = read_glyphRef_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_altGlyphItem_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		if (!strcasecmp (&svg->elt[0],"glyphref"))
			res = read_glyphRef_attributes (svg, f, attribs, parentData);
		else
			skip_element
	}
	return res;
}
int read_marker_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				switch(tolower(svg->elt[1])) {
				case 'l':
					res = read_altGlyphDef_attributes (svg, f, attribs, parentData);
					break;
				case 'n':
					if (!strncasecmp (&svg->elt[2],"imate",5)) {//down
						if (nameLenght == 7)
							res = read_animate_attributes (svg, f, attribs, parentData);
						else {
							switch(tolower(svg->elt[7])) {
							case 'c':
								res = read_animateColor_attributes (svg, f, attribs, parentData);
								break;
							case 'm':
								res = read_animateMotion_attributes (svg, f, attribs, parentData);
								break;
							case 't':
								res = read_animateTransform_attributes (svg, f, attribs, parentData);
								break;
							default:
								skip_element
								break;
							}
						}
					} else
						skip_element
					break;
				default:
					skip_element
					break;
				}
			}
			break;
		case 'c':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_circle_attributes (svg, f, attribs, parentData);
				break;
			case 'l':
				res = read_clipPath_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				res = read_color_profile_attributes (svg, f, attribs, parentData);
				break;
			case 'u':
				res = read_cursor_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'd':
			if (tolower(svg->elt[1]) == 'e') {//up
				switch(tolower(svg->elt[2])) {
				case 'f':
					res = read_defs_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_desc_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
			} else
				skip_element
			break;
		case 'e':
			res = read_ellipse_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_filter_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				switch(tolower(svg->elt[2])) {
				case 'n':
					if (tolower(svg->elt[3]) == 't') {//down
						if (nameLenght == 4)
							res = read_font_attributes (svg, f, attribs, parentData);
						else {
							if (!strcasecmp (&svg->elt[4],"_face"))
								res = read_font_face_attributes (svg, f, attribs, parentData);
							else
								skip_element
						}
					} else
						skip_element
					break;
				case 'r':
					res = read_foreignObject_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'g':
			res = read_g_attributes (svg, f, attribs, parentData);
			break;
		case 'i':
			res = read_image_attributes (svg, f, attribs, parentData);
			break;
		case 'l':
			if (!strncasecmp (&svg->elt[1],"ine",3)) {//down
				if (nameLenght == 4)
					res = read_line_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[4],"argradient"))
						res = read_linearGradient_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'm':
			switch(tolower(svg->elt[1])) {
			case 'a':
				switch(tolower(svg->elt[2])) {
				case 'r':
					res = read_marker_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_mask_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			case 'e':
				res = read_metadata_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->elt[1])) {
			case 'a':
				if (tolower(svg->elt[2]) == 't') {//up
					switch(tolower(svg->elt[3])) {
					case 'h':
						res = read_path_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_pattern_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			case 'o':
				if (!strncasecmp (&svg->elt[2],"ly",2)) {//up
					switch(tolower(svg->elt[4])) {
					case 'g':
						res = read_polygon_attributes (svg, f, attribs, parentData);
						break;
					case 'l':
						res = read_polyline_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'r':
			switch(tolower(svg->elt[1])) {
			case 'a':
				res = read_radialGradient_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_rect_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 's':
			switch(tolower(svg->elt[1])) {
			case 'c':
				res = read_script_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_set_attributes (svg, f, attribs, parentData);
				break;
			case 't':
				res = read_style_attributes (svg, f, attribs, parentData);
				break;
			case 'v':
				res = read_svg_attributes (svg, f, attribs, parentData);
				break;
			case 'w':
				res = read_switch_attributes (svg, f, attribs, parentData);
				break;
			case 'y':
				res = read_symbol_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_text_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'u':
			res = read_use_attributes (svg, f, attribs, parentData);
			break;
		case 'v':
			res = read_view_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_color_profile_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_linearGradient_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[7],"transform"))
						res = read_animateTransform_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_set_attributes (svg, f, attribs, parentData);
				break;
			case 't':
				res = read_stop_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_radialGradient_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[7],"transform"))
						res = read_animateTransform_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_set_attributes (svg, f, attribs, parentData);
				break;
			case 't':
				res = read_stop_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_stop_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[7],"color"))
						res = read_animateColor_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_pattern_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				switch(tolower(svg->elt[1])) {
				case 'l':
					res = read_altGlyphDef_attributes (svg, f, attribs, parentData);
					break;
				case 'n':
					if (!strncasecmp (&svg->elt[2],"imate",5)) {//down
						if (nameLenght == 7)
							res = read_animate_attributes (svg, f, attribs, parentData);
						else {
							switch(tolower(svg->elt[7])) {
							case 'c':
								res = read_animateColor_attributes (svg, f, attribs, parentData);
								break;
							case 'm':
								res = read_animateMotion_attributes (svg, f, attribs, parentData);
								break;
							case 't':
								res = read_animateTransform_attributes (svg, f, attribs, parentData);
								break;
							default:
								skip_element
								break;
							}
						}
					} else
						skip_element
					break;
				default:
					skip_element
					break;
				}
			}
			break;
		case 'c':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_circle_attributes (svg, f, attribs, parentData);
				break;
			case 'l':
				res = read_clipPath_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				res = read_color_profile_attributes (svg, f, attribs, parentData);
				break;
			case 'u':
				res = read_cursor_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'd':
			if (tolower(svg->elt[1]) == 'e') {//up
				switch(tolower(svg->elt[2])) {
				case 'f':
					res = read_defs_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_desc_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
			} else
				skip_element
			break;
		case 'e':
			res = read_ellipse_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_filter_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				switch(tolower(svg->elt[2])) {
				case 'n':
					if (tolower(svg->elt[3]) == 't') {//down
						if (nameLenght == 4)
							res = read_font_attributes (svg, f, attribs, parentData);
						else {
							if (!strcasecmp (&svg->elt[4],"_face"))
								res = read_font_face_attributes (svg, f, attribs, parentData);
							else
								skip_element
						}
					} else
						skip_element
					break;
				case 'r':
					res = read_foreignObject_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'g':
			res = read_g_attributes (svg, f, attribs, parentData);
			break;
		case 'i':
			res = read_image_attributes (svg, f, attribs, parentData);
			break;
		case 'l':
			if (!strncasecmp (&svg->elt[1],"ine",3)) {//down
				if (nameLenght == 4)
					res = read_line_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[4],"argradient"))
						res = read_linearGradient_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'm':
			switch(tolower(svg->elt[1])) {
			case 'a':
				switch(tolower(svg->elt[2])) {
				case 'r':
					res = read_marker_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_mask_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			case 'e':
				res = read_metadata_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->elt[1])) {
			case 'a':
				if (tolower(svg->elt[2]) == 't') {//up
					switch(tolower(svg->elt[3])) {
					case 'h':
						res = read_path_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_pattern_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			case 'o':
				if (!strncasecmp (&svg->elt[2],"ly",2)) {//up
					switch(tolower(svg->elt[4])) {
					case 'g':
						res = read_polygon_attributes (svg, f, attribs, parentData);
						break;
					case 'l':
						res = read_polyline_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'r':
			switch(tolower(svg->elt[1])) {
			case 'a':
				res = read_radialGradient_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_rect_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 's':
			switch(tolower(svg->elt[1])) {
			case 'c':
				res = read_script_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_set_attributes (svg, f, attribs, parentData);
				break;
			case 't':
				res = read_style_attributes (svg, f, attribs, parentData);
				break;
			case 'v':
				res = read_svg_attributes (svg, f, attribs, parentData);
				break;
			case 'w':
				res = read_switch_attributes (svg, f, attribs, parentData);
				break;
			case 'y':
				res = read_symbol_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_text_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'u':
			res = read_use_attributes (svg, f, attribs, parentData);
			break;
		case 'v':
			res = read_view_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_clipPath_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					switch(tolower(svg->elt[7])) {
					case 'c':
						res = read_animateColor_attributes (svg, f, attribs, parentData);
						break;
					case 'm':
						res = read_animateMotion_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_animateTransform_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				}
			} else
				skip_element
			break;
		case 'c':
			res = read_circle_attributes (svg, f, attribs, parentData);
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'e':
			res = read_ellipse_attributes (svg, f, attribs, parentData);
			break;
		case 'l':
			res = read_line_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 'p':
			switch(tolower(svg->elt[1])) {
			case 'a':
				res = read_path_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				if (!strncasecmp (&svg->elt[2],"ly",2)) {//up
					switch(tolower(svg->elt[4])) {
					case 'g':
						res = read_polygon_attributes (svg, f, attribs, parentData);
						break;
					case 'l':
						res = read_polyline_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'r':
			res = read_rect_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_text_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'u':
			res = read_use_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_mask_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				switch(tolower(svg->elt[1])) {
				case 'l':
					res = read_altGlyphDef_attributes (svg, f, attribs, parentData);
					break;
				case 'n':
					if (!strncasecmp (&svg->elt[2],"imate",5)) {//down
						if (nameLenght == 7)
							res = read_animate_attributes (svg, f, attribs, parentData);
						else {
							switch(tolower(svg->elt[7])) {
							case 'c':
								res = read_animateColor_attributes (svg, f, attribs, parentData);
								break;
							case 'm':
								res = read_animateMotion_attributes (svg, f, attribs, parentData);
								break;
							case 't':
								res = read_animateTransform_attributes (svg, f, attribs, parentData);
								break;
							default:
								skip_element
								break;
							}
						}
					} else
						skip_element
					break;
				default:
					skip_element
					break;
				}
			}
			break;
		case 'c':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_circle_attributes (svg, f, attribs, parentData);
				break;
			case 'l':
				res = read_clipPath_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				res = read_color_profile_attributes (svg, f, attribs, parentData);
				break;
			case 'u':
				res = read_cursor_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'd':
			if (tolower(svg->elt[1]) == 'e') {//up
				switch(tolower(svg->elt[2])) {
				case 'f':
					res = read_defs_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_desc_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
			} else
				skip_element
			break;
		case 'e':
			res = read_ellipse_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_filter_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				switch(tolower(svg->elt[2])) {
				case 'n':
					if (tolower(svg->elt[3]) == 't') {//down
						if (nameLenght == 4)
							res = read_font_attributes (svg, f, attribs, parentData);
						else {
							if (!strcasecmp (&svg->elt[4],"_face"))
								res = read_font_face_attributes (svg, f, attribs, parentData);
							else
								skip_element
						}
					} else
						skip_element
					break;
				case 'r':
					res = read_foreignObject_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'g':
			res = read_g_attributes (svg, f, attribs, parentData);
			break;
		case 'i':
			res = read_image_attributes (svg, f, attribs, parentData);
			break;
		case 'l':
			if (!strncasecmp (&svg->elt[1],"ine",3)) {//down
				if (nameLenght == 4)
					res = read_line_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[4],"argradient"))
						res = read_linearGradient_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'm':
			switch(tolower(svg->elt[1])) {
			case 'a':
				switch(tolower(svg->elt[2])) {
				case 'r':
					res = read_marker_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_mask_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			case 'e':
				res = read_metadata_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->elt[1])) {
			case 'a':
				if (tolower(svg->elt[2]) == 't') {//up
					switch(tolower(svg->elt[3])) {
					case 'h':
						res = read_path_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_pattern_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			case 'o':
				if (!strncasecmp (&svg->elt[2],"ly",2)) {//up
					switch(tolower(svg->elt[4])) {
					case 'g':
						res = read_polygon_attributes (svg, f, attribs, parentData);
						break;
					case 'l':
						res = read_polyline_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'r':
			switch(tolower(svg->elt[1])) {
			case 'a':
				res = read_radialGradient_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_rect_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 's':
			switch(tolower(svg->elt[1])) {
			case 'c':
				res = read_script_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_set_attributes (svg, f, attribs, parentData);
				break;
			case 't':
				res = read_style_attributes (svg, f, attribs, parentData);
				break;
			case 'v':
				res = read_svg_attributes (svg, f, attribs, parentData);
				break;
			case 'w':
				res = read_switch_attributes (svg, f, attribs, parentData);
				break;
			case 'y':
				res = read_symbol_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_text_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'u':
			res = read_use_attributes (svg, f, attribs, parentData);
			break;
		case 'v':
			res = read_view_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_filter_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			if (tolower(svg->elt[1]) == 'e') {//up
				switch(tolower(svg->elt[2])) {
				case 'b':
					res = read_feBlend_attributes (svg, f, attribs, parentData);
					break;
				case 'c':
					if (tolower(svg->elt[3]) == 'o') {//up
						switch(tolower(svg->elt[4])) {
						case 'l':
							res = read_feColorMatrix_attributes (svg, f, attribs, parentData);
							break;
						case 'm':
							if (!strncasecmp (&svg->elt[5],"po",2)) {//up
								switch(tolower(svg->elt[7])) {
								case 'n':
									res = read_feComponentTransfer_attributes (svg, f, attribs, parentData);
									break;
								case 's':
									res = read_feComposite_attributes (svg, f, attribs, parentData);
									break;
								default:
									skip_element
									break;
								}
							} else
								skip_element
							break;
						case 'n':
							res = read_feConvolveMatrix_attributes (svg, f, attribs, parentData);
							break;
						default:
							skip_element
							break;
						}
					} else
						skip_element
					break;
				case 'd':
					if (tolower(svg->elt[3]) == 'i') {//up
						switch(tolower(svg->elt[4])) {
						case 'f':
							res = read_feDiffuseLighting_attributes (svg, f, attribs, parentData);
							break;
						case 's':
							res = read_feDisplacementMap_attributes (svg, f, attribs, parentData);
							break;
						default:
							skip_element
							break;
						}
					} else
						skip_element
					break;
				case 'f':
					res = read_feFlood_attributes (svg, f, attribs, parentData);
					break;
				case 'g':
					res = read_feGaussianBlur_attributes (svg, f, attribs, parentData);
					break;
				case 'i':
					res = read_feImage_attributes (svg, f, attribs, parentData);
					break;
				case 'm':
					switch(tolower(svg->elt[3])) {
					case 'e':
						res = read_feMerge_attributes (svg, f, attribs, parentData);
						break;
					case 'o':
						res = read_feMorphology_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
					break;
				case 'o':
					res = read_feOffset_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_feSpecularLighting_attributes (svg, f, attribs, parentData);
					break;
				case 't':
					switch(tolower(svg->elt[3])) {
					case 'i':
						res = read_feTile_attributes (svg, f, attribs, parentData);
						break;
					case 'u':
						res = read_feTurbulence_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
					break;
				default:
					skip_element
					break;
				}
			} else
				skip_element
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feBlend_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feColorMatrix_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feComponentTransfer_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		if (!strncasecmp (&svg->elt[0],"fefunc",6)) {//up
			switch(tolower(svg->elt[6])) {
			case 'a':
				res = read_feFuncA_attributes (svg, f, attribs, parentData);
				break;
			case 'b':
				res = read_feFuncB_attributes (svg, f, attribs, parentData);
				break;
			case 'g':
				res = read_feFuncG_attributes (svg, f, attribs, parentData);
				break;
			case 'r':
				res = read_feFuncR_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
		} else
			skip_element
	}
	return res;
}
int read_feComposite_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feConvolveMatrix_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feDiffuseLighting_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[7],"color"))
						res = read_animateColor_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'f':
			if (tolower(svg->elt[1]) == 'e') {//up
				switch(tolower(svg->elt[2])) {
				case 'd':
					res = read_feDistantLight_attributes (svg, f, attribs, parentData);
					break;
				case 'p':
					res = read_fePointLight_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_feSpotLight_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
			} else
				skip_element
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feDisplacementMap_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feFlood_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[7],"color"))
						res = read_animateColor_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feGaussianBlur_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feImage_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[7],"transform"))
						res = read_animateTransform_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feMerge_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		if (!strcasecmp (&svg->elt[0],"femergenode"))
			res = read_feMergeNode_attributes (svg, f, attribs, parentData);
		else
			skip_element
	}
	return res;
}
int read_feMergeNode_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feMorphology_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feOffset_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feSpecularLighting_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (!strncasecmp (&svg->elt[1],"nimate",6)) {//down
				if (nameLenght == 7)
					res = read_animate_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[7],"color"))
						res = read_animateColor_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'f':
			if (tolower(svg->elt[1]) == 'e') {//up
				switch(tolower(svg->elt[2])) {
				case 'd':
					res = read_feDistantLight_attributes (svg, f, attribs, parentData);
					break;
				case 'p':
					res = read_fePointLight_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_feSpotLight_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
			} else
				skip_element
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feTile_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feTurbulence_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feDistantLight_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_fePointLight_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feSpotLight_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feFuncR_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feFuncG_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feFuncB_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_feFuncA_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			res = read_animate_attributes (svg, f, attribs, parentData);
			break;
		case 's':
			res = read_set_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_cursor_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_a_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				switch(tolower(svg->elt[1])) {
				case 'l':
					res = read_altGlyphDef_attributes (svg, f, attribs, parentData);
					break;
				case 'n':
					if (!strncasecmp (&svg->elt[2],"imate",5)) {//down
						if (nameLenght == 7)
							res = read_animate_attributes (svg, f, attribs, parentData);
						else {
							switch(tolower(svg->elt[7])) {
							case 'c':
								res = read_animateColor_attributes (svg, f, attribs, parentData);
								break;
							case 'm':
								res = read_animateMotion_attributes (svg, f, attribs, parentData);
								break;
							case 't':
								res = read_animateTransform_attributes (svg, f, attribs, parentData);
								break;
							default:
								skip_element
								break;
							}
						}
					} else
						skip_element
					break;
				default:
					skip_element
					break;
				}
			}
			break;
		case 'c':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_circle_attributes (svg, f, attribs, parentData);
				break;
			case 'l':
				res = read_clipPath_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				res = read_color_profile_attributes (svg, f, attribs, parentData);
				break;
			case 'u':
				res = read_cursor_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'd':
			if (tolower(svg->elt[1]) == 'e') {//up
				switch(tolower(svg->elt[2])) {
				case 'f':
					res = read_defs_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_desc_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
			} else
				skip_element
			break;
		case 'e':
			res = read_ellipse_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_filter_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				switch(tolower(svg->elt[2])) {
				case 'n':
					if (tolower(svg->elt[3]) == 't') {//down
						if (nameLenght == 4)
							res = read_font_attributes (svg, f, attribs, parentData);
						else {
							if (!strcasecmp (&svg->elt[4],"_face"))
								res = read_font_face_attributes (svg, f, attribs, parentData);
							else
								skip_element
						}
					} else
						skip_element
					break;
				case 'r':
					res = read_foreignObject_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'g':
			res = read_g_attributes (svg, f, attribs, parentData);
			break;
		case 'i':
			res = read_image_attributes (svg, f, attribs, parentData);
			break;
		case 'l':
			if (!strncasecmp (&svg->elt[1],"ine",3)) {//down
				if (nameLenght == 4)
					res = read_line_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[4],"argradient"))
						res = read_linearGradient_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'm':
			switch(tolower(svg->elt[1])) {
			case 'a':
				switch(tolower(svg->elt[2])) {
				case 'r':
					res = read_marker_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_mask_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			case 'e':
				res = read_metadata_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->elt[1])) {
			case 'a':
				if (tolower(svg->elt[2]) == 't') {//up
					switch(tolower(svg->elt[3])) {
					case 'h':
						res = read_path_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_pattern_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			case 'o':
				if (!strncasecmp (&svg->elt[2],"ly",2)) {//up
					switch(tolower(svg->elt[4])) {
					case 'g':
						res = read_polygon_attributes (svg, f, attribs, parentData);
						break;
					case 'l':
						res = read_polyline_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'r':
			switch(tolower(svg->elt[1])) {
			case 'a':
				res = read_radialGradient_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_rect_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 's':
			switch(tolower(svg->elt[1])) {
			case 'c':
				res = read_script_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_set_attributes (svg, f, attribs, parentData);
				break;
			case 't':
				res = read_style_attributes (svg, f, attribs, parentData);
				break;
			case 'v':
				res = read_svg_attributes (svg, f, attribs, parentData);
				break;
			case 'w':
				res = read_switch_attributes (svg, f, attribs, parentData);
				break;
			case 'y':
				res = read_symbol_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_text_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'u':
			res = read_use_attributes (svg, f, attribs, parentData);
			break;
		case 'v':
			res = read_view_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_view_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_animate_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_set_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_animateMotion_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_metadata_attributes (svg, f, attribs, parentData);
				break;
			case 'p':
				res = read_mpath_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_animateColor_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_animateTransform_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_mpath_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_font_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			res = read_font_face_attributes (svg, f, attribs, parentData);
			break;
		case 'g':
			res = read_glyph_attributes (svg, f, attribs, parentData);
			break;
		case 'h':
			res = read_hkern_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_metadata_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_missing_glyph_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		case 'v':
			res = read_vkern_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_font_face_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'd':
			res = read_desc_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			res = read_font_face_src_attributes (svg, f, attribs, parentData);
			break;
		case 'm':
			res = read_metadata_attributes (svg, f, attribs, parentData);
			break;
		case 't':
			res = read_title_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_glyph_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				switch(tolower(svg->elt[1])) {
				case 'l':
					res = read_altGlyphDef_attributes (svg, f, attribs, parentData);
					break;
				case 'n':
					if (!strncasecmp (&svg->elt[2],"imate",5)) {//down
						if (nameLenght == 7)
							res = read_animate_attributes (svg, f, attribs, parentData);
						else {
							switch(tolower(svg->elt[7])) {
							case 'c':
								res = read_animateColor_attributes (svg, f, attribs, parentData);
								break;
							case 'm':
								res = read_animateMotion_attributes (svg, f, attribs, parentData);
								break;
							case 't':
								res = read_animateTransform_attributes (svg, f, attribs, parentData);
								break;
							default:
								skip_element
								break;
							}
						}
					} else
						skip_element
					break;
				default:
					skip_element
					break;
				}
			}
			break;
		case 'c':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_circle_attributes (svg, f, attribs, parentData);
				break;
			case 'l':
				res = read_clipPath_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				res = read_color_profile_attributes (svg, f, attribs, parentData);
				break;
			case 'u':
				res = read_cursor_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'd':
			if (tolower(svg->elt[1]) == 'e') {//up
				switch(tolower(svg->elt[2])) {
				case 'f':
					res = read_defs_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_desc_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
			} else
				skip_element
			break;
		case 'e':
			res = read_ellipse_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_filter_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				switch(tolower(svg->elt[2])) {
				case 'n':
					if (tolower(svg->elt[3]) == 't') {//down
						if (nameLenght == 4)
							res = read_font_attributes (svg, f, attribs, parentData);
						else {
							if (!strcasecmp (&svg->elt[4],"_face"))
								res = read_font_face_attributes (svg, f, attribs, parentData);
							else
								skip_element
						}
					} else
						skip_element
					break;
				case 'r':
					res = read_foreignObject_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'g':
			res = read_g_attributes (svg, f, attribs, parentData);
			break;
		case 'i':
			res = read_image_attributes (svg, f, attribs, parentData);
			break;
		case 'l':
			if (!strncasecmp (&svg->elt[1],"ine",3)) {//down
				if (nameLenght == 4)
					res = read_line_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[4],"argradient"))
						res = read_linearGradient_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'm':
			switch(tolower(svg->elt[1])) {
			case 'a':
				switch(tolower(svg->elt[2])) {
				case 'r':
					res = read_marker_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_mask_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			case 'e':
				res = read_metadata_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->elt[1])) {
			case 'a':
				if (tolower(svg->elt[2]) == 't') {//up
					switch(tolower(svg->elt[3])) {
					case 'h':
						res = read_path_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_pattern_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			case 'o':
				if (!strncasecmp (&svg->elt[2],"ly",2)) {//up
					switch(tolower(svg->elt[4])) {
					case 'g':
						res = read_polygon_attributes (svg, f, attribs, parentData);
						break;
					case 'l':
						res = read_polyline_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'r':
			switch(tolower(svg->elt[1])) {
			case 'a':
				res = read_radialGradient_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_rect_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 's':
			switch(tolower(svg->elt[1])) {
			case 'c':
				res = read_script_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_set_attributes (svg, f, attribs, parentData);
				break;
			case 't':
				res = read_style_attributes (svg, f, attribs, parentData);
				break;
			case 'v':
				res = read_svg_attributes (svg, f, attribs, parentData);
				break;
			case 'w':
				res = read_switch_attributes (svg, f, attribs, parentData);
				break;
			case 'y':
				res = read_symbol_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_text_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'u':
			res = read_use_attributes (svg, f, attribs, parentData);
			break;
		case 'v':
			res = read_view_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_missing_glyph_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		switch(tolower(svg->elt[0])) {
		case 'a':
			if (nameLenght == 1)
				res = read_a_attributes (svg, f, attribs, parentData);
			else {
				switch(tolower(svg->elt[1])) {
				case 'l':
					res = read_altGlyphDef_attributes (svg, f, attribs, parentData);
					break;
				case 'n':
					if (!strncasecmp (&svg->elt[2],"imate",5)) {//down
						if (nameLenght == 7)
							res = read_animate_attributes (svg, f, attribs, parentData);
						else {
							switch(tolower(svg->elt[7])) {
							case 'c':
								res = read_animateColor_attributes (svg, f, attribs, parentData);
								break;
							case 'm':
								res = read_animateMotion_attributes (svg, f, attribs, parentData);
								break;
							case 't':
								res = read_animateTransform_attributes (svg, f, attribs, parentData);
								break;
							default:
								skip_element
								break;
							}
						}
					} else
						skip_element
					break;
				default:
					skip_element
					break;
				}
			}
			break;
		case 'c':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_circle_attributes (svg, f, attribs, parentData);
				break;
			case 'l':
				res = read_clipPath_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				res = read_color_profile_attributes (svg, f, attribs, parentData);
				break;
			case 'u':
				res = read_cursor_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'd':
			if (tolower(svg->elt[1]) == 'e') {//up
				switch(tolower(svg->elt[2])) {
				case 'f':
					res = read_defs_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_desc_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
			} else
				skip_element
			break;
		case 'e':
			res = read_ellipse_attributes (svg, f, attribs, parentData);
			break;
		case 'f':
			switch(tolower(svg->elt[1])) {
			case 'i':
				res = read_filter_attributes (svg, f, attribs, parentData);
				break;
			case 'o':
				switch(tolower(svg->elt[2])) {
				case 'n':
					if (tolower(svg->elt[3]) == 't') {//down
						if (nameLenght == 4)
							res = read_font_attributes (svg, f, attribs, parentData);
						else {
							if (!strcasecmp (&svg->elt[4],"_face"))
								res = read_font_face_attributes (svg, f, attribs, parentData);
							else
								skip_element
						}
					} else
						skip_element
					break;
				case 'r':
					res = read_foreignObject_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'g':
			res = read_g_attributes (svg, f, attribs, parentData);
			break;
		case 'i':
			res = read_image_attributes (svg, f, attribs, parentData);
			break;
		case 'l':
			if (!strncasecmp (&svg->elt[1],"ine",3)) {//down
				if (nameLenght == 4)
					res = read_line_attributes (svg, f, attribs, parentData);
				else {
					if (!strcasecmp (&svg->elt[4],"argradient"))
						res = read_linearGradient_attributes (svg, f, attribs, parentData);
					else
						skip_element
				}
			} else
				skip_element
			break;
		case 'm':
			switch(tolower(svg->elt[1])) {
			case 'a':
				switch(tolower(svg->elt[2])) {
				case 'r':
					res = read_marker_attributes (svg, f, attribs, parentData);
					break;
				case 's':
					res = read_mask_attributes (svg, f, attribs, parentData);
					break;
				default:
					skip_element
					break;
				}
				break;
			case 'e':
				res = read_metadata_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'p':
			switch(tolower(svg->elt[1])) {
			case 'a':
				if (tolower(svg->elt[2]) == 't') {//up
					switch(tolower(svg->elt[3])) {
					case 'h':
						res = read_path_attributes (svg, f, attribs, parentData);
						break;
					case 't':
						res = read_pattern_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			case 'o':
				if (!strncasecmp (&svg->elt[2],"ly",2)) {//up
					switch(tolower(svg->elt[4])) {
					case 'g':
						res = read_polygon_attributes (svg, f, attribs, parentData);
						break;
					case 'l':
						res = read_polyline_attributes (svg, f, attribs, parentData);
						break;
					default:
						skip_element
						break;
					}
				} else
					skip_element
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'r':
			switch(tolower(svg->elt[1])) {
			case 'a':
				res = read_radialGradient_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_rect_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 's':
			switch(tolower(svg->elt[1])) {
			case 'c':
				res = read_script_attributes (svg, f, attribs, parentData);
				break;
			case 'e':
				res = read_set_attributes (svg, f, attribs, parentData);
				break;
			case 't':
				res = read_style_attributes (svg, f, attribs, parentData);
				break;
			case 'v':
				res = read_svg_attributes (svg, f, attribs, parentData);
				break;
			case 'w':
				res = read_switch_attributes (svg, f, attribs, parentData);
				break;
			case 'y':
				res = read_symbol_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 't':
			switch(tolower(svg->elt[1])) {
			case 'e':
				res = read_text_attributes (svg, f, attribs, parentData);
				break;
			case 'i':
				res = read_title_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
			break;
		case 'u':
			res = read_use_attributes (svg, f, attribs, parentData);
			break;
		case 'v':
			res = read_view_attributes (svg, f, attribs, parentData);
			break;
		default:
			skip_element
			break;
		}
	}
	return res;
}
int read_font_face_src_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		if (!strncasecmp (&svg->elt[0],"font_face_",10)) {//up
			switch(tolower(svg->elt[10])) {
			case 'n':
				res = read_font_face_name_attributes (svg, f, attribs, parentData);
				break;
			case 'u':
				res = read_font_face_uri_attributes (svg, f, attribs, parentData);
				break;
			default:
				skip_element
				break;
			}
		} else
			skip_element
	}
	return res;
}
int read_font_face_uri_children (svg_context* svg, FILE* f, svg_attributes attribs, void* parentData) {
	int res = 0;
	while (!feof (f)) {
		read_element_start
		int nameLenght = strlen (svg->elt);
		if (!strcasecmp (&svg->elt[0],"font_face_format"))
			res = read_font_face_format_attributes (svg, f, attribs, parentData);
		else
			skip_element
	}
	return res;
}
#endif
